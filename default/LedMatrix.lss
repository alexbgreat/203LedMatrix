
LedMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e4  00800100  0000192a  000019be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  008003e4  008003e4  00001ca2  2**0
                  ALLOC
  3 .stab         0000114c  00000000  00000000  00001ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000040a  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000031fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002ea  00000000  00000000  0000329a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012b5  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000089f  00000000  00000000  00004839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014a7  00000000  00000000  000050d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00006580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000530  00000000  00000000  00006720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a64  00000000  00000000  00006c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  000076b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6a c3       	rjmp	.+1748   	; 0x6d6 <__ctors_end>
       2:	84 c3       	rjmp	.+1800   	; 0x70c <__bad_interrupt>
       4:	83 c3       	rjmp	.+1798   	; 0x70c <__bad_interrupt>
       6:	82 c3       	rjmp	.+1796   	; 0x70c <__bad_interrupt>
       8:	81 c3       	rjmp	.+1794   	; 0x70c <__bad_interrupt>
       a:	80 c3       	rjmp	.+1792   	; 0x70c <__bad_interrupt>
       c:	7f c3       	rjmp	.+1790   	; 0x70c <__bad_interrupt>
       e:	7e c3       	rjmp	.+1788   	; 0x70c <__bad_interrupt>
      10:	7d c3       	rjmp	.+1786   	; 0x70c <__bad_interrupt>
      12:	2b c6       	rjmp	.+3158   	; 0xc6a <__vector_9>
      14:	7b c3       	rjmp	.+1782   	; 0x70c <__bad_interrupt>
      16:	7a c3       	rjmp	.+1780   	; 0x70c <__bad_interrupt>
      18:	79 c3       	rjmp	.+1778   	; 0x70c <__bad_interrupt>
      1a:	92 c5       	rjmp	.+2852   	; 0xb40 <__vector_13>
      1c:	77 c3       	rjmp	.+1774   	; 0x70c <__bad_interrupt>
      1e:	76 c3       	rjmp	.+1772   	; 0x70c <__bad_interrupt>
      20:	b2 c3       	rjmp	.+1892   	; 0x786 <__vector_16>
      22:	74 c3       	rjmp	.+1768   	; 0x70c <__bad_interrupt>
      24:	74 c3       	rjmp	.+1768   	; 0x70e <__vector_18>
      26:	72 c3       	rjmp	.+1764   	; 0x70c <__bad_interrupt>
      28:	71 c3       	rjmp	.+1762   	; 0x70c <__bad_interrupt>
      2a:	c0 c4       	rjmp	.+2432   	; 0x9ac <__vector_21>
      2c:	6f c3       	rjmp	.+1758   	; 0x70c <__bad_interrupt>
      2e:	6e c3       	rjmp	.+1756   	; 0x70c <__bad_interrupt>
      30:	6d c3       	rjmp	.+1754   	; 0x70c <__bad_interrupt>
      32:	6c c3       	rjmp	.+1752   	; 0x70c <__bad_interrupt>

00000034 <matrix>:
      34:	04 04 00 04 00 00 02 04 00 02 00 00 01 04 00 01     ................
      44:	00 00 00 04 80 00 00 80 00 04 20 00 00 20 80 04     .......... .. ..
      54:	00 80 00 00 40 04 00 40 00 00 04 00 40 00 00 40     ....@..@....@..@
      64:	02 00 40 00 00 40 01 00 40 00 00 40 00 00 c0 00     ..@..@..@..@....
      74:	00 40 00 00 60 00 00 40 80 00 40 00 00 40 40 00     .@..`..@..@..@@.
      84:	40 00 00 40 04 00 40 04 00 00 02 00 40 02 00 00     @..@..@.....@...
      94:	01 00 40 01 00 00 00 00 c0 00 00 80 00 00 60 00     ..@...........`.
      a4:	00 20 80 00 40 80 00 00 40 00 40 40 00 00 0c 00     . ..@...@.@@....
      b4:	00 08 00 00 0a 00 00 08 00 00 09 00 00 08 00 00     ................
      c4:	08 00 80 08 00 00 08 00 20 08 00 00 88 00 00 08     ........ .......
      d4:	00 00 48 00 00 08 00 00 0c 00 00 04 00 00 0a 00     ..H.............
      e4:	00 02 00 00 09 00 00 01 00 00 08 00 80 00 00 80     ................
      f4:	08 00 20 00 00 20 88 00 00 80 00 00 48 00 00 40     .. .. ......H..@
     104:	00 00 14 00 00 10 00 00 12 00 00 10 00 00 11 00     ................
     114:	00 10 00 00 10 00 80 10 00 00 10 00 20 10 00 00     ............ ...
     124:	90 00 00 10 00 00 50 00 00 10 00 00 14 00 00 04     ......P.........
     134:	00 00 12 00 00 02 00 00 11 00 00 01 00 00 10 00     ................
     144:	80 00 00 80 10 00 20 00 00 20 90 00 00 80 00 00     ...... .. ......
     154:	50 00 00 40 00 00 24 00 00 20 00 00 22 00 00 20     P..@..$.. ..".. 
     164:	00 00 21 00 00 20 00 00 20 00 80 20 00 00 20 00     ..!.. .. .. .. .
     174:	20 20 00 00 a0 00 00 20 00 00 60 00 00 20 00 00       ..... ..`.. ..
     184:	24 00 00 04 00 00 22 00 00 02 00 00 21 00 00 01     $.....".....!...
     194:	00 00 20 00 80 00 00 80 20 00 20 00 00 20 a0 00     .. ..... . .. ..
     1a4:	00 80 00 00 60 00 00 40 00 00 04 01 00 00 01 00     ....`..@........
     1b4:	02 01 00 00 01 00 01 01 00 00 01 00 00 01 80 00     ................
     1c4:	01 00 00 01 20 00 01 00 80 01 00 00 01 00 40 01     .... .........@.
     1d4:	00 00 01 00 04 01 00 04 00 00 02 01 00 02 00 00     ................
     1e4:	01 01 00 01 00 00 00 01 80 00 00 80 00 01 20 00     .............. .
     1f4:	00 20 80 01 00 80 00 00 40 01 00 40 00 00 04 08     . ......@..@....
     204:	00 00 08 00 02 08 00 00 08 00 01 08 00 00 08 00     ................
     214:	00 08 80 00 08 00 00 08 20 00 08 00 80 08 00 00     ........ .......
     224:	08 00 40 08 00 00 08 00 04 08 00 04 00 00 02 08     ..@.............
     234:	00 02 00 00 01 08 00 01 00 00 00 08 80 00 00 80     ................
     244:	00 08 20 00 00 20 80 08 00 80 00 00 40 08 00 40     .. .. ......@..@
     254:	00 00 04 02 00 00 02 00 02 02 00 00 02 00 01 02     ................
     264:	00 00 02 00 00 02 80 00 02 00 00 02 20 00 02 00     ............ ...
     274:	80 02 00 00 02 00 40 02 00 00 02 00 04 02 00 04     ......@.........
     284:	00 00 02 02 00 02 00 00 01 02 00 01 00 00 00 02     ................
     294:	80 00 00 80 00 02 20 00 00 20 80 02 00 80 00 00     ...... .. ......
     2a4:	40 02 00 40 00 00 44 00 00 40 00 00 42 00 00 40     @..@..D..@..B..@
     2b4:	00 00 41 00 00 40 00 00 40 00 80 40 00 00 40 00     ..A..@..@..@..@.
     2c4:	20 40 00 00 c0 00 00 40 00 00 00 0a 00 00 08 00      @.....@........
     2d4:	44 00 00 04 00 00 42 00 00 02 00 00 41 00 00 01     D.....B.....A...
     2e4:	00 00 40 00 80 00 00 80 40 00 20 00 00 20 c0 00     ..@.....@. .. ..
     2f4:	00 80 00 00 00 0a 00 00 02 00 84 00 00 80 00 00     ................
     304:	82 00 00 80 00 00 81 00 00 80 00 00 80 00 80 80     ................
     314:	00 00 80 00 20 80 00 00 00 09 00 80 01 00 00 03     .... ...........
     324:	00 00 01 00 84 00 00 04 00 00 82 00 00 02 00 00     ................
     334:	81 00 00 01 00 00 80 00 80 00 00 80 80 00 20 00     .............. .
     344:	00 20 00 09 00 00 08 00 00 03 00 00 02 00 04 00     . ..............
     354:	20 00 00 20 02 00 20 00 00 20 01 00 20 00 00 20      .. .. .. .. .. 
     364:	00 00 a0 00 00 20 20 01 00 20 00 00 20 08 00 20     .....  .. .. .. 
     374:	00 00 20 02 00 20 00 00 04 00 20 04 00 00 02 00     .. .. .... .....
     384:	20 02 00 00 01 00 20 01 00 00 00 00 a0 00 00 80      ..... .........
     394:	20 01 00 00 01 00 20 08 00 00 08 00 20 02 00 00      ..... ..... ...
     3a4:	02 00 04 00 80 00 00 80 02 00 80 00 00 80 01 00     ................
     3b4:	80 00 00 80 30 00 00 10 00 00 10 01 00 10 00 00     ....0...........
     3c4:	10 08 00 10 00 00 10 02 00 10 00 00 04 00 80 04     ................
     3d4:	00 00 02 00 80 02 00 00 01 00 80 01 00 00 30 00     ..............0.
     3e4:	00 20 00 00 10 01 00 00 01 00 10 08 00 00 08 00     . ..............
     3f4:	10 02 00 00 02 00 05 00 00 01 00 00 03 00 00 01     ................
     404:	00 00 18 00 00 08 00 00 28 00 00 08 00 00 08 01     ........(.......
     414:	00 08 00 00 08 08 00 08 00 00 08 02 00 08 00 00     ................
     424:	05 00 00 04 00 00 03 00 00 02 00 00 18 00 00 10     ................
     434:	00 00 28 00 00 20 00 00 08 01 00 00 01 00 08 08     ..(.. ..........
     444:	00 00 08 00 08 02 00 00 02 00 06 00 00 02 00 00     ................
     454:	08 00 40 00 00 40 10 00 40 00 00 40 20 00 40 00     ..@..@..@..@ .@.
     464:	00 40 00 01 40 00 00 40 00 08 40 00 00 40 00 02     .@..@..@..@..@..
     474:	40 00 00 40 06 00 00 04 00 00 08 00 40 08 00 00     @..@........@...
     484:	10 00 40 10 00 00 20 00 40 20 00 00 00 01 40 00     ..@... .@ ....@.
     494:	01 00 00 08 40 00 08 00 00 02 40 00 02 00 00 04     ....@.....@.....
     4a4:	40 00 04 00 08 04 00 00 04 00 10 04 00 00 04 00     @...............
     4b4:	20 04 00 00 04 00 00 05 00 00 04 00 00 0c 00 00      ...............
     4c4:	04 00 00 06 00 00 04 00 00 04 40 00 00 40 08 04     ..........@..@..
     4d4:	00 08 00 00 10 04 00 10 00 00 20 04 00 20 00 00     .......... .. ..
     4e4:	00 05 00 00 01 00 00 0c 00 00 08 00 00 06 00 00     ................
     4f4:	02 00                                               ..

000004f6 <Font5x7>:
     4f6:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     506:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     516:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     526:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     536:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     546:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     556:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     566:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     576:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     586:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     596:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     5a6:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     5b6:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     5c6:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     5d6:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     5e6:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     5f6:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     606:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     616:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     626:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     636:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     646:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     656:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     666:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     676:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     686:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     696:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     6a6:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     6b6:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     6c6:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

000006d6 <__ctors_end>:
     6d6:	11 24       	eor	r1, r1
     6d8:	1f be       	out	0x3f, r1	; 63
     6da:	cf ef       	ldi	r28, 0xFF	; 255
     6dc:	d4 e0       	ldi	r29, 0x04	; 4
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	cd bf       	out	0x3d, r28	; 61

000006e2 <__do_copy_data>:
     6e2:	13 e0       	ldi	r17, 0x03	; 3
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	b1 e0       	ldi	r27, 0x01	; 1
     6e8:	ea e2       	ldi	r30, 0x2A	; 42
     6ea:	f9 e1       	ldi	r31, 0x19	; 25
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <__do_copy_data+0x10>
     6ee:	05 90       	lpm	r0, Z+
     6f0:	0d 92       	st	X+, r0
     6f2:	a4 3e       	cpi	r26, 0xE4	; 228
     6f4:	b1 07       	cpc	r27, r17
     6f6:	d9 f7       	brne	.-10     	; 0x6ee <__do_copy_data+0xc>

000006f8 <__do_clear_bss>:
     6f8:	14 e0       	ldi	r17, 0x04	; 4
     6fa:	a4 ee       	ldi	r26, 0xE4	; 228
     6fc:	b3 e0       	ldi	r27, 0x03	; 3
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <.do_clear_bss_start>

00000700 <.do_clear_bss_loop>:
     700:	1d 92       	st	X+, r1

00000702 <.do_clear_bss_start>:
     702:	a9 34       	cpi	r26, 0x49	; 73
     704:	b1 07       	cpc	r27, r17
     706:	e1 f7       	brne	.-8      	; 0x700 <.do_clear_bss_loop>
     708:	a2 d5       	rcall	.+2884   	; 0x124e <main>
     70a:	0d c9       	rjmp	.-3558   	; 0xfffff926 <__eeprom_end+0xff7ef926>

0000070c <__bad_interrupt>:
     70c:	79 cc       	rjmp	.-1806   	; 0x0 <__vectors>

0000070e <__vector_18>:
//#define BAUD_PRESCALE ((F_CPU / (16 * USART_BAUDRATE)) - 1)
//#define BAUD_PRESCALE 51

volatile char receivedBuffer;

ISR(USART_RX_vect){
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	8f 93       	push	r24
    receivedBuffer = UDR0;
     71a:	80 91 c6 00 	lds	r24, 0x00C6
     71e:	80 93 f0 03 	sts	0x03F0, r24
    WATCHDOG_RESET
     722:	10 92 ee 03 	sts	0x03EE, r1
     726:	10 92 ed 03 	sts	0x03ED, r1
}
     72a:	8f 91       	pop	r24
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <USART_Init>:

void USART_Init(void){
   // Set baud rate
   UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits into the high byte of the UBRR register
     736:	10 92 c5 00 	sts	0x00C5, r1
   UBRR0L = BAUD_PRESCALE; // Load lower 8-bits into the low byte of the UBRR register
     73a:	83 e3       	ldi	r24, 0x33	; 51
     73c:	80 93 c4 00 	sts	0x00C4, r24
   UCSR0B = (0 << UCSZ02);
    UCSR0C = 6;//((1 << UCSZ01) | (1 << UCSZ00));
*/

    // Configure port
    DDRD = 0;
     740:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0;
     742:	1b b8       	out	0x0b, r1	; 11
    DDRD = 2;
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	8a b9       	out	0x0a, r24	; 10

    // Enable receiver and transmitter and receive complete interrupt 
    UCSR0B = ((1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0));
     748:	88 e9       	ldi	r24, 0x98	; 152
     74a:	80 93 c1 00 	sts	0x00C1, r24
}
     74e:	08 95       	ret

00000750 <USART_SendByte>:


void USART_SendByte(uint8_t u8Data){

    // Wait until last byte has been transmitted
    while((UCSR0A &(1<<UDRE0)) == 0);
     750:	90 91 c0 00 	lds	r25, 0x00C0
     754:	95 ff       	sbrs	r25, 5
     756:	fc cf       	rjmp	.-8      	; 0x750 <USART_SendByte>

    // Transmit data
    UDR0 = u8Data;
     758:	80 93 c6 00 	sts	0x00C6, r24
}
     75c:	08 95       	ret

0000075e <USART_SendString>:

void USART_SendString(uint8_t * str){
    while(*str) {
     75e:	07 c0       	rjmp	.+14     	; 0x76e <USART_SendString+0x10>


void USART_SendByte(uint8_t u8Data){

    // Wait until last byte has been transmitted
    while((UCSR0A &(1<<UDRE0)) == 0);
     760:	30 91 c0 00 	lds	r19, 0x00C0
     764:	35 ff       	sbrs	r19, 5
     766:	fc cf       	rjmp	.-8      	; 0x760 <USART_SendString+0x2>
    UDR0 = u8Data;
}

void USART_SendString(uint8_t * str){
    while(*str) {
        USART_SendByte(*str++);
     768:	01 96       	adiw	r24, 0x01	; 1

    // Wait until last byte has been transmitted
    while((UCSR0A &(1<<UDRE0)) == 0);

    // Transmit data
    UDR0 = u8Data;
     76a:	20 93 c6 00 	sts	0x00C6, r18
}

void USART_SendString(uint8_t * str){
    while(*str) {
     76e:	fc 01       	movw	r30, r24
     770:	20 81       	ld	r18, Z
     772:	22 23       	and	r18, r18
     774:	a9 f7       	brne	.-22     	; 0x760 <USART_SendString+0x2>
        USART_SendByte(*str++);
    }
}
     776:	08 95       	ret

00000778 <USART_ReceiveByte>:

uint8_t USART_ReceiveByte(){
    while((UCSR0A &(1<<RXC0)) == 0);
     778:	80 91 c0 00 	lds	r24, 0x00C0
     77c:	87 ff       	sbrs	r24, 7
     77e:	fc cf       	rjmp	.-8      	; 0x778 <USART_ReceiveByte>
    return UDR0;
     780:	80 91 c6 00 	lds	r24, 0x00C6
}
     784:	08 95       	ret

00000786 <__vector_16>:
#endif



ISR(TIMER0_OVF_vect)
{
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	4f 92       	push	r4
     792:	5f 92       	push	r5
     794:	6f 92       	push	r6
     796:	7f 92       	push	r7
     798:	8f 92       	push	r8
     79a:	9f 92       	push	r9
     79c:	af 92       	push	r10
     79e:	bf 92       	push	r11
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	2f 93       	push	r18
     7ae:	3f 93       	push	r19
     7b0:	4f 93       	push	r20
     7b2:	5f 93       	push	r21
     7b4:	6f 93       	push	r22
     7b6:	7f 93       	push	r23
     7b8:	8f 93       	push	r24
     7ba:	9f 93       	push	r25
     7bc:	af 93       	push	r26
     7be:	bf 93       	push	r27
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ef 93       	push	r30
     7c6:	ff 93       	push	r31
    writeLine(message, index);
     7c8:	80 91 e5 03 	lds	r24, 0x03E5
     7cc:	90 91 e6 03 	lds	r25, 0x03E6
    char i = 0;
    unsigned char b = 0;

    unsigned int offset_abs = abs(offset);

    if (offset < 0) {
     7d0:	97 fd       	sbrc	r25, 7
     7d2:	05 c0       	rjmp	.+10     	; 0x7de <__vector_16+0x58>
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	12 c0       	rjmp	.+36     	; 0x802 <__vector_16+0x7c>
    int start = 0;
    char ii = 0;
    char i = 0;
    unsigned char b = 0;

    unsigned int offset_abs = abs(offset);
     7de:	ee 27       	eor	r30, r30
     7e0:	ff 27       	eor	r31, r31
     7e2:	e8 1b       	sub	r30, r24
     7e4:	f9 0b       	sbc	r31, r25

    if (offset < 0) {
        start_2 = offset_abs % 5;
     7e6:	cf 01       	movw	r24, r30
     7e8:	65 e0       	ldi	r22, 0x05	; 5
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	83 d5       	rcall	.+2822   	; 0x12f4 <__udivmodhi4>
     7ee:	9c 01       	movw	r18, r24
        x = 0;
        start = offset_abs / 5;
     7f0:	cf 01       	movw	r24, r30
     7f2:	65 e0       	ldi	r22, 0x05	; 5
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	7e d5       	rcall	.+2812   	; 0x12f4 <__udivmodhi4>
     7f8:	86 2f       	mov	r24, r22
     7fa:	97 2f       	mov	r25, r23
     7fc:	ac 01       	movw	r20, r24
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
    //unsigned char space = 0;//offset_abs % 6;
    //if (space == 5)
    //    x++;
    

    for (col = start; x < MATRIX_COL_COUNT; col++) {
     802:	14 2f       	mov	r17, r20

            start_2 = 0;
        }
        
        // Ecart entre les lettres
        x = x + ii + char_spacing;
     804:	a0 90 e4 03 	lds	r10, 0x03E4
     808:	bb 24       	eor	r11, r11
}
#endif



ISR(TIMER0_OVF_vect)
     80a:	4a e2       	ldi	r20, 0x2A	; 42
     80c:	c4 2e       	mov	r12, r20
     80e:	d1 2c       	mov	r13, r1
     810:	9e c0       	rjmp	.+316    	; 0x94e <__vector_16+0x1c8>
    

    for (col = start; x < MATRIX_COL_COUNT; col++) {

        // strlen(str)
        tmp = (col < message_size) ? str[col] : ' ';
     812:	60 91 e7 03 	lds	r22, 0x03E7
     816:	70 91 e8 03 	lds	r23, 0x03E8
     81a:	41 2f       	mov	r20, r17
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	46 17       	cp	r20, r22
     820:	57 07       	cpc	r21, r23
     822:	14 f0       	brlt	.+4      	; 0x828 <__vector_16+0xa2>
     824:	40 e2       	ldi	r20, 0x20	; 32
     826:	04 c0       	rjmp	.+8      	; 0x830 <__vector_16+0xaa>
     828:	4f 50       	subi	r20, 0x0F	; 15
     82a:	5c 4f       	sbci	r21, 0xFC	; 252
     82c:	fa 01       	movw	r30, r20
     82e:	40 81       	ld	r20, Z

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
            for (b = 0; b < 7; b++) {
                if (pgm_read_byte(Font5x7 + (tmp - 0x20) * 5 + i) & (1 << b)) {
     830:	f5 e0       	ldi	r31, 0x05	; 5
     832:	4f 9f       	mul	r20, r31
     834:	e0 01       	movw	r28, r0
     836:	11 24       	eor	r1, r1
     838:	c0 5a       	subi	r28, 0xA0	; 160
     83a:	d0 40       	sbci	r29, 0x00	; 0
}
#endif



ISR(TIMER0_OVF_vect)
     83c:	8c 9d       	mul	r24, r12
     83e:	a0 01       	movw	r20, r0
     840:	8d 9d       	mul	r24, r13
     842:	50 0d       	add	r21, r0
     844:	9c 9d       	mul	r25, r12
     846:	50 0d       	add	r21, r0
     848:	11 24       	eor	r1, r1
     84a:	4c 5c       	subi	r20, 0xCC	; 204
     84c:	5f 4f       	sbci	r21, 0xFF	; 255
     84e:	f9 01       	movw	r30, r18
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	60 c0       	rjmp	.+192    	; 0x916 <__vector_16+0x190>
        // strlen(str)
        tmp = (col < message_size) ? str[col] : ' ';

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
            for (b = 0; b < 7; b++) {
                if (pgm_read_byte(Font5x7 + (tmp - 0x20) * 5 + i) & (1 << b)) {
     856:	37 01       	movw	r6, r14
     858:	0a 2e       	mov	r0, r26
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__vector_16+0xda>
     85c:	75 94       	asr	r7
     85e:	67 94       	ror	r6
     860:	0a 94       	dec	r0
     862:	e2 f7       	brpl	.-8      	; 0x85c <__vector_16+0xd6>
     864:	60 fe       	sbrs	r6, 0
     866:	3e c0       	rjmp	.+124    	; 0x8e4 <__vector_16+0x15e>

#include "LedMatrix.h"

inline void setLed(unsigned int x, unsigned int y) {

    if (x >= MATRIX_COL_COUNT || y >= MATRIX_LINE_COUNT) {
     868:	0d e1       	ldi	r16, 0x1D	; 29
     86a:	80 16       	cp	r8, r16
     86c:	91 04       	cpc	r9, r1
     86e:	08 f0       	brcs	.+2      	; 0x872 <__vector_16+0xec>
     870:	36 c0       	rjmp	.+108    	; 0x8de <__vector_16+0x158>
        return;
    }

    // Reset all ports
    DDRB = DDRC = DDRD = 0;
     872:	1a b8       	out	0x0a, r1	; 10
     874:	0a b1       	in	r16, 0x0a	; 10
     876:	07 b9       	out	0x07, r16	; 7
     878:	07 b1       	in	r16, 0x07	; 7
     87a:	04 b9       	out	0x04, r16	; 4
    PORTB = PORTC = PORTD = 0;
     87c:	1b b8       	out	0x0b, r1	; 11
     87e:	0b b1       	in	r16, 0x0b	; 11
     880:	08 b9       	out	0x08, r16	; 8
     882:	08 b1       	in	r16, 0x08	; 8
     884:	05 b9       	out	0x05, r16	; 5

    DDRB = pgm_read_byte(&(matrix[x][y][_DDRB]));
     886:	f2 01       	movw	r30, r4
     888:	04 91       	lpm	r16, Z+
     88a:	04 b9       	out	0x04, r16	; 4
    DDRC = pgm_read_byte(&(matrix[x][y][_DDRC]));
     88c:	32 01       	movw	r6, r4
     88e:	08 94       	sec
     890:	61 1c       	adc	r6, r1
     892:	71 1c       	adc	r7, r1
     894:	f3 01       	movw	r30, r6
     896:	04 91       	lpm	r16, Z+
     898:	07 b9       	out	0x07, r16	; 7
    //DDRD = pgm_read_byte(&(matrix[x][y][_DDRD]));

    DDRD = 0b11100000 & pgm_read_byte(&(matrix[x][y][_DDRD]));
     89a:	02 e0       	ldi	r16, 0x02	; 2
     89c:	60 2e       	mov	r6, r16
     89e:	71 2c       	mov	r7, r1
     8a0:	64 0c       	add	r6, r4
     8a2:	75 1c       	adc	r7, r5
     8a4:	f3 01       	movw	r30, r6
     8a6:	04 91       	lpm	r16, Z+
     8a8:	00 7e       	andi	r16, 0xE0	; 224
     8aa:	0a b9       	out	0x0a, r16	; 10

    PORTB = pgm_read_byte(&(matrix[x][y][_PORTB]));
     8ac:	f3 e0       	ldi	r31, 0x03	; 3
     8ae:	6f 2e       	mov	r6, r31
     8b0:	71 2c       	mov	r7, r1
     8b2:	64 0c       	add	r6, r4
     8b4:	75 1c       	adc	r7, r5
     8b6:	f3 01       	movw	r30, r6
     8b8:	04 91       	lpm	r16, Z+
     8ba:	05 b9       	out	0x05, r16	; 5
    PORTC = pgm_read_byte(&(matrix[x][y][_PORTC]));
     8bc:	e4 e0       	ldi	r30, 0x04	; 4
     8be:	6e 2e       	mov	r6, r30
     8c0:	71 2c       	mov	r7, r1
     8c2:	64 0c       	add	r6, r4
     8c4:	75 1c       	adc	r7, r5
     8c6:	f3 01       	movw	r30, r6
     8c8:	04 91       	lpm	r16, Z+
     8ca:	08 b9       	out	0x08, r16	; 8
    //PORTD = pgm_read_byte(&(matrix[x][y][_PORTD]));

    PORTD = 0b11100000 & pgm_read_byte(&(matrix[x][y][_PORTD]));
     8cc:	35 e0       	ldi	r19, 0x05	; 5
     8ce:	63 2e       	mov	r6, r19
     8d0:	71 2c       	mov	r7, r1
     8d2:	64 0c       	add	r6, r4
     8d4:	75 1c       	adc	r7, r5
     8d6:	f3 01       	movw	r30, r6
     8d8:	04 91       	lpm	r16, Z+
     8da:	00 7e       	andi	r16, 0xE0	; 224
     8dc:	0b b9       	out	0x0b, r16	; 11

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
            for (b = 0; b < 7; b++) {
                if (pgm_read_byte(Font5x7 + (tmp - 0x20) * 5 + i) & (1 << b)) {
                    setLed(x + ii, b);
                    asm("nop");
     8de:	00 00       	nop
                    asm("nop");
     8e0:	00 00       	nop
     8e2:	0a c0       	rjmp	.+20     	; 0x8f8 <__vector_16+0x172>
    PORTD = 0b11100000 & pgm_read_byte(&(matrix[x][y][_PORTD]));
}

inline void clearLeds() {
    // Reset all ports
    DDRB = DDRC = DDRD = 0;
     8e4:	1a b8       	out	0x0a, r1	; 10
     8e6:	0a b1       	in	r16, 0x0a	; 10
     8e8:	07 b9       	out	0x07, r16	; 7
     8ea:	07 b1       	in	r16, 0x07	; 7
     8ec:	04 b9       	out	0x04, r16	; 4
    PORTB = PORTC = PORTD = 0;
     8ee:	1b b8       	out	0x0b, r1	; 11
     8f0:	0b b1       	in	r16, 0x0b	; 11
     8f2:	08 b9       	out	0x08, r16	; 8
     8f4:	08 b1       	in	r16, 0x08	; 8
     8f6:	05 b9       	out	0x05, r16	; 5
     8f8:	11 96       	adiw	r26, 0x01	; 1
     8fa:	e6 e0       	ldi	r30, 0x06	; 6
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	4e 0e       	add	r4, r30
     900:	5f 1e       	adc	r5, r31

        // strlen(str)
        tmp = (col < message_size) ? str[col] : ' ';

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
            for (b = 0; b < 7; b++) {
     902:	a7 30       	cpi	r26, 0x07	; 7
     904:	b1 05       	cpc	r27, r1
     906:	09 f0       	breq	.+2      	; 0x90a <__vector_16+0x184>
     908:	a6 cf       	rjmp	.-180    	; 0x856 <__vector_16+0xd0>
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	46 5d       	subi	r20, 0xD6	; 214
     910:	5f 4f       	sbci	r21, 0xFF	; 255
     912:	e0 e0       	ldi	r30, 0x00	; 0
     914:	f0 e0       	ldi	r31, 0x00	; 0
}
#endif



ISR(TIMER0_OVF_vect)
     916:	b6 2f       	mov	r27, r22
     918:	b2 0f       	add	r27, r18
    for (col = start; x < MATRIX_COL_COUNT; col++) {

        // strlen(str)
        tmp = (col < message_size) ? str[col] : ' ';

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
     91a:	b5 30       	cpi	r27, 0x05	; 5
     91c:	88 f4       	brcc	.+34     	; 0x940 <__vector_16+0x1ba>
            for (b = 0; b < 7; b++) {
                if (pgm_read_byte(Font5x7 + (tmp - 0x20) * 5 + i) & (1 << b)) {
     91e:	7e 01       	movw	r14, r28
     920:	eb 0e       	add	r14, r27
     922:	f1 1c       	adc	r15, r1
     924:	e6 ef       	ldi	r30, 0xF6	; 246
     926:	f4 e0       	ldi	r31, 0x04	; 4
     928:	ee 0e       	add	r14, r30
     92a:	ff 1e       	adc	r15, r31
     92c:	2a 01       	movw	r4, r20
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	f7 01       	movw	r30, r14
     934:	e4 90       	lpm	r14, Z+
     936:	ff 24       	eor	r15, r15

#include "LedMatrix.h"

inline void setLed(unsigned int x, unsigned int y) {

    if (x >= MATRIX_COL_COUNT || y >= MATRIX_LINE_COUNT) {
     938:	4b 01       	movw	r8, r22
     93a:	88 0e       	add	r8, r24
     93c:	99 1e       	adc	r9, r25
     93e:	8b cf       	rjmp	.-234    	; 0x856 <__vector_16+0xd0>

            start_2 = 0;
        }
        
        // Ecart entre les lettres
        x = x + ii + char_spacing;
     940:	95 01       	movw	r18, r10
     942:	26 0f       	add	r18, r22
     944:	31 1d       	adc	r19, r1
     946:	82 0f       	add	r24, r18
     948:	93 1f       	adc	r25, r19
    //unsigned char space = 0;//offset_abs % 6;
    //if (space == 5)
    //    x++;
    

    for (col = start; x < MATRIX_COL_COUNT; col++) {
     94a:	1f 5f       	subi	r17, 0xFF	; 255
     94c:	9f 01       	movw	r18, r30
     94e:	8d 31       	cpi	r24, 0x1D	; 29
     950:	91 05       	cpc	r25, r1
     952:	0c f4       	brge	.+2      	; 0x956 <__vector_16+0x1d0>
     954:	5e cf       	rjmp	.-324    	; 0x812 <__vector_16+0x8c>
    PORTD = 0b11100000 & pgm_read_byte(&(matrix[x][y][_PORTD]));
}

inline void clearLeds() {
    // Reset all ports
    DDRB = DDRC = DDRD = 0;
     956:	1a b8       	out	0x0a, r1	; 10
     958:	8a b1       	in	r24, 0x0a	; 10
     95a:	87 b9       	out	0x07, r24	; 7
     95c:	87 b1       	in	r24, 0x07	; 7
     95e:	84 b9       	out	0x04, r24	; 4
    PORTB = PORTC = PORTD = 0;
     960:	1b b8       	out	0x0b, r1	; 11
     962:	8b b1       	in	r24, 0x0b	; 11
     964:	88 b9       	out	0x08, r24	; 8
     966:	88 b1       	in	r24, 0x08	; 8
     968:	85 b9       	out	0x05, r24	; 5


ISR(TIMER0_OVF_vect)
{
    writeLine(message, index);
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	7f 90       	pop	r7
     99c:	6f 90       	pop	r6
     99e:	5f 90       	pop	r5
     9a0:	4f 90       	pop	r4
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	0f 90       	pop	r0
     9a8:	1f 90       	pop	r1
     9aa:	18 95       	reti

000009ac <__vector_21>:
        WATCHDOG_RESET
    }
}

ISR(ADC_vect)
{
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	8f 93       	push	r24
    adc_value = ADCH;
     9b8:	80 91 79 00 	lds	r24, 0x0079
     9bc:	80 93 42 04 	sts	0x0442, r24
}
     9c0:	8f 91       	pop	r24
     9c2:	0f 90       	pop	r0
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	0f 90       	pop	r0
     9c8:	1f 90       	pop	r1
     9ca:	18 95       	reti

000009cc <saveMessage>:
    }

    eeprom_read_block((void*)&message, (const void*)addr + 1, sizeof(message) - 1);
}

void saveMessage(unsigned char num) {
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
    unsigned int addr = 0;

    if (num > INTERNAL_MESSAGE_COUNT) {
     9d0:	85 30       	cpi	r24, 0x05	; 5
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <saveMessage+0xa>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
        num = 0;
    }

    addr = EEPROM_CONFIG_ADDR_MESSAGE + (num * sizeof(message));
     9d6:	91 e5       	ldi	r25, 0x51	; 81
     9d8:	89 9f       	mul	r24, r25
     9da:	e0 01       	movw	r28, r0
     9dc:	11 24       	eor	r1, r1

    eeprom_update_byte((const void*)addr, EEPROM_MAGIC_CHAR);
     9de:	ce 01       	movw	r24, r28
     9e0:	0a 96       	adiw	r24, 0x0a	; 10
     9e2:	6a ea       	ldi	r22, 0xAA	; 170
     9e4:	a0 d6       	rcall	.+3392   	; 0x1726 <__eeupd_byte_m88pa>
    eeprom_write_block((void*)&message, (const void*)addr + 1, sizeof(message) - 1);
     9e6:	be 01       	movw	r22, r28
     9e8:	65 5f       	subi	r22, 0xF5	; 245
     9ea:	7f 4f       	sbci	r23, 0xFF	; 255
     9ec:	81 ef       	ldi	r24, 0xF1	; 241
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	40 e5       	ldi	r20, 0x50	; 80
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	aa d6       	rcall	.+3412   	; 0x174a <__eewr_block_m88pa>
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <loadMessage>:
    }

    eeprom_read_block((void*)&message, (const void*)addr + 1, sizeof(message) - 1);
}

void loadMessage(unsigned char num) {
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
    unsigned int addr = 0;
    unsigned char magic = 0;

    if (num > INTERNAL_MESSAGE_COUNT) {
     a08:	85 30       	cpi	r24, 0x05	; 5
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <loadMessage+0x12>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
        num = 0;
    }

    addr = EEPROM_CONFIG_ADDR_MESSAGE + (num * sizeof(message));
     a0e:	01 e5       	ldi	r16, 0x51	; 81
     a10:	80 9f       	mul	r24, r16
     a12:	80 01       	movw	r16, r0
     a14:	11 24       	eor	r1, r1
     a16:	e8 01       	movw	r28, r16
     a18:	2a 96       	adiw	r28, 0x0a	; 10

    // Read magic character
    magic = eeprom_read_byte((const void*)addr);
     a1a:	ce 01       	movw	r24, r28
     a1c:	7c d6       	rcall	.+3320   	; 0x1716 <__eerd_byte_m88pa>
    if (magic != EEPROM_MAGIC_CHAR) {
     a1e:	8a 3a       	cpi	r24, 0xAA	; 170
     a20:	39 f0       	breq	.+14     	; 0xa30 <loadMessage+0x34>
        eeprom_update_byte((const void*)addr, EEPROM_MAGIC_CHAR);
     a22:	ce 01       	movw	r24, r28
     a24:	6a ea       	ldi	r22, 0xAA	; 170
     a26:	7f d6       	rcall	.+3326   	; 0x1726 <__eeupd_byte_m88pa>
        eeprom_update_byte((const void*)addr + 1, 0);
     a28:	c8 01       	movw	r24, r16
     a2a:	0b 96       	adiw	r24, 0x0b	; 11
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	7b d6       	rcall	.+3318   	; 0x1726 <__eeupd_byte_m88pa>
    }

    eeprom_read_block((void*)&message, (const void*)addr + 1, sizeof(message) - 1);
     a30:	be 01       	movw	r22, r28
     a32:	6f 5f       	subi	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	81 ef       	ldi	r24, 0xF1	; 241
     a38:	93 e0       	ldi	r25, 0x03	; 3
     a3a:	40 e5       	ldi	r20, 0x50	; 80
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	5b d6       	rcall	.+3254   	; 0x16f6 <__eerd_block_m88pa>
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	08 95       	ret

00000a4e <loadData>:
void loadData() {
    int i = 0;

#if INTERACTIVE_MODE
    // Load data
    loadMessage(current_message);
     a4e:	80 91 ec 03 	lds	r24, 0x03EC
     a52:	d4 df       	rcall	.-88     	; 0x9fc <loadMessage>
    if (!found) {
        memset(message, 0, sizeof(message));
    }
#endif

    message_size = strlen(message);
     a54:	e1 ef       	ldi	r30, 0xF1	; 241
     a56:	f3 e0       	ldi	r31, 0x03	; 3
     a58:	01 90       	ld	r0, Z+
     a5a:	00 20       	and	r0, r0
     a5c:	e9 f7       	brne	.-6      	; 0xa58 <loadData+0xa>
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	e1 5f       	subi	r30, 0xF1	; 241
     a62:	f3 40       	sbci	r31, 0x03	; 3
     a64:	f0 93 e8 03 	sts	0x03E8, r31
     a68:	e0 93 e7 03 	sts	0x03E7, r30
            eeprom_update_byte(load_table[i + 1], load_table[i]);
        }
    }
*/

    scroll_speed = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_SPEED);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	52 d6       	rcall	.+3236   	; 0x1716 <__eerd_byte_m88pa>
     a72:	80 93 a2 03 	sts	0x03A2, r24
    if (scroll_speed >= 9) {
     a76:	89 30       	cpi	r24, 0x09	; 9
     a78:	38 f0       	brcs	.+14     	; 0xa88 <loadData+0x3a>
        scroll_speed = 9;
     a7a:	89 e0       	ldi	r24, 0x09	; 9
     a7c:	80 93 a2 03 	sts	0x03A2, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_SPEED, scroll_speed);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	69 e0       	ldi	r22, 0x09	; 9
     a86:	4f d6       	rcall	.+3230   	; 0x1726 <__eeupd_byte_m88pa>
    }

    scroll_direction = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_DIRECTION);
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	44 d6       	rcall	.+3208   	; 0x1716 <__eerd_byte_m88pa>
     a8e:	80 93 a3 03 	sts	0x03A3, r24
    if (scroll_direction >= 9) {
     a92:	89 30       	cpi	r24, 0x09	; 9
     a94:	38 f0       	brcs	.+14     	; 0xaa4 <loadData+0x56>
        scroll_direction = 9;
     a96:	89 e0       	ldi	r24, 0x09	; 9
     a98:	80 93 a3 03 	sts	0x03A3, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_DIRECTION, scroll_direction);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	69 e0       	ldi	r22, 0x09	; 9
     aa2:	41 d6       	rcall	.+3202   	; 0x1726 <__eeupd_byte_m88pa>
    }

    char_spacing = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_SPACING);
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	36 d6       	rcall	.+3180   	; 0x1716 <__eerd_byte_m88pa>
     aaa:	80 93 e4 03 	sts	0x03E4, r24
    if (char_spacing >= 9) {
     aae:	89 30       	cpi	r24, 0x09	; 9
     ab0:	38 f0       	brcs	.+14     	; 0xac0 <loadData+0x72>
        char_spacing = 9;
     ab2:	89 e0       	ldi	r24, 0x09	; 9
     ab4:	80 93 e4 03 	sts	0x03E4, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_SPACING, char_spacing);
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	69 e0       	ldi	r22, 0x09	; 9
     abe:	33 d6       	rcall	.+3174   	; 0x1726 <__eeupd_byte_m88pa>
    }

    intensity = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_INTENSITY);
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	28 d6       	rcall	.+3152   	; 0x1716 <__eerd_byte_m88pa>
     ac6:	80 93 ea 03 	sts	0x03EA, r24
    if (intensity >= 9) {
     aca:	89 30       	cpi	r24, 0x09	; 9
     acc:	38 f0       	brcs	.+14     	; 0xadc <loadData+0x8e>
        intensity = 9;
     ace:	89 e0       	ldi	r24, 0x09	; 9
     ad0:	80 93 ea 03 	sts	0x03EA, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_INTENSITY, intensity);
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	69 e0       	ldi	r22, 0x09	; 9
     ada:	25 d6       	rcall	.+3146   	; 0x1726 <__eeupd_byte_m88pa>
    }

    watchdog_value = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_WATCHDOG);
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	1a d6       	rcall	.+3124   	; 0x1716 <__eerd_byte_m88pa>
     ae2:	80 93 ef 03 	sts	0x03EF, r24
    if (watchdog_value >= 9) {
     ae6:	89 30       	cpi	r24, 0x09	; 9
     ae8:	38 f0       	brcs	.+14     	; 0xaf8 <loadData+0xaa>
        watchdog_value = 9;
     aea:	89 e0       	ldi	r24, 0x09	; 9
     aec:	80 93 ef 03 	sts	0x03EF, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_WATCHDOG, watchdog_value);
     af0:	84 e0       	ldi	r24, 0x04	; 4
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	69 e0       	ldi	r22, 0x09	; 9
     af6:	17 d6       	rcall	.+3118   	; 0x1726 <__eeupd_byte_m88pa>
     af8:	08 95       	ret

00000afa <loadNextMessage>:
{
    adc_value = ADCH;
}

#if INTERACTIVE_MODE
inline void loadNextMessage() {
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
        current_message++;
        if (current_message >= INTERNAL_MESSAGE_COUNT) {
            current_message = 0;
        }

        addr = EEPROM_CONFIG_ADDR_MESSAGE + (current_message * sizeof(message));
     b00:	11 e5       	ldi	r17, 0x51	; 81
    unsigned int addr = 0;
    unsigned char magic = 0;
    unsigned int i = 0;

    while (1) {
        current_message++;
     b02:	80 91 ec 03 	lds	r24, 0x03EC
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	80 93 ec 03 	sts	0x03EC, r24
        if (current_message >= INTERNAL_MESSAGE_COUNT) {
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	10 f0       	brcs	.+4      	; 0xb14 <loadNextMessage+0x1a>
            current_message = 0;
     b10:	10 92 ec 03 	sts	0x03EC, r1
        }

        addr = EEPROM_CONFIG_ADDR_MESSAGE + (current_message * sizeof(message));
     b14:	80 91 ec 03 	lds	r24, 0x03EC
     b18:	81 9f       	mul	r24, r17
     b1a:	e0 01       	movw	r28, r0
     b1c:	11 24       	eor	r1, r1

        // Read magic character
        magic = eeprom_read_byte((const void*)addr);
     b1e:	ce 01       	movw	r24, r28
     b20:	0a 96       	adiw	r24, 0x0a	; 10
     b22:	f9 d5       	rcall	.+3058   	; 0x1716 <__eerd_byte_m88pa>
        if (magic == EEPROM_MAGIC_CHAR) {
     b24:	8a 3a       	cpi	r24, 0xAA	; 170
     b26:	69 f7       	brne	.-38     	; 0xb02 <loadNextMessage+0x8>
            break;
        }
    }

    eeprom_read_block((void*)&message, (const void*)addr + 1, sizeof(message) - 1);
     b28:	be 01       	movw	r22, r28
     b2a:	65 5f       	subi	r22, 0xF5	; 245
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	81 ef       	ldi	r24, 0xF1	; 241
     b30:	93 e0       	ldi	r25, 0x03	; 3
     b32:	40 e5       	ldi	r20, 0x50	; 80
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	df d5       	rcall	.+3006   	; 0x16f6 <__eerd_block_m88pa>
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	08 95       	ret

00000b40 <__vector_13>:
{
    writeLine(message, index);
}

ISR(TIMER1_OVF_vect)
{
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	2a 97       	sbiw	r28, 0x0a	; 10
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	cd bf       	out	0x3d, r28	; 61
    int size = message_size;
     b70:	20 91 e7 03 	lds	r18, 0x03E7
     b74:	30 91 e8 03 	lds	r19, 0x03E8

    // Always scroll
#if INTERACTIVE_MODE || !SYNCHRONIZE
    const unsigned char tab[] = { 5, 5, 4, 4, 3, 3, 3, 3, 2, 2 };
     b78:	de 01       	movw	r26, r28
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	ea ed       	ldi	r30, 0xDA	; 218
     b7e:	f3 e0       	ldi	r31, 0x03	; 3
     b80:	8a e0       	ldi	r24, 0x0A	; 10
     b82:	01 90       	ld	r0, Z+
     b84:	0d 92       	st	X+, r0
     b86:	81 50       	subi	r24, 0x01	; 1
     b88:	e1 f7       	brne	.-8      	; 0xb82 <__vector_13+0x42>
    // Scroll auto if str greater than value or if auto chain = true
    if (size > tab[char_spacing] || auto_chain_message) {
     b8a:	80 91 e4 03 	lds	r24, 0x03E4
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	fe 01       	movw	r30, r28
     b92:	e8 0f       	add	r30, r24
     b94:	f9 1f       	adc	r31, r25
     b96:	41 81       	ldd	r20, Z+1	; 0x01
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	42 17       	cp	r20, r18
     b9c:	53 07       	cpc	r21, r19
     b9e:	24 f0       	brlt	.+8      	; 0xba8 <__vector_13+0x68>
     ba0:	40 91 eb 03 	lds	r20, 0x03EB
     ba4:	44 23       	and	r20, r20
     ba6:	e9 f1       	breq	.+122    	; 0xc22 <__vector_13+0xe2>
#endif
        size *= (5 + char_spacing);
     ba8:	ac 01       	movw	r20, r24
     baa:	4b 5f       	subi	r20, 0xFB	; 251
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	42 9f       	mul	r20, r18
     bb0:	c0 01       	movw	r24, r0
     bb2:	43 9f       	mul	r20, r19
     bb4:	90 0d       	add	r25, r0
     bb6:	52 9f       	mul	r21, r18
     bb8:	90 0d       	add	r25, r0
     bba:	11 24       	eor	r1, r1
        if (scroll_direction) {
     bbc:	40 91 a3 03 	lds	r20, 0x03A3
     bc0:	20 91 e5 03 	lds	r18, 0x03E5
     bc4:	30 91 e6 03 	lds	r19, 0x03E6
     bc8:	44 23       	and	r20, r20
     bca:	a1 f0       	breq	.+40     	; 0xbf4 <__vector_13+0xb4>
            index = index - STEP;
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	30 40       	sbci	r19, 0x00	; 0
     bd0:	30 93 e6 03 	sts	0x03E6, r19
     bd4:	20 93 e5 03 	sts	0x03E5, r18
            if (index < -size) {
     bd8:	44 27       	eor	r20, r20
     bda:	55 27       	eor	r21, r21
     bdc:	48 1b       	sub	r20, r24
     bde:	59 0b       	sbc	r21, r25
     be0:	24 17       	cp	r18, r20
     be2:	35 07       	cpc	r19, r21
     be4:	14 f5       	brge	.+68     	; 0xc2a <__vector_13+0xea>
                index = MATRIX_COL_COUNT;
     be6:	8d e1       	ldi	r24, 0x1D	; 29
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	90 93 e6 03 	sts	0x03E6, r25
     bee:	80 93 e5 03 	sts	0x03E5, r24
     bf2:	11 c0       	rjmp	.+34     	; 0xc16 <__vector_13+0xd6>
                    loadNextMessage();
                }
#endif
            }
        } else {
            index = index + STEP;
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	30 93 e6 03 	sts	0x03E6, r19
     bfc:	20 93 e5 03 	sts	0x03E5, r18
            if (index > MATRIX_COL_COUNT) {
     c00:	2e 31       	cpi	r18, 0x1E	; 30
     c02:	31 05       	cpc	r19, r1
     c04:	94 f0       	brlt	.+36     	; 0xc2a <__vector_13+0xea>
                index = 0 - size;
     c06:	22 27       	eor	r18, r18
     c08:	33 27       	eor	r19, r19
     c0a:	28 1b       	sub	r18, r24
     c0c:	39 0b       	sbc	r19, r25
     c0e:	30 93 e6 03 	sts	0x03E6, r19
     c12:	20 93 e5 03 	sts	0x03E5, r18

#if INTERACTIVE_MODE
                if (auto_chain_message) {
     c16:	80 91 eb 03 	lds	r24, 0x03EB
     c1a:	88 23       	and	r24, r24
     c1c:	31 f0       	breq	.+12     	; 0xc2a <__vector_13+0xea>
                    loadNextMessage();
     c1e:	6d df       	rcall	.-294    	; 0xafa <loadNextMessage>
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__vector_13+0xea>
#endif
            }
        }
#if INTERACTIVE_MODE || !SYNCHRONIZE
    } else {
        index = 0;
     c22:	10 92 e6 03 	sts	0x03E6, r1
     c26:	10 92 e5 03 	sts	0x03E5, r1
    }
#endif

    TCNT1H = speed_table[scroll_speed];
     c2a:	e0 91 a2 03 	lds	r30, 0x03A2
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ec 55       	subi	r30, 0x5C	; 92
     c32:	fc 4f       	sbci	r31, 0xFC	; 252
     c34:	80 81       	ld	r24, Z
     c36:	80 93 85 00 	sts	0x0085, r24
    TCNT1L = 0;
     c3a:	10 92 84 00 	sts	0x0084, r1
}
     c3e:	2a 96       	adiw	r28, 0x0a	; 10
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	0f 90       	pop	r0
     c66:	1f 90       	pop	r1
     c68:	18 95       	reti

00000c6a <__vector_9>:

ISR(TIMER2_OVF_vect)
{
     c6a:	1f 92       	push	r1
     c6c:	0f 92       	push	r0
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	2f 93       	push	r18
     c76:	3f 93       	push	r19
     c78:	4f 93       	push	r20
     c7a:	5f 93       	push	r21
     c7c:	6f 93       	push	r22
     c7e:	7f 93       	push	r23
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	af 93       	push	r26
     c86:	bf 93       	push	r27
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
    if (watchdog_value && watchdog_counter++ >= watchdog_table[watchdog_value]) {
     c90:	e0 91 ef 03 	lds	r30, 0x03EF
     c94:	ee 23       	and	r30, r30
     c96:	71 f1       	breq	.+92     	; 0xcf4 <__vector_9+0x8a>
     c98:	80 91 ed 03 	lds	r24, 0x03ED
     c9c:	90 91 ee 03 	lds	r25, 0x03EE
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	e8 54       	subi	r30, 0x48	; 72
     ca8:	fc 4f       	sbci	r31, 0xFC	; 252
     caa:	20 81       	ld	r18, Z
     cac:	31 81       	ldd	r19, Z+1	; 0x01
     cae:	ac 01       	movw	r20, r24
     cb0:	4f 5f       	subi	r20, 0xFF	; 255
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	50 93 ee 03 	sts	0x03EE, r21
     cb8:	40 93 ed 03 	sts	0x03ED, r20
     cbc:	82 17       	cp	r24, r18
     cbe:	93 07       	cpc	r25, r19
     cc0:	c8 f0       	brcs	.+50     	; 0xcf4 <__vector_9+0x8a>
        SET_MESSAGE(WATCHDOG_ERROR_MSG)
     cc2:	c1 ef       	ldi	r28, 0xF1	; 241
     cc4:	d3 e0       	ldi	r29, 0x03	; 3
     cc6:	81 e5       	ldi	r24, 0x51	; 81
     cc8:	fe 01       	movw	r30, r28
     cca:	11 92       	st	Z+, r1
     ccc:	8a 95       	dec	r24
     cce:	e9 f7       	brne	.-6      	; 0xcca <__vector_9+0x60>
     cd0:	ce 01       	movw	r24, r28
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	71 e0       	ldi	r23, 0x01	; 1
     cd6:	22 d3       	rcall	.+1604   	; 0x131c <strcat>
     cd8:	09 90       	ld	r0, Y+
     cda:	00 20       	and	r0, r0
     cdc:	e9 f7       	brne	.-6      	; 0xcd8 <__vector_9+0x6e>
     cde:	21 97       	sbiw	r28, 0x01	; 1
     ce0:	c1 5f       	subi	r28, 0xF1	; 241
     ce2:	d3 40       	sbci	r29, 0x03	; 3
     ce4:	d0 93 e8 03 	sts	0x03E8, r29
     ce8:	c0 93 e7 03 	sts	0x03E7, r28
        WATCHDOG_RESET
     cec:	10 92 ee 03 	sts	0x03EE, r1
     cf0:	10 92 ed 03 	sts	0x03ED, r1
    }
}
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <clearScreen>:
    clearLeds();
}

#if INTERACTIVE_MODE
void clearScreen() {
    printf("\033[2J");      // clear screen
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <clearScreen+0x2>
     d1c:	8a e1       	ldi	r24, 0x1A	; 26
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	ed b7       	in	r30, 0x3d	; 61
     d22:	fe b7       	in	r31, 0x3e	; 62
     d24:	92 83       	std	Z+2, r25	; 0x02
     d26:	81 83       	std	Z+1, r24	; 0x01
     d28:	04 d3       	rcall	.+1544   	; 0x1332 <printf>
    printf("\033[0;0H");    // set cursor to 0,0
     d2a:	8f e1       	ldi	r24, 0x1F	; 31
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	ed b7       	in	r30, 0x3d	; 61
     d30:	fe b7       	in	r31, 0x3e	; 62
     d32:	92 83       	std	Z+2, r25	; 0x02
     d34:	81 83       	std	Z+1, r24	; 0x01
     d36:	fd d2       	rcall	.+1530   	; 0x1332 <printf>
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
    //printf("\033[10B");     // move cursor down 10 lines
    //printf("\033[5A");      // move cursor up 5 lines
}
     d3c:	08 95       	ret

00000d3e <writeMenu>:

void writeMenu() {
    clearScreen();
     d3e:	ed df       	rcall	.-38     	; 0xd1a <clearScreen>
    
    printf("M:[%i], S:[%i], D:[%i], L:[%i], C:[%i]\n\r", current_message, scroll_speed, scroll_direction, char_spacing, auto_chain_message);
     d40:	8d b7       	in	r24, 0x3d	; 61
     d42:	9e b7       	in	r25, 0x3e	; 62
     d44:	0c 97       	sbiw	r24, 0x0c	; 12
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	9e bf       	out	0x3e, r25	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	8d bf       	out	0x3d, r24	; 61
     d50:	ed b7       	in	r30, 0x3d	; 61
     d52:	fe b7       	in	r31, 0x3e	; 62
     d54:	31 96       	adiw	r30, 0x01	; 1
     d56:	86 e2       	ldi	r24, 0x26	; 38
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	ad b7       	in	r26, 0x3d	; 61
     d5c:	be b7       	in	r27, 0x3e	; 62
     d5e:	12 96       	adiw	r26, 0x02	; 2
     d60:	9c 93       	st	X, r25
     d62:	8e 93       	st	-X, r24
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	80 91 ec 03 	lds	r24, 0x03EC
     d6a:	82 83       	std	Z+2, r24	; 0x02
     d6c:	13 82       	std	Z+3, r1	; 0x03
     d6e:	80 91 a2 03 	lds	r24, 0x03A2
     d72:	84 83       	std	Z+4, r24	; 0x04
     d74:	15 82       	std	Z+5, r1	; 0x05
     d76:	80 91 a3 03 	lds	r24, 0x03A3
     d7a:	86 83       	std	Z+6, r24	; 0x06
     d7c:	17 82       	std	Z+7, r1	; 0x07
     d7e:	80 91 e4 03 	lds	r24, 0x03E4
     d82:	80 87       	std	Z+8, r24	; 0x08
     d84:	11 86       	std	Z+9, r1	; 0x09
     d86:	80 91 eb 03 	lds	r24, 0x03EB
     d8a:	82 87       	std	Z+10, r24	; 0x0a
     d8c:	13 86       	std	Z+11, r1	; 0x0b
     d8e:	d1 d2       	rcall	.+1442   	; 0x1332 <printf>
    
    printf("Action :\n\r");
     d90:	ed b7       	in	r30, 0x3d	; 61
     d92:	fe b7       	in	r31, 0x3e	; 62
     d94:	3a 96       	adiw	r30, 0x0a	; 10
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	fe bf       	out	0x3e, r31	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	ed bf       	out	0x3d, r30	; 61
     da0:	8f e4       	ldi	r24, 0x4F	; 79
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	92 83       	std	Z+2, r25	; 0x02
     da6:	81 83       	std	Z+1, r24	; 0x01
     da8:	c4 d2       	rcall	.+1416   	; 0x1332 <printf>
    printf(" [0...3] Select msg\n\r");
     daa:	8a e5       	ldi	r24, 0x5A	; 90
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	ad b7       	in	r26, 0x3d	; 61
     db0:	be b7       	in	r27, 0x3e	; 62
     db2:	12 96       	adiw	r26, 0x02	; 2
     db4:	9c 93       	st	X, r25
     db6:	8e 93       	st	-X, r24
     db8:	11 97       	sbiw	r26, 0x01	; 1
     dba:	bb d2       	rcall	.+1398   	; 0x1332 <printf>
    printf(" [t] Edit msg\n\r");
     dbc:	80 e7       	ldi	r24, 0x70	; 112
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	ed b7       	in	r30, 0x3d	; 61
     dc2:	fe b7       	in	r31, 0x3e	; 62
     dc4:	92 83       	std	Z+2, r25	; 0x02
     dc6:	81 83       	std	Z+1, r24	; 0x01
     dc8:	b4 d2       	rcall	.+1384   	; 0x1332 <printf>
    printf(" [c] Clear\n\r");
     dca:	80 e8       	ldi	r24, 0x80	; 128
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	ad b7       	in	r26, 0x3d	; 61
     dd0:	be b7       	in	r27, 0x3e	; 62
     dd2:	12 96       	adiw	r26, 0x02	; 2
     dd4:	9c 93       	st	X, r25
     dd6:	8e 93       	st	-X, r24
     dd8:	11 97       	sbiw	r26, 0x01	; 1
     dda:	ab d2       	rcall	.+1366   	; 0x1332 <printf>

    printf(" [s] Set scroll speed...\n\r");
     ddc:	8d e8       	ldi	r24, 0x8D	; 141
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	ed b7       	in	r30, 0x3d	; 61
     de2:	fe b7       	in	r31, 0x3e	; 62
     de4:	92 83       	std	Z+2, r25	; 0x02
     de6:	81 83       	std	Z+1, r24	; 0x01
     de8:	a4 d2       	rcall	.+1352   	; 0x1332 <printf>
    printf(" [l] Letter spacing...\n\r");
     dea:	88 ea       	ldi	r24, 0xA8	; 168
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	ad b7       	in	r26, 0x3d	; 61
     df0:	be b7       	in	r27, 0x3e	; 62
     df2:	12 96       	adiw	r26, 0x02	; 2
     df4:	9c 93       	st	X, r25
     df6:	8e 93       	st	-X, r24
     df8:	11 97       	sbiw	r26, 0x01	; 1
     dfa:	9b d2       	rcall	.+1334   	; 0x1332 <printf>

    printf(" [d] Reverse direction\n\r");
     dfc:	81 ec       	ldi	r24, 0xC1	; 193
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	ed b7       	in	r30, 0x3d	; 61
     e02:	fe b7       	in	r31, 0x3e	; 62
     e04:	92 83       	std	Z+2, r25	; 0x02
     e06:	81 83       	std	Z+1, r24	; 0x01
     e08:	94 d2       	rcall	.+1320   	; 0x1332 <printf>
    printf(" [a] Chain mode\n\r");
     e0a:	8a ed       	ldi	r24, 0xDA	; 218
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	ad b7       	in	r26, 0x3d	; 61
     e10:	be b7       	in	r27, 0x3e	; 62
     e12:	12 96       	adiw	r26, 0x02	; 2
     e14:	9c 93       	st	X, r25
     e16:	8e 93       	st	-X, r24
     e18:	11 97       	sbiw	r26, 0x01	; 1
     e1a:	8b d2       	rcall	.+1302   	; 0x1332 <printf>
    printf(" [w] Save conf to EEPROM\n\r");
     e1c:	8c ee       	ldi	r24, 0xEC	; 236
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	ed b7       	in	r30, 0x3d	; 61
     e22:	fe b7       	in	r31, 0x3e	; 62
     e24:	92 83       	std	Z+2, r25	; 0x02
     e26:	81 83       	std	Z+1, r24	; 0x01
     e28:	84 d2       	rcall	.+1288   	; 0x1332 <printf>
    printf(" [b] Read button...\n\r");
     e2a:	87 e0       	ldi	r24, 0x07	; 7
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	ad b7       	in	r26, 0x3d	; 61
     e30:	be b7       	in	r27, 0x3e	; 62
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	9c 93       	st	X, r25
     e36:	8e 93       	st	-X, r24
     e38:	11 97       	sbiw	r26, 0x01	; 1
     e3a:	7b d2       	rcall	.+1270   	; 0x1332 <printf>
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
}
     e40:	08 95       	ret

00000e42 <handleAction>:

void handleAction() {
     e42:	2f 92       	push	r2
     e44:	3f 92       	push	r3
     e46:	4f 92       	push	r4
     e48:	5f 92       	push	r5
     e4a:	6f 92       	push	r6
     e4c:	7f 92       	push	r7
     e4e:	8f 92       	push	r8
     e50:	9f 92       	push	r9
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	c0 54       	subi	r28, 0x40	; 64
     e6c:	d0 40       	sbci	r29, 0x00	; 0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61

    int _index = 0;
    unsigned char auto_chain = 0;
    char action[64];

    receivedBuffer = 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 f0 03 	sts	0x03F0, r24
     e7e:	00 e0       	ldi	r16, 0x00	; 0
            continue;
        }

        USART_SendByte(receivedBuffer);

        memset(action, 0, sizeof(action));
     e80:	7e 01       	movw	r14, r28
     e82:	08 94       	sec
     e84:	e1 1c       	adc	r14, r1
     e86:	f1 1c       	adc	r15, r1
        writeMenu();
        if (strlen(action)) {
            printf("\n\r");
            printf(action);
        }
        printf("\n\rYour choice : ");
     e88:	f1 e9       	ldi	r31, 0x91	; 145
     e8a:	8f 2e       	mov	r8, r31
     e8c:	f3 e0       	ldi	r31, 0x03	; 3
     e8e:	9f 2e       	mov	r9, r31
                break;
        }

        writeMenu();
        if (strlen(action)) {
            printf("\n\r");
     e90:	ee e8       	ldi	r30, 0x8E	; 142
     e92:	ae 2e       	mov	r10, r30
     e94:	e3 e0       	ldi	r30, 0x03	; 3
     e96:	be 2e       	mov	r11, r30

                strcat(action, "Speed saved !\n\r");
                break;
            case 'c':
                strcat(action, "Message cleared !\n\r");
                memset(message, 0, sizeof(message));
     e98:	71 ef       	ldi	r23, 0xF1	; 241
     e9a:	c7 2e       	mov	r12, r23
     e9c:	73 e0       	ldi	r23, 0x03	; 3
     e9e:	d7 2e       	mov	r13, r23
                auto_chain_message = !auto_chain_message;
                break;
            case 's':
                while (1) {
                    clearScreen();
                    printf("Enter a speed between 0 to 9, [ENTER] to exit : \n\r");
     ea0:	6e e8       	ldi	r22, 0x8E	; 142
     ea2:	46 2e       	mov	r4, r22
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	56 2e       	mov	r5, r22
    char action[64];

    receivedBuffer = 1;
    while (1) {

        if (!receivedBuffer) {
     ea8:	80 91 f0 03 	lds	r24, 0x03F0
     eac:	88 23       	and	r24, r24
     eae:	e1 f3       	breq	.-8      	; 0xea8 <handleAction+0x66>
            continue;
        }

        USART_SendByte(receivedBuffer);
     eb0:	80 91 f0 03 	lds	r24, 0x03F0


void USART_SendByte(uint8_t u8Data){

    // Wait until last byte has been transmitted
    while((UCSR0A &(1<<UDRE0)) == 0);
     eb4:	90 91 c0 00 	lds	r25, 0x00C0
     eb8:	95 ff       	sbrs	r25, 5
     eba:	fc cf       	rjmp	.-8      	; 0xeb4 <handleAction+0x72>

    // Transmit data
    UDR0 = u8Data;
     ebc:	80 93 c6 00 	sts	0x00C6, r24

        memset(action, 0, sizeof(action));
     ec0:	d7 01       	movw	r26, r14
     ec2:	e0 e4       	ldi	r30, 0x40	; 64
     ec4:	1d 92       	st	X+, r1
     ec6:	ea 95       	dec	r30
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <handleAction+0x82>
        switch (receivedBuffer) {
     eca:	80 91 f0 03 	lds	r24, 0x03F0
     ece:	83 36       	cpi	r24, 0x63	; 99
     ed0:	09 f4       	brne	.+2      	; 0xed4 <handleAction+0x92>
     ed2:	d7 c0       	rjmp	.+430    	; 0x1082 <handleAction+0x240>
     ed4:	84 36       	cpi	r24, 0x64	; 100
     ed6:	68 f4       	brcc	.+26     	; 0xef2 <handleAction+0xb0>
     ed8:	80 33       	cpi	r24, 0x30	; 48
     eda:	08 f4       	brcc	.+2      	; 0xede <handleAction+0x9c>
     edc:	96 c1       	rjmp	.+812    	; 0x120a <handleAction+0x3c8>
     ede:	84 33       	cpi	r24, 0x34	; 52
     ee0:	08 f4       	brcc	.+2      	; 0xee4 <handleAction+0xa2>
     ee2:	8f c0       	rjmp	.+286    	; 0x1002 <handleAction+0x1c0>
     ee4:	81 36       	cpi	r24, 0x61	; 97
     ee6:	09 f4       	brne	.+2      	; 0xeea <handleAction+0xa8>
     ee8:	9f c0       	rjmp	.+318    	; 0x1028 <handleAction+0x1e6>
     eea:	82 36       	cpi	r24, 0x62	; 98
     eec:	09 f0       	breq	.+2      	; 0xef0 <handleAction+0xae>
     eee:	8d c1       	rjmp	.+794    	; 0x120a <handleAction+0x3c8>
     ef0:	19 c1       	rjmp	.+562    	; 0x1124 <handleAction+0x2e2>
     ef2:	83 37       	cpi	r24, 0x73	; 115
     ef4:	09 f4       	brne	.+2      	; 0xef8 <handleAction+0xb6>
     ef6:	a1 c0       	rjmp	.+322    	; 0x103a <handleAction+0x1f8>
     ef8:	84 37       	cpi	r24, 0x74	; 116
     efa:	38 f4       	brcc	.+14     	; 0xf0a <handleAction+0xc8>
     efc:	84 36       	cpi	r24, 0x64	; 100
     efe:	09 f4       	brne	.+2      	; 0xf02 <handleAction+0xc0>
     f00:	ec c0       	rjmp	.+472    	; 0x10da <handleAction+0x298>
     f02:	8c 36       	cpi	r24, 0x6C	; 108
     f04:	09 f0       	breq	.+2      	; 0xf08 <handleAction+0xc6>
     f06:	81 c1       	rjmp	.+770    	; 0x120a <handleAction+0x3c8>
     f08:	c6 c0       	rjmp	.+396    	; 0x1096 <handleAction+0x254>
     f0a:	84 37       	cpi	r24, 0x74	; 116
     f0c:	21 f0       	breq	.+8      	; 0xf16 <handleAction+0xd4>
     f0e:	87 37       	cpi	r24, 0x77	; 119
     f10:	09 f0       	breq	.+2      	; 0xf14 <handleAction+0xd2>
     f12:	7b c1       	rjmp	.+758    	; 0x120a <handleAction+0x3c8>
     f14:	ef c0       	rjmp	.+478    	; 0x10f4 <handleAction+0x2b2>
            case 0:
                break;
            case 't':
                clearScreen();
     f16:	01 df       	rcall	.-510    	; 0xd1a <clearScreen>
                printf("Type your message and press [ENTER] to exit : \n\r");
     f18:	00 d0       	rcall	.+0      	; 0xf1a <handleAction+0xd8>
     f1a:	ed e1       	ldi	r30, 0x1D	; 29
     f1c:	f2 e0       	ldi	r31, 0x02	; 2
     f1e:	ad b7       	in	r26, 0x3d	; 61
     f20:	be b7       	in	r27, 0x3e	; 62
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	fc 93       	st	X, r31
     f26:	ee 93       	st	-X, r30
     f28:	11 97       	sbiw	r26, 0x01	; 1
     f2a:	03 d2       	rcall	.+1030   	; 0x1332 <printf>
                receivedBuffer = 0;
     f2c:	10 92 f0 03 	sts	0x03F0, r1
                memset(message, 0, sizeof(message));
     f30:	81 e5       	ldi	r24, 0x51	; 81
     f32:	d6 01       	movw	r26, r12
     f34:	1d 92       	st	X+, r1
     f36:	8a 95       	dec	r24
     f38:	e9 f7       	brne	.-6      	; 0xf34 <handleAction+0xf2>
                _index = 0;

                // Reset index
                index = 0;
     f3a:	10 92 e6 03 	sts	0x03E6, r1
     f3e:	10 92 e5 03 	sts	0x03E5, r1

                if (auto_chain_message) {
     f42:	10 91 eb 03 	lds	r17, 0x03EB
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	11 23       	and	r17, r17
     f4c:	11 f4       	brne	.+4      	; 0xf52 <handleAction+0x110>
     f4e:	10 2f       	mov	r17, r16
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <handleAction+0x114>
                    auto_chain = auto_chain_message;
                    auto_chain_message = 0;
     f52:	10 92 eb 03 	sts	0x03EB, r1
                }

                message_size = 0;
     f56:	10 92 e8 03 	sts	0x03E8, r1
     f5a:	10 92 e7 03 	sts	0x03E7, r1
                while (1) {
                    if (!receivedBuffer) {
     f5e:	80 91 f0 03 	lds	r24, 0x03F0
     f62:	88 23       	and	r24, r24
     f64:	e1 f3       	breq	.-8      	; 0xf5e <handleAction+0x11c>
                        continue;
                    }

                    USART_SendByte(receivedBuffer);
     f66:	80 91 f0 03 	lds	r24, 0x03F0


void USART_SendByte(uint8_t u8Data){

    // Wait until last byte has been transmitted
    while((UCSR0A &(1<<UDRE0)) == 0);
     f6a:	90 91 c0 00 	lds	r25, 0x00C0
     f6e:	95 ff       	sbrs	r25, 5
     f70:	fc cf       	rjmp	.-8      	; 0xf6a <handleAction+0x128>

    // Transmit data
    UDR0 = u8Data;
     f72:	80 93 c6 00 	sts	0x00C6, r24

                    // Enter pressed ?
                    if (receivedBuffer == 13) {
     f76:	80 91 f0 03 	lds	r24, 0x03F0
     f7a:	8d 30       	cpi	r24, 0x0D	; 13
     f7c:	99 f1       	breq	.+102    	; 0xfe4 <handleAction+0x1a2>
                        break;
                    }

                    // Return ?
                    if (receivedBuffer == 8) {
     f7e:	80 91 f0 03 	lds	r24, 0x03F0
     f82:	88 30       	cpi	r24, 0x08	; 8
     f84:	99 f4       	brne	.+38     	; 0xfac <handleAction+0x16a>
                        message[--message_size] = 0;
     f86:	80 91 e7 03 	lds	r24, 0x03E7
     f8a:	90 91 e8 03 	lds	r25, 0x03E8
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	90 93 e8 03 	sts	0x03E8, r25
     f94:	80 93 e7 03 	sts	0x03E7, r24
     f98:	e0 91 e7 03 	lds	r30, 0x03E7
     f9c:	f0 91 e8 03 	lds	r31, 0x03E8
     fa0:	ef 50       	subi	r30, 0x0F	; 15
     fa2:	fc 4f       	sbci	r31, 0xFC	; 252
     fa4:	10 82       	st	Z, r1
                        receivedBuffer = 0;
     fa6:	10 92 f0 03 	sts	0x03F0, r1
                        continue;
     faa:	d9 cf       	rjmp	.-78     	; 0xf5e <handleAction+0x11c>
                    }

                    message[message_size++] = receivedBuffer;
     fac:	80 91 e7 03 	lds	r24, 0x03E7
     fb0:	90 91 e8 03 	lds	r25, 0x03E8
     fb4:	20 91 f0 03 	lds	r18, 0x03F0
     fb8:	fc 01       	movw	r30, r24
     fba:	ef 50       	subi	r30, 0x0F	; 15
     fbc:	fc 4f       	sbci	r31, 0xFC	; 252
     fbe:	20 83       	st	Z, r18
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	90 93 e8 03 	sts	0x03E8, r25
     fc6:	80 93 e7 03 	sts	0x03E7, r24
                    receivedBuffer = 0;
     fca:	10 92 f0 03 	sts	0x03F0, r1

                    // Test max string size
                    if (message_size == sizeof(message) - 1) {
     fce:	80 91 e7 03 	lds	r24, 0x03E7
     fd2:	90 91 e8 03 	lds	r25, 0x03E8
     fd6:	80 35       	cpi	r24, 0x50	; 80
     fd8:	91 05       	cpc	r25, r1
     fda:	09 f6       	brne	.-126    	; 0xf5e <handleAction+0x11c>
                        strcat(action, "Message size reached !\n\r");
     fdc:	c7 01       	movw	r24, r14
     fde:	6e e4       	ldi	r22, 0x4E	; 78
     fe0:	72 e0       	ldi	r23, 0x02	; 2
     fe2:	9c d1       	rcall	.+824    	; 0x131c <strcat>
                        break;
                    }
                }

                if (auto_chain_message) {
     fe4:	80 91 eb 03 	lds	r24, 0x03EB
     fe8:	88 23       	and	r24, r24
     fea:	21 f0       	breq	.+8      	; 0xff4 <handleAction+0x1b2>
                    saveMessage(current_message);
     fec:	80 91 ec 03 	lds	r24, 0x03EC
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	ec dc       	rcall	.-1576   	; 0x9cc <saveMessage>
                }

                auto_chain_message = auto_chain;
     ff4:	10 93 eb 03 	sts	0x03EB, r17

                strcat(action, "Message saved !\n\r");
     ff8:	c7 01       	movw	r24, r14
     ffa:	67 e6       	ldi	r22, 0x67	; 103
     ffc:	72 e0       	ldi	r23, 0x02	; 2
     ffe:	8e d1       	rcall	.+796    	; 0x131c <strcat>
                break;
    1000:	05 c1       	rjmp	.+522    	; 0x120c <handleAction+0x3ca>
            case '0':
            case '1':
            case '2':
            case '3':
                saveMessage(current_message);
    1002:	80 91 ec 03 	lds	r24, 0x03EC
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	e1 dc       	rcall	.-1598   	; 0x9cc <saveMessage>
                current_message = receivedBuffer - '0';
    100a:	80 91 f0 03 	lds	r24, 0x03F0
    100e:	80 53       	subi	r24, 0x30	; 48
    1010:	80 93 ec 03 	sts	0x03EC, r24
                loadMessage(current_message);
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	f2 dc       	rcall	.-1564   	; 0x9fc <loadMessage>
                index = 0;
    1018:	10 92 e6 03 	sts	0x03E6, r1
    101c:	10 92 e5 03 	sts	0x03E5, r1
                strcat(action, "Message switched !\n\r");
    1020:	c7 01       	movw	r24, r14
    1022:	69 e7       	ldi	r22, 0x79	; 121
    1024:	72 e0       	ldi	r23, 0x02	; 2
    1026:	7c c0       	rjmp	.+248    	; 0x1120 <handleAction+0x2de>
                break;
            case 'a':
                auto_chain_message = !auto_chain_message;
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 91 eb 03 	lds	r25, 0x03EB
    102e:	99 23       	and	r25, r25
    1030:	09 f4       	brne	.+2      	; 0x1034 <handleAction+0x1f2>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 eb 03 	sts	0x03EB, r24
    1038:	e8 c0       	rjmp	.+464    	; 0x120a <handleAction+0x3c8>
                break;
            case 's':
                while (1) {
                    clearScreen();
    103a:	6f de       	rcall	.-802    	; 0xd1a <clearScreen>
                    printf("Enter a speed between 0 to 9, [ENTER] to exit : \n\r");
    103c:	00 d0       	rcall	.+0      	; 0x103e <handleAction+0x1fc>
    103e:	ed b7       	in	r30, 0x3d	; 61
    1040:	fe b7       	in	r31, 0x3e	; 62
    1042:	52 82       	std	Z+2, r5	; 0x02
    1044:	41 82       	std	Z+1, r4	; 0x01
    1046:	75 d1       	rcall	.+746    	; 0x1332 <printf>
                    receivedBuffer = 0;
    1048:	10 92 f0 03 	sts	0x03F0, r1
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0

                    while (1) {
                        if (receivedBuffer) {
    1050:	80 91 f0 03 	lds	r24, 0x03F0
    1054:	88 23       	and	r24, r24
    1056:	e1 f3       	breq	.-8      	; 0x1050 <handleAction+0x20e>
                            break;
                        }
                    }

                    // Set Speed
                    if (receivedBuffer >= '0' && receivedBuffer <= '9') {
    1058:	80 91 f0 03 	lds	r24, 0x03F0
    105c:	80 33       	cpi	r24, 0x30	; 48
    105e:	48 f0       	brcs	.+18     	; 0x1072 <handleAction+0x230>
    1060:	80 91 f0 03 	lds	r24, 0x03F0
    1064:	8a 33       	cpi	r24, 0x3A	; 58
    1066:	28 f4       	brcc	.+10     	; 0x1072 <handleAction+0x230>
                        //scroll_speed = speed_table[receivedBuffer - '0'];
                        scroll_speed = receivedBuffer - '0';
    1068:	80 91 f0 03 	lds	r24, 0x03F0
    106c:	80 53       	subi	r24, 0x30	; 48
    106e:	80 93 a2 03 	sts	0x03A2, r24
                    }
                    
                    // Enter pressed ?
                    if (receivedBuffer == 13) {
    1072:	80 91 f0 03 	lds	r24, 0x03F0
    1076:	8d 30       	cpi	r24, 0x0D	; 13
    1078:	01 f7       	brne	.-64     	; 0x103a <handleAction+0x1f8>
                        break;
                    }
                }

                strcat(action, "Speed saved !\n\r");
    107a:	c7 01       	movw	r24, r14
    107c:	61 ec       	ldi	r22, 0xC1	; 193
    107e:	72 e0       	ldi	r23, 0x02	; 2
    1080:	4f c0       	rjmp	.+158    	; 0x1120 <handleAction+0x2de>
                break;
            case 'c':
                strcat(action, "Message cleared !\n\r");
    1082:	c7 01       	movw	r24, r14
    1084:	61 ed       	ldi	r22, 0xD1	; 209
    1086:	72 e0       	ldi	r23, 0x02	; 2
    1088:	49 d1       	rcall	.+658    	; 0x131c <strcat>
                memset(message, 0, sizeof(message));
    108a:	81 e5       	ldi	r24, 0x51	; 81
    108c:	d6 01       	movw	r26, r12
    108e:	1d 92       	st	X+, r1
    1090:	8a 95       	dec	r24
    1092:	e9 f7       	brne	.-6      	; 0x108e <handleAction+0x24c>
    1094:	ba c0       	rjmp	.+372    	; 0x120a <handleAction+0x3c8>
                break;
            case 'l':
                while (1) {
                    clearScreen();
    1096:	41 de       	rcall	.-894    	; 0xd1a <clearScreen>
                    printf("Enter character spacing (0 to 9), [ENTER] to exit : \n\r");
    1098:	00 d0       	rcall	.+0      	; 0x109a <handleAction+0x258>
    109a:	25 ee       	ldi	r18, 0xE5	; 229
    109c:	32 e0       	ldi	r19, 0x02	; 2
    109e:	ed b7       	in	r30, 0x3d	; 61
    10a0:	fe b7       	in	r31, 0x3e	; 62
    10a2:	32 83       	std	Z+2, r19	; 0x02
    10a4:	21 83       	std	Z+1, r18	; 0x01
    10a6:	45 d1       	rcall	.+650    	; 0x1332 <printf>
                    receivedBuffer = 0;
    10a8:	10 92 f0 03 	sts	0x03F0, r1
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0

                    while (1) {
                        if (receivedBuffer) {
    10b0:	80 91 f0 03 	lds	r24, 0x03F0
    10b4:	88 23       	and	r24, r24
    10b6:	e1 f3       	breq	.-8      	; 0x10b0 <handleAction+0x26e>
                            break;
                        }
                    }

                    if (receivedBuffer >= '0' && receivedBuffer <= '9') {
    10b8:	80 91 f0 03 	lds	r24, 0x03F0
    10bc:	80 33       	cpi	r24, 0x30	; 48
    10be:	58 f3       	brcs	.-42     	; 0x1096 <handleAction+0x254>
    10c0:	80 91 f0 03 	lds	r24, 0x03F0
    10c4:	8a 33       	cpi	r24, 0x3A	; 58
    10c6:	38 f7       	brcc	.-50     	; 0x1096 <handleAction+0x254>
                        break;
                    }
                }

                char_spacing = receivedBuffer - '0';
    10c8:	80 91 f0 03 	lds	r24, 0x03F0
    10cc:	80 53       	subi	r24, 0x30	; 48
    10ce:	80 93 e4 03 	sts	0x03E4, r24

                strcat(action, "Character spacing saved !\n\r");
    10d2:	c7 01       	movw	r24, r14
    10d4:	6c e1       	ldi	r22, 0x1C	; 28
    10d6:	73 e0       	ldi	r23, 0x03	; 3
    10d8:	23 c0       	rjmp	.+70     	; 0x1120 <handleAction+0x2de>
                break;
            case 'd':
                strcat(action, "Direction switched !\n\r");
    10da:	c7 01       	movw	r24, r14
    10dc:	68 e3       	ldi	r22, 0x38	; 56
    10de:	73 e0       	ldi	r23, 0x03	; 3
    10e0:	1d d1       	rcall	.+570    	; 0x131c <strcat>
                scroll_direction = !scroll_direction;
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 91 a3 03 	lds	r25, 0x03A3
    10e8:	99 23       	and	r25, r25
    10ea:	09 f4       	brne	.+2      	; 0x10ee <handleAction+0x2ac>
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 a3 03 	sts	0x03A3, r24
    10f2:	8b c0       	rjmp	.+278    	; 0x120a <handleAction+0x3c8>
                break;
            case 'w':
                saveMessage(current_message);
    10f4:	80 91 ec 03 	lds	r24, 0x03EC
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	68 dc       	rcall	.-1840   	; 0x9cc <saveMessage>
                //eeprom_write_block((void*)&message, (const void*)EEPROM_CONFIG_ADDR_MESSAGE, sizeof(message));
                eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_SPEED, scroll_speed);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	60 91 a2 03 	lds	r22, 0x03A2
    1104:	10 d3       	rcall	.+1568   	; 0x1726 <__eeupd_byte_m88pa>
                eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_DIRECTION, scroll_direction);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	60 91 a3 03 	lds	r22, 0x03A3
    110e:	0b d3       	rcall	.+1558   	; 0x1726 <__eeupd_byte_m88pa>
                eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_SPACING, char_spacing);
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	60 91 e4 03 	lds	r22, 0x03E4
    1118:	06 d3       	rcall	.+1548   	; 0x1726 <__eeupd_byte_m88pa>
                
                strcat(action, "Configuration saved in EEPROM !\n\r");
    111a:	c7 01       	movw	r24, r14
    111c:	6f e4       	ldi	r22, 0x4F	; 79
    111e:	73 e0       	ldi	r23, 0x03	; 3
    1120:	fd d0       	rcall	.+506    	; 0x131c <strcat>
    1122:	73 c0       	rjmp	.+230    	; 0x120a <handleAction+0x3c8>
                break;
            case 'b':
                receivedBuffer = 0;
    1124:	10 92 f0 03 	sts	0x03F0, r1

                clearScreen();
    1128:	f8 dd       	rcall	.-1040   	; 0xd1a <clearScreen>
                printf("Reading button value !\n\r");
    112a:	00 d0       	rcall	.+0      	; 0x112c <handleAction+0x2ea>
    112c:	e1 e7       	ldi	r30, 0x71	; 113
    112e:	f3 e0       	ldi	r31, 0x03	; 3
    1130:	ad b7       	in	r26, 0x3d	; 61
    1132:	be b7       	in	r27, 0x3e	; 62
    1134:	12 96       	adiw	r26, 0x02	; 2
    1136:	fc 93       	st	X, r31
    1138:	ee 93       	st	-X, r30
    113a:	11 97       	sbiw	r26, 0x01	; 1
    113c:	fa d0       	rcall	.+500    	; 0x1332 <printf>
                ADCSRA |= (1 << ADSC) | (1 << ADIE);
    113e:	80 91 7a 00 	lds	r24, 0x007A
    1142:	88 64       	ori	r24, 0x48	; 72
    1144:	80 93 7a 00 	sts	0x007A, r24
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
                unsigned char value = 0;

                while (1) {
                    key = 0;

                    if (receivedBuffer) {
    114c:	80 91 f0 03 	lds	r24, 0x03F0
    1150:	88 23       	and	r24, r24
    1152:	09 f0       	breq	.+2      	; 0x1156 <handleAction+0x314>
    1154:	5a c0       	rjmp	.+180    	; 0x120a <handleAction+0x3c8>
                        break;
                    }

                    ADCSRA |= (1 << ADSC) | (1 << ADIE);
    1156:	80 91 7a 00 	lds	r24, 0x007A
    115a:	88 64       	ori	r24, 0x48	; 72
    115c:	80 93 7a 00 	sts	0x007A, r24
                    value = adc_value;
    1160:	80 91 42 04 	lds	r24, 0x0442

                    if (value != tmp) {
    1164:	28 2e       	mov	r2, r24
    1166:	33 24       	eor	r3, r3
    1168:	26 14       	cp	r2, r6
    116a:	37 04       	cpc	r3, r7
    116c:	79 f3       	breq	.-34     	; 0x114c <handleAction+0x30a>
                    
                        if (value > 126 && value < 130) {           // 128
    116e:	98 2f       	mov	r25, r24
    1170:	9f 57       	subi	r25, 0x7F	; 127
    1172:	93 30       	cpi	r25, 0x03	; 3
    1174:	10 f4       	brcc	.+4      	; 0x117a <handleAction+0x338>
    1176:	81 e4       	ldi	r24, 0x41	; 65
    1178:	22 c0       	rjmp	.+68     	; 0x11be <handleAction+0x37c>
                            key = 'A';
                        } else if (value > 152 && value < 157) {    // 155
    117a:	98 2f       	mov	r25, r24
    117c:	99 59       	subi	r25, 0x99	; 153
    117e:	94 30       	cpi	r25, 0x04	; 4
    1180:	10 f4       	brcc	.+4      	; 0x1186 <handleAction+0x344>
    1182:	82 e4       	ldi	r24, 0x42	; 66
    1184:	1c c0       	rjmp	.+56     	; 0x11be <handleAction+0x37c>
                            key = 'B';
                        } else if (value > 76 && value < 82) {      // 79
    1186:	98 2f       	mov	r25, r24
    1188:	9d 54       	subi	r25, 0x4D	; 77
    118a:	95 30       	cpi	r25, 0x05	; 5
    118c:	10 f4       	brcc	.+4      	; 0x1192 <handleAction+0x350>
    118e:	83 e4       	ldi	r24, 0x43	; 67
    1190:	16 c0       	rjmp	.+44     	; 0x11be <handleAction+0x37c>
                            key = 'C';
                        } else if (value > 54 && value < 59) {      // 57
    1192:	98 2f       	mov	r25, r24
    1194:	97 53       	subi	r25, 0x37	; 55
    1196:	94 30       	cpi	r25, 0x04	; 4
    1198:	10 f4       	brcc	.+4      	; 0x119e <handleAction+0x35c>
    119a:	84 e4       	ldi	r24, 0x44	; 68
    119c:	10 c0       	rjmp	.+32     	; 0x11be <handleAction+0x37c>
                            key = 'D';
                        } else if (value > 17 && value < 23) {      // 19
    119e:	98 2f       	mov	r25, r24
    11a0:	92 51       	subi	r25, 0x12	; 18
    11a2:	95 30       	cpi	r25, 0x05	; 5
    11a4:	10 f4       	brcc	.+4      	; 0x11aa <handleAction+0x368>
    11a6:	85 e4       	ldi	r24, 0x45	; 69
    11a8:	0a c0       	rjmp	.+20     	; 0x11be <handleAction+0x37c>
                            key = 'E';
                        } else if (value > 40 && value < 47) {      // 42
    11aa:	98 2f       	mov	r25, r24
    11ac:	99 52       	subi	r25, 0x29	; 41
    11ae:	96 30       	cpi	r25, 0x06	; 6
    11b0:	10 f4       	brcc	.+4      	; 0x11b6 <handleAction+0x374>
    11b2:	86 e4       	ldi	r24, 0x46	; 70
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <handleAction+0x37c>
                            key = 'F';
                        } else if (value > 189 && value < 195) {    // 192
    11b6:	8e 5b       	subi	r24, 0xBE	; 190
    11b8:	85 30       	cpi	r24, 0x05	; 5
    11ba:	40 f6       	brcc	.-112    	; 0x114c <handleAction+0x30a>
    11bc:	87 e4       	ldi	r24, 0x47	; 71
                        } else {
                            key = 'x';
                            continue;
                        }

                        printf("<%c", key);
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <handleAction+0x37e>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <handleAction+0x380>
    11c2:	ed b7       	in	r30, 0x3d	; 61
    11c4:	fe b7       	in	r31, 0x3e	; 62
    11c6:	31 96       	adiw	r30, 0x01	; 1
    11c8:	2a e8       	ldi	r18, 0x8A	; 138
    11ca:	33 e0       	ldi	r19, 0x03	; 3
    11cc:	ad b7       	in	r26, 0x3d	; 61
    11ce:	be b7       	in	r27, 0x3e	; 62
    11d0:	12 96       	adiw	r26, 0x02	; 2
    11d2:	3c 93       	st	X, r19
    11d4:	2e 93       	st	-X, r18
    11d6:	11 97       	sbiw	r26, 0x01	; 1
    11d8:	82 83       	std	Z+2, r24	; 0x02
    11da:	13 82       	std	Z+3, r1	; 0x03
    11dc:	aa d0       	rcall	.+340    	; 0x1332 <printf>
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0

                        while (1) {
                            ADCSRA |= (1 << ADSC) | (1 << ADIE);
    11e6:	80 91 7a 00 	lds	r24, 0x007A
    11ea:	88 64       	ori	r24, 0x48	; 72
    11ec:	80 93 7a 00 	sts	0x007A, r24
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
    11f0:	38 e0       	ldi	r19, 0x08	; 8
    11f2:	3a 95       	dec	r19
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <handleAction+0x3b0>
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <handleAction+0x3b6>
                            _delay_us(10);
                            if (adc_value > 250) {
    11f8:	80 91 42 04 	lds	r24, 0x0442
    11fc:	8b 3f       	cpi	r24, 0xFB	; 251
    11fe:	98 f3       	brcs	.-26     	; 0x11e6 <handleAction+0x3a4>
                                printf(">");
    1200:	8e e3       	ldi	r24, 0x3E	; 62
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a8 d0       	rcall	.+336    	; 0x1356 <putchar>
    1206:	31 01       	movw	r6, r2
    1208:	a1 cf       	rjmp	.-190    	; 0x114c <handleAction+0x30a>
                                break;
    120a:	10 2f       	mov	r17, r16
                    tmp = value;
                }
                break;
        }

        writeMenu();
    120c:	98 dd       	rcall	.-1232   	; 0xd3e <writeMenu>
        if (strlen(action)) {
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	88 23       	and	r24, r24
    1212:	79 f0       	breq	.+30     	; 0x1232 <handleAction+0x3f0>
            printf("\n\r");
    1214:	00 d0       	rcall	.+0      	; 0x1216 <handleAction+0x3d4>
    1216:	ad b7       	in	r26, 0x3d	; 61
    1218:	be b7       	in	r27, 0x3e	; 62
    121a:	12 96       	adiw	r26, 0x02	; 2
    121c:	bc 92       	st	X, r11
    121e:	ae 92       	st	-X, r10
    1220:	11 97       	sbiw	r26, 0x01	; 1
    1222:	87 d0       	rcall	.+270    	; 0x1332 <printf>
            printf(action);
    1224:	ed b7       	in	r30, 0x3d	; 61
    1226:	fe b7       	in	r31, 0x3e	; 62
    1228:	f2 82       	std	Z+2, r15	; 0x02
    122a:	e1 82       	std	Z+1, r14	; 0x01
    122c:	82 d0       	rcall	.+260    	; 0x1332 <printf>
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
        }
        printf("\n\rYour choice : ");
    1232:	00 d0       	rcall	.+0      	; 0x1234 <handleAction+0x3f2>
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	12 96       	adiw	r26, 0x02	; 2
    123a:	9c 92       	st	X, r9
    123c:	8e 92       	st	-X, r8
    123e:	11 97       	sbiw	r26, 0x01	; 1
    1240:	78 d0       	rcall	.+240    	; 0x1332 <printf>
        receivedBuffer = 0;
    1242:	10 92 f0 03 	sts	0x03F0, r1
    1246:	01 2f       	mov	r16, r17
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	2d ce       	rjmp	.-934    	; 0xea8 <handleAction+0x66>

0000124e <main>:
    PORTD = 0b11100000 & pgm_read_byte(&(matrix[x][y][_PORTD]));
}

inline void clearLeds() {
    // Reset all ports
    DDRB = DDRC = DDRD = 0;
    124e:	1a b8       	out	0x0a, r1	; 10
    1250:	8a b1       	in	r24, 0x0a	; 10
    1252:	87 b9       	out	0x07, r24	; 7
    1254:	87 b1       	in	r24, 0x07	; 7
    1256:	84 b9       	out	0x04, r24	; 4
    PORTB = PORTC = PORTD = 0;
    1258:	1b b8       	out	0x0b, r1	; 11
    125a:	8b b1       	in	r24, 0x0b	; 11
    125c:	88 b9       	out	0x08, r24	; 8
    125e:	88 b1       	in	r24, 0x08	; 8
    1260:	85 b9       	out	0x05, r24	; 5
int main(void) {

	clearLeds();

    // Timer 0 configuration : Print message
    TIMSK0 |= (1<<TOIE0);
    1262:	ee e6       	ldi	r30, 0x6E	; 110
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	81 60       	ori	r24, 0x01	; 1
    126a:	80 83       	st	Z, r24
    TCCR0A = 0;
    126c:	14 bc       	out	0x24, r1	; 36
    TCCR0B |= ((0<<CS02) | (1<<CS01) | (1<<CS00));
    126e:	85 b5       	in	r24, 0x25	; 37
    1270:	83 60       	ori	r24, 0x03	; 3
    1272:	85 bd       	out	0x25, r24	; 37
    TCNT0 = 0;
    1274:	16 bc       	out	0x26, r1	; 38

    // Timer 1 configuration : Scroll message
    TIMSK1 |= (1<<TOIE1);
    1276:	ef e6       	ldi	r30, 0x6F	; 111
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	81 60       	ori	r24, 0x01	; 1
    127e:	80 83       	st	Z, r24
    TCCR1A = 0;
    1280:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= ((0<<CS12) | (1<<CS11) | (1<<CS10));
    1284:	e1 e8       	ldi	r30, 0x81	; 129
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	83 60       	ori	r24, 0x03	; 3
    128c:	80 83       	st	Z, r24
    TCCR1C  = 0;
    128e:	10 92 82 00 	sts	0x0082, r1
    TCNT1 = 0;
    1292:	10 92 85 00 	sts	0x0085, r1
    1296:	10 92 84 00 	sts	0x0084, r1

    // Timer 2 configuration
    TIMSK2 |= 0;
    129a:	e0 e7       	ldi	r30, 0x70	; 112
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 83       	st	Z, r24
    TCCR2A = 0;
    12a2:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B |= ((1<<CS22) | (1<<CS21) | (1<<CS20));
    12a6:	e1 eb       	ldi	r30, 0xB1	; 177
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	87 60       	ori	r24, 0x07	; 7
    12ae:	80 83       	st	Z, r24
    TCNT2 = 0;
    12b0:	10 92 b2 00 	sts	0x00B2, r1

    // Init ADC
    //ADMUX |= (0 << REFS1) | (0 << REFS0) | (1 << MUX2) | (1 << MUX1);
    ADMUX = 0b01100110;
    12b4:	86 e6       	ldi	r24, 0x66	; 102
    12b6:	80 93 7c 00 	sts	0x007C, r24

    //set prescaller and enable ADC
    ADCSRA |= (1 << ADEN) | (1 << ADIE);
    12ba:	ea e7       	ldi	r30, 0x7A	; 122
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	88 68       	ori	r24, 0x88	; 136
    12c2:	80 83       	st	Z, r24

    USART_Init();
    12c4:	38 da       	rcall	.-2960   	; 0x736 <USART_Init>
    stdout = &mystdout;
    12c6:	8c ec       	ldi	r24, 0xCC	; 204
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	90 93 46 04 	sts	0x0446, r25
    12ce:	80 93 45 04 	sts	0x0445, r24

    memset(message, 0, sizeof(message));
    12d2:	81 e5       	ldi	r24, 0x51	; 81
    12d4:	e1 ef       	ldi	r30, 0xF1	; 241
    12d6:	f3 e0       	ldi	r31, 0x03	; 3
    12d8:	df 01       	movw	r26, r30
    12da:	1d 92       	st	X+, r1
    12dc:	8a 95       	dec	r24
    12de:	e9 f7       	brne	.-6      	; 0x12da <main+0x8c>

#if INTERACTIVE_MODE
    current_message = 0;
    12e0:	10 92 ec 03 	sts	0x03EC, r1
#endif

    loadData();
    12e4:	b4 db       	rcall	.-2200   	; 0xa4e <loadData>

    sei();
    12e6:	78 94       	sei

    DDRD = 0;
    12e8:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0;
    12ea:	1b b8       	out	0x0b, r1	; 11

    handleAction();
    12ec:	aa dd       	rcall	.-1196   	; 0xe42 <handleAction>
}
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	08 95       	ret

000012f4 <__udivmodhi4>:
    12f4:	aa 1b       	sub	r26, r26
    12f6:	bb 1b       	sub	r27, r27
    12f8:	51 e1       	ldi	r21, 0x11	; 17
    12fa:	07 c0       	rjmp	.+14     	; 0x130a <__udivmodhi4_ep>

000012fc <__udivmodhi4_loop>:
    12fc:	aa 1f       	adc	r26, r26
    12fe:	bb 1f       	adc	r27, r27
    1300:	a6 17       	cp	r26, r22
    1302:	b7 07       	cpc	r27, r23
    1304:	10 f0       	brcs	.+4      	; 0x130a <__udivmodhi4_ep>
    1306:	a6 1b       	sub	r26, r22
    1308:	b7 0b       	sbc	r27, r23

0000130a <__udivmodhi4_ep>:
    130a:	88 1f       	adc	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	5a 95       	dec	r21
    1310:	a9 f7       	brne	.-22     	; 0x12fc <__udivmodhi4_loop>
    1312:	80 95       	com	r24
    1314:	90 95       	com	r25
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	08 95       	ret

0000131c <strcat>:
    131c:	fb 01       	movw	r30, r22
    131e:	dc 01       	movw	r26, r24
    1320:	0d 90       	ld	r0, X+
    1322:	00 20       	and	r0, r0
    1324:	e9 f7       	brne	.-6      	; 0x1320 <strcat+0x4>
    1326:	11 97       	sbiw	r26, 0x01	; 1
    1328:	01 90       	ld	r0, Z+
    132a:	0d 92       	st	X+, r0
    132c:	00 20       	and	r0, r0
    132e:	e1 f7       	brne	.-8      	; 0x1328 <strcat+0xc>
    1330:	08 95       	ret

00001332 <printf>:
    1332:	a0 e0       	ldi	r26, 0x00	; 0
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ee e9       	ldi	r30, 0x9E	; 158
    1338:	f9 e0       	ldi	r31, 0x09	; 9
    133a:	ce c2       	rjmp	.+1436   	; 0x18d8 <__prologue_saves__+0x20>
    133c:	fe 01       	movw	r30, r28
    133e:	35 96       	adiw	r30, 0x05	; 5
    1340:	61 91       	ld	r22, Z+
    1342:	71 91       	ld	r23, Z+
    1344:	80 91 45 04 	lds	r24, 0x0445
    1348:	90 91 46 04 	lds	r25, 0x0446
    134c:	af 01       	movw	r20, r30
    134e:	09 d0       	rcall	.+18     	; 0x1362 <vfprintf>
    1350:	20 96       	adiw	r28, 0x00	; 0
    1352:	e2 e0       	ldi	r30, 0x02	; 2
    1354:	dd c2       	rjmp	.+1466   	; 0x1910 <__epilogue_restores__+0x20>

00001356 <putchar>:
    1356:	60 91 45 04 	lds	r22, 0x0445
    135a:	70 91 46 04 	lds	r23, 0x0446
    135e:	22 d2       	rcall	.+1092   	; 0x17a4 <fputc>
    1360:	08 95       	ret

00001362 <vfprintf>:
    1362:	ac e0       	ldi	r26, 0x0C	; 12
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e6 eb       	ldi	r30, 0xB6	; 182
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	a7 c2       	rjmp	.+1358   	; 0x18ba <__prologue_saves__+0x2>
    136c:	6c 01       	movw	r12, r24
    136e:	2b 01       	movw	r4, r22
    1370:	8a 01       	movw	r16, r20
    1372:	fc 01       	movw	r30, r24
    1374:	17 82       	std	Z+7, r1	; 0x07
    1376:	16 82       	std	Z+6, r1	; 0x06
    1378:	83 81       	ldd	r24, Z+3	; 0x03
    137a:	81 fd       	sbrc	r24, 1
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <vfprintf+0x22>
    137e:	2f ef       	ldi	r18, 0xFF	; 255
    1380:	3f ef       	ldi	r19, 0xFF	; 255
    1382:	b5 c1       	rjmp	.+874    	; 0x16ee <vfprintf+0x38c>
    1384:	4e 01       	movw	r8, r28
    1386:	08 94       	sec
    1388:	81 1c       	adc	r8, r1
    138a:	91 1c       	adc	r9, r1
    138c:	6f e3       	ldi	r22, 0x3F	; 63
    138e:	36 2e       	mov	r3, r22
    1390:	f6 01       	movw	r30, r12
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	f2 01       	movw	r30, r4
    1396:	93 fd       	sbrc	r25, 3
    1398:	85 91       	lpm	r24, Z+
    139a:	93 ff       	sbrs	r25, 3
    139c:	81 91       	ld	r24, Z+
    139e:	2f 01       	movw	r4, r30
    13a0:	88 23       	and	r24, r24
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <vfprintf+0x44>
    13a4:	a1 c1       	rjmp	.+834    	; 0x16e8 <vfprintf+0x386>
    13a6:	85 32       	cpi	r24, 0x25	; 37
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <vfprintf+0x56>
    13aa:	93 fd       	sbrc	r25, 3
    13ac:	85 91       	lpm	r24, Z+
    13ae:	93 ff       	sbrs	r25, 3
    13b0:	81 91       	ld	r24, Z+
    13b2:	2f 01       	movw	r4, r30
    13b4:	85 32       	cpi	r24, 0x25	; 37
    13b6:	21 f4       	brne	.+8      	; 0x13c0 <vfprintf+0x5e>
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	b6 01       	movw	r22, r12
    13bc:	f3 d1       	rcall	.+998    	; 0x17a4 <fputc>
    13be:	e8 cf       	rjmp	.-48     	; 0x1390 <vfprintf+0x2e>
    13c0:	ee 24       	eor	r14, r14
    13c2:	ff 24       	eor	r15, r15
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	20 32       	cpi	r18, 0x20	; 32
    13c8:	b0 f4       	brcc	.+44     	; 0x13f6 <vfprintf+0x94>
    13ca:	8b 32       	cpi	r24, 0x2B	; 43
    13cc:	69 f0       	breq	.+26     	; 0x13e8 <vfprintf+0x86>
    13ce:	8c 32       	cpi	r24, 0x2C	; 44
    13d0:	28 f4       	brcc	.+10     	; 0x13dc <vfprintf+0x7a>
    13d2:	80 32       	cpi	r24, 0x20	; 32
    13d4:	51 f0       	breq	.+20     	; 0x13ea <vfprintf+0x88>
    13d6:	83 32       	cpi	r24, 0x23	; 35
    13d8:	71 f4       	brne	.+28     	; 0x13f6 <vfprintf+0x94>
    13da:	0b c0       	rjmp	.+22     	; 0x13f2 <vfprintf+0x90>
    13dc:	8d 32       	cpi	r24, 0x2D	; 45
    13de:	39 f0       	breq	.+14     	; 0x13ee <vfprintf+0x8c>
    13e0:	80 33       	cpi	r24, 0x30	; 48
    13e2:	49 f4       	brne	.+18     	; 0x13f6 <vfprintf+0x94>
    13e4:	21 60       	ori	r18, 0x01	; 1
    13e6:	2c c0       	rjmp	.+88     	; 0x1440 <vfprintf+0xde>
    13e8:	22 60       	ori	r18, 0x02	; 2
    13ea:	24 60       	ori	r18, 0x04	; 4
    13ec:	29 c0       	rjmp	.+82     	; 0x1440 <vfprintf+0xde>
    13ee:	28 60       	ori	r18, 0x08	; 8
    13f0:	27 c0       	rjmp	.+78     	; 0x1440 <vfprintf+0xde>
    13f2:	20 61       	ori	r18, 0x10	; 16
    13f4:	25 c0       	rjmp	.+74     	; 0x1440 <vfprintf+0xde>
    13f6:	27 fd       	sbrc	r18, 7
    13f8:	2c c0       	rjmp	.+88     	; 0x1452 <vfprintf+0xf0>
    13fa:	38 2f       	mov	r19, r24
    13fc:	30 53       	subi	r19, 0x30	; 48
    13fe:	3a 30       	cpi	r19, 0x0A	; 10
    1400:	98 f4       	brcc	.+38     	; 0x1428 <vfprintf+0xc6>
    1402:	26 ff       	sbrs	r18, 6
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <vfprintf+0xb4>
    1406:	8e 2d       	mov	r24, r14
    1408:	88 0f       	add	r24, r24
    140a:	e8 2e       	mov	r14, r24
    140c:	ee 0c       	add	r14, r14
    140e:	ee 0c       	add	r14, r14
    1410:	e8 0e       	add	r14, r24
    1412:	e3 0e       	add	r14, r19
    1414:	15 c0       	rjmp	.+42     	; 0x1440 <vfprintf+0xde>
    1416:	8f 2d       	mov	r24, r15
    1418:	88 0f       	add	r24, r24
    141a:	f8 2e       	mov	r15, r24
    141c:	ff 0c       	add	r15, r15
    141e:	ff 0c       	add	r15, r15
    1420:	f8 0e       	add	r15, r24
    1422:	f3 0e       	add	r15, r19
    1424:	20 62       	ori	r18, 0x20	; 32
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <vfprintf+0xde>
    1428:	8e 32       	cpi	r24, 0x2E	; 46
    142a:	21 f4       	brne	.+8      	; 0x1434 <vfprintf+0xd2>
    142c:	26 fd       	sbrc	r18, 6
    142e:	5c c1       	rjmp	.+696    	; 0x16e8 <vfprintf+0x386>
    1430:	20 64       	ori	r18, 0x40	; 64
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <vfprintf+0xde>
    1434:	8c 36       	cpi	r24, 0x6C	; 108
    1436:	11 f4       	brne	.+4      	; 0x143c <vfprintf+0xda>
    1438:	20 68       	ori	r18, 0x80	; 128
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <vfprintf+0xde>
    143c:	88 36       	cpi	r24, 0x68	; 104
    143e:	49 f4       	brne	.+18     	; 0x1452 <vfprintf+0xf0>
    1440:	f2 01       	movw	r30, r4
    1442:	93 fd       	sbrc	r25, 3
    1444:	85 91       	lpm	r24, Z+
    1446:	93 ff       	sbrs	r25, 3
    1448:	81 91       	ld	r24, Z+
    144a:	2f 01       	movw	r4, r30
    144c:	88 23       	and	r24, r24
    144e:	09 f0       	breq	.+2      	; 0x1452 <vfprintf+0xf0>
    1450:	ba cf       	rjmp	.-140    	; 0x13c6 <vfprintf+0x64>
    1452:	98 2f       	mov	r25, r24
    1454:	95 54       	subi	r25, 0x45	; 69
    1456:	93 30       	cpi	r25, 0x03	; 3
    1458:	18 f0       	brcs	.+6      	; 0x1460 <vfprintf+0xfe>
    145a:	90 52       	subi	r25, 0x20	; 32
    145c:	93 30       	cpi	r25, 0x03	; 3
    145e:	20 f4       	brcc	.+8      	; 0x1468 <vfprintf+0x106>
    1460:	0c 5f       	subi	r16, 0xFC	; 252
    1462:	1f 4f       	sbci	r17, 0xFF	; 255
    1464:	39 82       	std	Y+1, r3	; 0x01
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <vfprintf+0x120>
    1468:	83 36       	cpi	r24, 0x63	; 99
    146a:	31 f0       	breq	.+12     	; 0x1478 <vfprintf+0x116>
    146c:	83 37       	cpi	r24, 0x73	; 115
    146e:	71 f0       	breq	.+28     	; 0x148c <vfprintf+0x12a>
    1470:	83 35       	cpi	r24, 0x53	; 83
    1472:	09 f0       	breq	.+2      	; 0x1476 <vfprintf+0x114>
    1474:	54 c0       	rjmp	.+168    	; 0x151e <vfprintf+0x1bc>
    1476:	1d c0       	rjmp	.+58     	; 0x14b2 <vfprintf+0x150>
    1478:	f8 01       	movw	r30, r16
    147a:	80 81       	ld	r24, Z
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	0e 5f       	subi	r16, 0xFE	; 254
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	54 01       	movw	r10, r8
    1484:	51 e0       	ldi	r21, 0x01	; 1
    1486:	65 2e       	mov	r6, r21
    1488:	71 2c       	mov	r7, r1
    148a:	11 c0       	rjmp	.+34     	; 0x14ae <vfprintf+0x14c>
    148c:	f8 01       	movw	r30, r16
    148e:	a0 80       	ld	r10, Z
    1490:	b1 80       	ldd	r11, Z+1	; 0x01
    1492:	26 fd       	sbrc	r18, 6
    1494:	03 c0       	rjmp	.+6      	; 0x149c <vfprintf+0x13a>
    1496:	6f ef       	ldi	r22, 0xFF	; 255
    1498:	7f ef       	ldi	r23, 0xFF	; 255
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <vfprintf+0x13e>
    149c:	6e 2d       	mov	r22, r14
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	0e 5f       	subi	r16, 0xFE	; 254
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	c5 01       	movw	r24, r10
    14a6:	2c 87       	std	Y+12, r18	; 0x0c
    14a8:	72 d1       	rcall	.+740    	; 0x178e <strnlen>
    14aa:	3c 01       	movw	r6, r24
    14ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ae:	2f 77       	andi	r18, 0x7F	; 127
    14b0:	12 c0       	rjmp	.+36     	; 0x14d6 <vfprintf+0x174>
    14b2:	f8 01       	movw	r30, r16
    14b4:	a0 80       	ld	r10, Z
    14b6:	b1 80       	ldd	r11, Z+1	; 0x01
    14b8:	26 fd       	sbrc	r18, 6
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <vfprintf+0x160>
    14bc:	6f ef       	ldi	r22, 0xFF	; 255
    14be:	7f ef       	ldi	r23, 0xFF	; 255
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <vfprintf+0x164>
    14c2:	6e 2d       	mov	r22, r14
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	0e 5f       	subi	r16, 0xFE	; 254
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	c5 01       	movw	r24, r10
    14cc:	2c 87       	std	Y+12, r18	; 0x0c
    14ce:	54 d1       	rcall	.+680    	; 0x1778 <strnlen_P>
    14d0:	3c 01       	movw	r6, r24
    14d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14d4:	20 68       	ori	r18, 0x80	; 128
    14d6:	23 ff       	sbrs	r18, 3
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <vfprintf+0x188>
    14da:	1d c0       	rjmp	.+58     	; 0x1516 <vfprintf+0x1b4>
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	b6 01       	movw	r22, r12
    14e2:	2c 87       	std	Y+12, r18	; 0x0c
    14e4:	5f d1       	rcall	.+702    	; 0x17a4 <fputc>
    14e6:	fa 94       	dec	r15
    14e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ea:	8f 2d       	mov	r24, r15
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	68 16       	cp	r6, r24
    14f0:	79 06       	cpc	r7, r25
    14f2:	a0 f3       	brcs	.-24     	; 0x14dc <vfprintf+0x17a>
    14f4:	10 c0       	rjmp	.+32     	; 0x1516 <vfprintf+0x1b4>
    14f6:	f5 01       	movw	r30, r10
    14f8:	27 fd       	sbrc	r18, 7
    14fa:	85 91       	lpm	r24, Z+
    14fc:	27 ff       	sbrs	r18, 7
    14fe:	81 91       	ld	r24, Z+
    1500:	5f 01       	movw	r10, r30
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	b6 01       	movw	r22, r12
    1506:	2c 87       	std	Y+12, r18	; 0x0c
    1508:	4d d1       	rcall	.+666    	; 0x17a4 <fputc>
    150a:	2c 85       	ldd	r18, Y+12	; 0x0c
    150c:	f1 10       	cpse	r15, r1
    150e:	fa 94       	dec	r15
    1510:	08 94       	sec
    1512:	61 08       	sbc	r6, r1
    1514:	71 08       	sbc	r7, r1
    1516:	61 14       	cp	r6, r1
    1518:	71 04       	cpc	r7, r1
    151a:	69 f7       	brne	.-38     	; 0x14f6 <vfprintf+0x194>
    151c:	e2 c0       	rjmp	.+452    	; 0x16e2 <vfprintf+0x380>
    151e:	84 36       	cpi	r24, 0x64	; 100
    1520:	11 f0       	breq	.+4      	; 0x1526 <vfprintf+0x1c4>
    1522:	89 36       	cpi	r24, 0x69	; 105
    1524:	49 f5       	brne	.+82     	; 0x1578 <vfprintf+0x216>
    1526:	27 ff       	sbrs	r18, 7
    1528:	08 c0       	rjmp	.+16     	; 0x153a <vfprintf+0x1d8>
    152a:	f8 01       	movw	r30, r16
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	0c 5f       	subi	r16, 0xFC	; 252
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	0a c0       	rjmp	.+20     	; 0x154e <vfprintf+0x1ec>
    153a:	f8 01       	movw	r30, r16
    153c:	40 81       	ld	r20, Z
    153e:	51 81       	ldd	r21, Z+1	; 0x01
    1540:	ba 01       	movw	r22, r20
    1542:	88 27       	eor	r24, r24
    1544:	77 fd       	sbrc	r23, 7
    1546:	80 95       	com	r24
    1548:	98 2f       	mov	r25, r24
    154a:	0e 5f       	subi	r16, 0xFE	; 254
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	4f e6       	ldi	r20, 0x6F	; 111
    1550:	b4 2e       	mov	r11, r20
    1552:	b2 22       	and	r11, r18
    1554:	97 ff       	sbrs	r25, 7
    1556:	09 c0       	rjmp	.+18     	; 0x156a <vfprintf+0x208>
    1558:	90 95       	com	r25
    155a:	80 95       	com	r24
    155c:	70 95       	com	r23
    155e:	61 95       	neg	r22
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	8f 4f       	sbci	r24, 0xFF	; 255
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	f0 e8       	ldi	r31, 0x80	; 128
    1568:	bf 2a       	or	r11, r31
    156a:	a4 01       	movw	r20, r8
    156c:	2a e0       	ldi	r18, 0x0A	; 10
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	45 d1       	rcall	.+650    	; 0x17fc <__ultoa_invert>
    1572:	78 2e       	mov	r7, r24
    1574:	78 18       	sub	r7, r8
    1576:	42 c0       	rjmp	.+132    	; 0x15fc <vfprintf+0x29a>
    1578:	85 37       	cpi	r24, 0x75	; 117
    157a:	31 f4       	brne	.+12     	; 0x1588 <vfprintf+0x226>
    157c:	3f ee       	ldi	r19, 0xEF	; 239
    157e:	b3 2e       	mov	r11, r19
    1580:	b2 22       	and	r11, r18
    1582:	2a e0       	ldi	r18, 0x0A	; 10
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <vfprintf+0x26c>
    1588:	99 ef       	ldi	r25, 0xF9	; 249
    158a:	b9 2e       	mov	r11, r25
    158c:	b2 22       	and	r11, r18
    158e:	8f 36       	cpi	r24, 0x6F	; 111
    1590:	61 f0       	breq	.+24     	; 0x15aa <vfprintf+0x248>
    1592:	80 37       	cpi	r24, 0x70	; 112
    1594:	20 f4       	brcc	.+8      	; 0x159e <vfprintf+0x23c>
    1596:	88 35       	cpi	r24, 0x58	; 88
    1598:	09 f0       	breq	.+2      	; 0x159c <vfprintf+0x23a>
    159a:	a6 c0       	rjmp	.+332    	; 0x16e8 <vfprintf+0x386>
    159c:	12 c0       	rjmp	.+36     	; 0x15c2 <vfprintf+0x260>
    159e:	80 37       	cpi	r24, 0x70	; 112
    15a0:	39 f0       	breq	.+14     	; 0x15b0 <vfprintf+0x24e>
    15a2:	88 37       	cpi	r24, 0x78	; 120
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <vfprintf+0x246>
    15a6:	a0 c0       	rjmp	.+320    	; 0x16e8 <vfprintf+0x386>
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <vfprintf+0x252>
    15aa:	28 e0       	ldi	r18, 0x08	; 8
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <vfprintf+0x26c>
    15b0:	20 e1       	ldi	r18, 0x10	; 16
    15b2:	b2 2a       	or	r11, r18
    15b4:	b4 fe       	sbrs	r11, 4
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <vfprintf+0x25a>
    15b8:	84 e0       	ldi	r24, 0x04	; 4
    15ba:	b8 2a       	or	r11, r24
    15bc:	20 e1       	ldi	r18, 0x10	; 16
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x26c>
    15c2:	b4 fe       	sbrs	r11, 4
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <vfprintf+0x268>
    15c6:	e6 e0       	ldi	r30, 0x06	; 6
    15c8:	be 2a       	or	r11, r30
    15ca:	20 e1       	ldi	r18, 0x10	; 16
    15cc:	32 e0       	ldi	r19, 0x02	; 2
    15ce:	b7 fe       	sbrs	r11, 7
    15d0:	08 c0       	rjmp	.+16     	; 0x15e2 <vfprintf+0x280>
    15d2:	f8 01       	movw	r30, r16
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	0c 5f       	subi	r16, 0xFC	; 252
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <vfprintf+0x28e>
    15e2:	f8 01       	movw	r30, r16
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 5f       	subi	r16, 0xFE	; 254
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	a4 01       	movw	r20, r8
    15f2:	04 d1       	rcall	.+520    	; 0x17fc <__ultoa_invert>
    15f4:	78 2e       	mov	r7, r24
    15f6:	78 18       	sub	r7, r8
    15f8:	ff e7       	ldi	r31, 0x7F	; 127
    15fa:	bf 22       	and	r11, r31
    15fc:	b6 fe       	sbrs	r11, 6
    15fe:	0b c0       	rjmp	.+22     	; 0x1616 <vfprintf+0x2b4>
    1600:	2e ef       	ldi	r18, 0xFE	; 254
    1602:	b2 22       	and	r11, r18
    1604:	7e 14       	cp	r7, r14
    1606:	38 f4       	brcc	.+14     	; 0x1616 <vfprintf+0x2b4>
    1608:	b4 fe       	sbrs	r11, 4
    160a:	07 c0       	rjmp	.+14     	; 0x161a <vfprintf+0x2b8>
    160c:	b2 fc       	sbrc	r11, 2
    160e:	05 c0       	rjmp	.+10     	; 0x161a <vfprintf+0x2b8>
    1610:	8f ee       	ldi	r24, 0xEF	; 239
    1612:	b8 22       	and	r11, r24
    1614:	02 c0       	rjmp	.+4      	; 0x161a <vfprintf+0x2b8>
    1616:	a7 2c       	mov	r10, r7
    1618:	01 c0       	rjmp	.+2      	; 0x161c <vfprintf+0x2ba>
    161a:	ae 2c       	mov	r10, r14
    161c:	8b 2d       	mov	r24, r11
    161e:	b4 fe       	sbrs	r11, 4
    1620:	0d c0       	rjmp	.+26     	; 0x163c <vfprintf+0x2da>
    1622:	fe 01       	movw	r30, r28
    1624:	e7 0d       	add	r30, r7
    1626:	f1 1d       	adc	r31, r1
    1628:	90 81       	ld	r25, Z
    162a:	90 33       	cpi	r25, 0x30	; 48
    162c:	19 f4       	brne	.+6      	; 0x1634 <vfprintf+0x2d2>
    162e:	e9 ee       	ldi	r30, 0xE9	; 233
    1630:	be 22       	and	r11, r30
    1632:	07 c0       	rjmp	.+14     	; 0x1642 <vfprintf+0x2e0>
    1634:	a3 94       	inc	r10
    1636:	b2 fe       	sbrs	r11, 2
    1638:	04 c0       	rjmp	.+8      	; 0x1642 <vfprintf+0x2e0>
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <vfprintf+0x2de>
    163c:	86 78       	andi	r24, 0x86	; 134
    163e:	09 f0       	breq	.+2      	; 0x1642 <vfprintf+0x2e0>
    1640:	a3 94       	inc	r10
    1642:	6b 2c       	mov	r6, r11
    1644:	b3 fc       	sbrc	r11, 3
    1646:	13 c0       	rjmp	.+38     	; 0x166e <vfprintf+0x30c>
    1648:	b0 fe       	sbrs	r11, 0
    164a:	0e c0       	rjmp	.+28     	; 0x1668 <vfprintf+0x306>
    164c:	af 14       	cp	r10, r15
    164e:	10 f0       	brcs	.+4      	; 0x1654 <vfprintf+0x2f2>
    1650:	e7 2c       	mov	r14, r7
    1652:	0a c0       	rjmp	.+20     	; 0x1668 <vfprintf+0x306>
    1654:	e7 2c       	mov	r14, r7
    1656:	ef 0c       	add	r14, r15
    1658:	ea 18       	sub	r14, r10
    165a:	af 2c       	mov	r10, r15
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <vfprintf+0x306>
    165e:	80 e2       	ldi	r24, 0x20	; 32
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	b6 01       	movw	r22, r12
    1664:	9f d0       	rcall	.+318    	; 0x17a4 <fputc>
    1666:	a3 94       	inc	r10
    1668:	af 14       	cp	r10, r15
    166a:	c8 f3       	brcs	.-14     	; 0x165e <vfprintf+0x2fc>
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <vfprintf+0x314>
    166e:	af 14       	cp	r10, r15
    1670:	10 f4       	brcc	.+4      	; 0x1676 <vfprintf+0x314>
    1672:	fa 18       	sub	r15, r10
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <vfprintf+0x316>
    1676:	ff 24       	eor	r15, r15
    1678:	64 fe       	sbrs	r6, 4
    167a:	0e c0       	rjmp	.+28     	; 0x1698 <vfprintf+0x336>
    167c:	80 e3       	ldi	r24, 0x30	; 48
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	b6 01       	movw	r22, r12
    1682:	90 d0       	rcall	.+288    	; 0x17a4 <fputc>
    1684:	62 fe       	sbrs	r6, 2
    1686:	1b c0       	rjmp	.+54     	; 0x16be <vfprintf+0x35c>
    1688:	61 fc       	sbrc	r6, 1
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <vfprintf+0x330>
    168c:	88 e7       	ldi	r24, 0x78	; 120
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <vfprintf+0x34c>
    1692:	88 e5       	ldi	r24, 0x58	; 88
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0b c0       	rjmp	.+22     	; 0x16ae <vfprintf+0x34c>
    1698:	86 2d       	mov	r24, r6
    169a:	86 78       	andi	r24, 0x86	; 134
    169c:	81 f0       	breq	.+32     	; 0x16be <vfprintf+0x35c>
    169e:	61 fe       	sbrs	r6, 1
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x344>
    16a2:	8b e2       	ldi	r24, 0x2B	; 43
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <vfprintf+0x346>
    16a6:	80 e2       	ldi	r24, 0x20	; 32
    16a8:	b7 fc       	sbrc	r11, 7
    16aa:	8d e2       	ldi	r24, 0x2D	; 45
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	b6 01       	movw	r22, r12
    16b0:	79 d0       	rcall	.+242    	; 0x17a4 <fputc>
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x35c>
    16b4:	80 e3       	ldi	r24, 0x30	; 48
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	b6 01       	movw	r22, r12
    16ba:	74 d0       	rcall	.+232    	; 0x17a4 <fputc>
    16bc:	ea 94       	dec	r14
    16be:	7e 14       	cp	r7, r14
    16c0:	c8 f3       	brcs	.-14     	; 0x16b4 <vfprintf+0x352>
    16c2:	7a 94       	dec	r7
    16c4:	f4 01       	movw	r30, r8
    16c6:	e7 0d       	add	r30, r7
    16c8:	f1 1d       	adc	r31, r1
    16ca:	80 81       	ld	r24, Z
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	b6 01       	movw	r22, r12
    16d0:	69 d0       	rcall	.+210    	; 0x17a4 <fputc>
    16d2:	77 20       	and	r7, r7
    16d4:	b1 f7       	brne	.-20     	; 0x16c2 <vfprintf+0x360>
    16d6:	05 c0       	rjmp	.+10     	; 0x16e2 <vfprintf+0x380>
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	b6 01       	movw	r22, r12
    16de:	62 d0       	rcall	.+196    	; 0x17a4 <fputc>
    16e0:	fa 94       	dec	r15
    16e2:	ff 20       	and	r15, r15
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <vfprintf+0x376>
    16e6:	54 ce       	rjmp	.-856    	; 0x1390 <vfprintf+0x2e>
    16e8:	f6 01       	movw	r30, r12
    16ea:	26 81       	ldd	r18, Z+6	; 0x06
    16ec:	37 81       	ldd	r19, Z+7	; 0x07
    16ee:	c9 01       	movw	r24, r18
    16f0:	2c 96       	adiw	r28, 0x0c	; 12
    16f2:	e1 e1       	ldi	r30, 0x11	; 17
    16f4:	fe c0       	rjmp	.+508    	; 0x18f2 <__epilogue_restores__+0x2>

000016f6 <__eerd_block_m88pa>:
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22

000016fa <__eerd_blraw_m88pa>:
    16fa:	fc 01       	movw	r30, r24
    16fc:	f9 99       	sbic	0x1f, 1	; 31
    16fe:	fe cf       	rjmp	.-4      	; 0x16fc <__eerd_blraw_m88pa+0x2>
    1700:	06 c0       	rjmp	.+12     	; 0x170e <__eerd_blraw_m88pa+0x14>
    1702:	f2 bd       	out	0x22, r31	; 34
    1704:	e1 bd       	out	0x21, r30	; 33
    1706:	f8 9a       	sbi	0x1f, 0	; 31
    1708:	31 96       	adiw	r30, 0x01	; 1
    170a:	00 b4       	in	r0, 0x20	; 32
    170c:	0d 92       	st	X+, r0
    170e:	41 50       	subi	r20, 0x01	; 1
    1710:	50 40       	sbci	r21, 0x00	; 0
    1712:	b8 f7       	brcc	.-18     	; 0x1702 <__eerd_blraw_m88pa+0x8>
    1714:	08 95       	ret

00001716 <__eerd_byte_m88pa>:
    1716:	f9 99       	sbic	0x1f, 1	; 31
    1718:	fe cf       	rjmp	.-4      	; 0x1716 <__eerd_byte_m88pa>
    171a:	92 bd       	out	0x22, r25	; 34
    171c:	81 bd       	out	0x21, r24	; 33
    171e:	f8 9a       	sbi	0x1f, 0	; 31
    1720:	99 27       	eor	r25, r25
    1722:	80 b5       	in	r24, 0x20	; 32
    1724:	08 95       	ret

00001726 <__eeupd_byte_m88pa>:
    1726:	26 2f       	mov	r18, r22

00001728 <__eeupd_r18_m88pa>:
    1728:	f9 99       	sbic	0x1f, 1	; 31
    172a:	fe cf       	rjmp	.-4      	; 0x1728 <__eeupd_r18_m88pa>
    172c:	92 bd       	out	0x22, r25	; 34
    172e:	81 bd       	out	0x21, r24	; 33
    1730:	f8 9a       	sbi	0x1f, 0	; 31
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	00 b4       	in	r0, 0x20	; 32
    1736:	02 16       	cp	r0, r18
    1738:	39 f0       	breq	.+14     	; 0x1748 <__eeupd_r18_m88pa+0x20>
    173a:	1f ba       	out	0x1f, r1	; 31
    173c:	20 bd       	out	0x20, r18	; 32
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	fa 9a       	sbi	0x1f, 2	; 31
    1744:	f9 9a       	sbi	0x1f, 1	; 31
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	08 95       	ret

0000174a <__eewr_block_m88pa>:
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <__eewr_block_m88pa+0xa>
    1750:	2d 91       	ld	r18, X+
    1752:	05 d0       	rcall	.+10     	; 0x175e <__eewr_r18_m88pa>
    1754:	41 50       	subi	r20, 0x01	; 1
    1756:	50 40       	sbci	r21, 0x00	; 0
    1758:	d8 f7       	brcc	.-10     	; 0x1750 <__eewr_block_m88pa+0x6>
    175a:	08 95       	ret

0000175c <__eewr_byte_m88pa>:
    175c:	26 2f       	mov	r18, r22

0000175e <__eewr_r18_m88pa>:
    175e:	f9 99       	sbic	0x1f, 1	; 31
    1760:	fe cf       	rjmp	.-4      	; 0x175e <__eewr_r18_m88pa>
    1762:	1f ba       	out	0x1f, r1	; 31
    1764:	92 bd       	out	0x22, r25	; 34
    1766:	81 bd       	out	0x21, r24	; 33
    1768:	20 bd       	out	0x20, r18	; 32
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	fa 9a       	sbi	0x1f, 2	; 31
    1770:	f9 9a       	sbi	0x1f, 1	; 31
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	08 95       	ret

00001778 <strnlen_P>:
    1778:	fc 01       	movw	r30, r24
    177a:	05 90       	lpm	r0, Z+
    177c:	61 50       	subi	r22, 0x01	; 1
    177e:	70 40       	sbci	r23, 0x00	; 0
    1780:	01 10       	cpse	r0, r1
    1782:	d8 f7       	brcc	.-10     	; 0x177a <strnlen_P+0x2>
    1784:	80 95       	com	r24
    1786:	90 95       	com	r25
    1788:	8e 0f       	add	r24, r30
    178a:	9f 1f       	adc	r25, r31
    178c:	08 95       	ret

0000178e <strnlen>:
    178e:	fc 01       	movw	r30, r24
    1790:	61 50       	subi	r22, 0x01	; 1
    1792:	70 40       	sbci	r23, 0x00	; 0
    1794:	01 90       	ld	r0, Z+
    1796:	01 10       	cpse	r0, r1
    1798:	d8 f7       	brcc	.-10     	; 0x1790 <strnlen+0x2>
    179a:	80 95       	com	r24
    179c:	90 95       	com	r25
    179e:	8e 0f       	add	r24, r30
    17a0:	9f 1f       	adc	r25, r31
    17a2:	08 95       	ret

000017a4 <fputc>:
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	8c 01       	movw	r16, r24
    17ae:	eb 01       	movw	r28, r22
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	81 ff       	sbrs	r24, 1
    17b4:	1b c0       	rjmp	.+54     	; 0x17ec <fputc+0x48>
    17b6:	82 ff       	sbrs	r24, 2
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <fputc+0x30>
    17ba:	2e 81       	ldd	r18, Y+6	; 0x06
    17bc:	3f 81       	ldd	r19, Y+7	; 0x07
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	28 17       	cp	r18, r24
    17c4:	39 07       	cpc	r19, r25
    17c6:	64 f4       	brge	.+24     	; 0x17e0 <fputc+0x3c>
    17c8:	e8 81       	ld	r30, Y
    17ca:	f9 81       	ldd	r31, Y+1	; 0x01
    17cc:	01 93       	st	Z+, r16
    17ce:	f9 83       	std	Y+1, r31	; 0x01
    17d0:	e8 83       	st	Y, r30
    17d2:	06 c0       	rjmp	.+12     	; 0x17e0 <fputc+0x3c>
    17d4:	e8 85       	ldd	r30, Y+8	; 0x08
    17d6:	f9 85       	ldd	r31, Y+9	; 0x09
    17d8:	80 2f       	mov	r24, r16
    17da:	09 95       	icall
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	31 f4       	brne	.+12     	; 0x17ec <fputc+0x48>
    17e0:	8e 81       	ldd	r24, Y+6	; 0x06
    17e2:	9f 81       	ldd	r25, Y+7	; 0x07
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	9f 83       	std	Y+7, r25	; 0x07
    17e8:	8e 83       	std	Y+6, r24	; 0x06
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <fputc+0x4c>
    17ec:	0f ef       	ldi	r16, 0xFF	; 255
    17ee:	1f ef       	ldi	r17, 0xFF	; 255
    17f0:	c8 01       	movw	r24, r16
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	08 95       	ret

000017fc <__ultoa_invert>:
    17fc:	fa 01       	movw	r30, r20
    17fe:	aa 27       	eor	r26, r26
    1800:	28 30       	cpi	r18, 0x08	; 8
    1802:	51 f1       	breq	.+84     	; 0x1858 <__ultoa_invert+0x5c>
    1804:	20 31       	cpi	r18, 0x10	; 16
    1806:	81 f1       	breq	.+96     	; 0x1868 <__ultoa_invert+0x6c>
    1808:	e8 94       	clt
    180a:	6f 93       	push	r22
    180c:	6e 7f       	andi	r22, 0xFE	; 254
    180e:	6e 5f       	subi	r22, 0xFE	; 254
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	8f 4f       	sbci	r24, 0xFF	; 255
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	af 4f       	sbci	r26, 0xFF	; 255
    1818:	b1 e0       	ldi	r27, 0x01	; 1
    181a:	3e d0       	rcall	.+124    	; 0x1898 <__ultoa_invert+0x9c>
    181c:	b4 e0       	ldi	r27, 0x04	; 4
    181e:	3c d0       	rcall	.+120    	; 0x1898 <__ultoa_invert+0x9c>
    1820:	67 0f       	add	r22, r23
    1822:	78 1f       	adc	r23, r24
    1824:	89 1f       	adc	r24, r25
    1826:	9a 1f       	adc	r25, r26
    1828:	a1 1d       	adc	r26, r1
    182a:	68 0f       	add	r22, r24
    182c:	79 1f       	adc	r23, r25
    182e:	8a 1f       	adc	r24, r26
    1830:	91 1d       	adc	r25, r1
    1832:	a1 1d       	adc	r26, r1
    1834:	6a 0f       	add	r22, r26
    1836:	71 1d       	adc	r23, r1
    1838:	81 1d       	adc	r24, r1
    183a:	91 1d       	adc	r25, r1
    183c:	a1 1d       	adc	r26, r1
    183e:	20 d0       	rcall	.+64     	; 0x1880 <__ultoa_invert+0x84>
    1840:	09 f4       	brne	.+2      	; 0x1844 <__ultoa_invert+0x48>
    1842:	68 94       	set
    1844:	3f 91       	pop	r19
    1846:	2a e0       	ldi	r18, 0x0A	; 10
    1848:	26 9f       	mul	r18, r22
    184a:	11 24       	eor	r1, r1
    184c:	30 19       	sub	r19, r0
    184e:	30 5d       	subi	r19, 0xD0	; 208
    1850:	31 93       	st	Z+, r19
    1852:	de f6       	brtc	.-74     	; 0x180a <__ultoa_invert+0xe>
    1854:	cf 01       	movw	r24, r30
    1856:	08 95       	ret
    1858:	46 2f       	mov	r20, r22
    185a:	47 70       	andi	r20, 0x07	; 7
    185c:	40 5d       	subi	r20, 0xD0	; 208
    185e:	41 93       	st	Z+, r20
    1860:	b3 e0       	ldi	r27, 0x03	; 3
    1862:	0f d0       	rcall	.+30     	; 0x1882 <__ultoa_invert+0x86>
    1864:	c9 f7       	brne	.-14     	; 0x1858 <__ultoa_invert+0x5c>
    1866:	f6 cf       	rjmp	.-20     	; 0x1854 <__ultoa_invert+0x58>
    1868:	46 2f       	mov	r20, r22
    186a:	4f 70       	andi	r20, 0x0F	; 15
    186c:	40 5d       	subi	r20, 0xD0	; 208
    186e:	4a 33       	cpi	r20, 0x3A	; 58
    1870:	18 f0       	brcs	.+6      	; 0x1878 <__ultoa_invert+0x7c>
    1872:	49 5d       	subi	r20, 0xD9	; 217
    1874:	31 fd       	sbrc	r19, 1
    1876:	40 52       	subi	r20, 0x20	; 32
    1878:	41 93       	st	Z+, r20
    187a:	02 d0       	rcall	.+4      	; 0x1880 <__ultoa_invert+0x84>
    187c:	a9 f7       	brne	.-22     	; 0x1868 <__ultoa_invert+0x6c>
    187e:	ea cf       	rjmp	.-44     	; 0x1854 <__ultoa_invert+0x58>
    1880:	b4 e0       	ldi	r27, 0x04	; 4
    1882:	a6 95       	lsr	r26
    1884:	97 95       	ror	r25
    1886:	87 95       	ror	r24
    1888:	77 95       	ror	r23
    188a:	67 95       	ror	r22
    188c:	ba 95       	dec	r27
    188e:	c9 f7       	brne	.-14     	; 0x1882 <__ultoa_invert+0x86>
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	61 05       	cpc	r22, r1
    1894:	71 05       	cpc	r23, r1
    1896:	08 95       	ret
    1898:	9b 01       	movw	r18, r22
    189a:	ac 01       	movw	r20, r24
    189c:	0a 2e       	mov	r0, r26
    189e:	06 94       	lsr	r0
    18a0:	57 95       	ror	r21
    18a2:	47 95       	ror	r20
    18a4:	37 95       	ror	r19
    18a6:	27 95       	ror	r18
    18a8:	ba 95       	dec	r27
    18aa:	c9 f7       	brne	.-14     	; 0x189e <__ultoa_invert+0xa2>
    18ac:	62 0f       	add	r22, r18
    18ae:	73 1f       	adc	r23, r19
    18b0:	84 1f       	adc	r24, r20
    18b2:	95 1f       	adc	r25, r21
    18b4:	a0 1d       	adc	r26, r0
    18b6:	08 95       	ret

000018b8 <__prologue_saves__>:
    18b8:	2f 92       	push	r2
    18ba:	3f 92       	push	r3
    18bc:	4f 92       	push	r4
    18be:	5f 92       	push	r5
    18c0:	6f 92       	push	r6
    18c2:	7f 92       	push	r7
    18c4:	8f 92       	push	r8
    18c6:	9f 92       	push	r9
    18c8:	af 92       	push	r10
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	ca 1b       	sub	r28, r26
    18e2:	db 0b       	sbc	r29, r27
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	09 94       	ijmp

000018f0 <__epilogue_restores__>:
    18f0:	2a 88       	ldd	r2, Y+18	; 0x12
    18f2:	39 88       	ldd	r3, Y+17	; 0x11
    18f4:	48 88       	ldd	r4, Y+16	; 0x10
    18f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    18f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    18fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    18fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    18fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1900:	aa 84       	ldd	r10, Y+10	; 0x0a
    1902:	b9 84       	ldd	r11, Y+9	; 0x09
    1904:	c8 84       	ldd	r12, Y+8	; 0x08
    1906:	df 80       	ldd	r13, Y+7	; 0x07
    1908:	ee 80       	ldd	r14, Y+6	; 0x06
    190a:	fd 80       	ldd	r15, Y+5	; 0x05
    190c:	0c 81       	ldd	r16, Y+4	; 0x04
    190e:	1b 81       	ldd	r17, Y+3	; 0x03
    1910:	aa 81       	ldd	r26, Y+2	; 0x02
    1912:	b9 81       	ldd	r27, Y+1	; 0x01
    1914:	ce 0f       	add	r28, r30
    1916:	d1 1d       	adc	r29, r1
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	ed 01       	movw	r28, r26
    1924:	08 95       	ret

00001926 <_exit>:
    1926:	f8 94       	cli

00001928 <__stop_program>:
    1928:	ff cf       	rjmp	.-2      	; 0x1928 <__stop_program>
