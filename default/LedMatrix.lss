
LedMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  00001924  000019b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016f  00800306  00800306  00001bbe  2**0
                  ALLOC
  3 .stab         000012e4  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004b4  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002ca  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000152d  00000000  00000000  000036e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009af  00000000  00000000  00004c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001559  00000000  00000000  000055be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00006b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000558  00000000  00000000  00006c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a7d  00000000  00000000  000071f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00007c6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6a c3       	rjmp	.+1748   	; 0x6d6 <__ctors_end>
       2:	84 c3       	rjmp	.+1800   	; 0x70c <__bad_interrupt>
       4:	83 c3       	rjmp	.+1798   	; 0x70c <__bad_interrupt>
       6:	82 c3       	rjmp	.+1796   	; 0x70c <__bad_interrupt>
       8:	81 c3       	rjmp	.+1794   	; 0x70c <__bad_interrupt>
       a:	80 c3       	rjmp	.+1792   	; 0x70c <__bad_interrupt>
       c:	7f c3       	rjmp	.+1790   	; 0x70c <__bad_interrupt>
       e:	7e c3       	rjmp	.+1788   	; 0x70c <__bad_interrupt>
      10:	7d c3       	rjmp	.+1786   	; 0x70c <__bad_interrupt>
      12:	93 c5       	rjmp	.+2854   	; 0xb3a <__vector_9>
      14:	7b c3       	rjmp	.+1782   	; 0x70c <__bad_interrupt>
      16:	7a c3       	rjmp	.+1780   	; 0x70c <__bad_interrupt>
      18:	79 c3       	rjmp	.+1778   	; 0x70c <__bad_interrupt>
      1a:	c2 c4       	rjmp	.+2436   	; 0x9a0 <__vector_13>
      1c:	77 c3       	rjmp	.+1774   	; 0x70c <__bad_interrupt>
      1e:	76 c3       	rjmp	.+1772   	; 0x70c <__bad_interrupt>
      20:	ae c3       	rjmp	.+1884   	; 0x77e <__vector_16>
      22:	74 c3       	rjmp	.+1768   	; 0x70c <__bad_interrupt>
      24:	74 c3       	rjmp	.+1768   	; 0x70e <__vector_18>
      26:	72 c3       	rjmp	.+1764   	; 0x70c <__bad_interrupt>
      28:	71 c3       	rjmp	.+1762   	; 0x70c <__bad_interrupt>
      2a:	14 c5       	rjmp	.+2600   	; 0xa54 <__vector_21>
      2c:	6f c3       	rjmp	.+1758   	; 0x70c <__bad_interrupt>
      2e:	6e c3       	rjmp	.+1756   	; 0x70c <__bad_interrupt>
      30:	6d c3       	rjmp	.+1754   	; 0x70c <__bad_interrupt>
      32:	6c c3       	rjmp	.+1752   	; 0x70c <__bad_interrupt>

00000034 <matrix>:
      34:	04 04 00 04 00 00 02 04 00 02 00 00 01 04 00 01     ................
      44:	00 00 00 04 80 00 00 80 00 04 20 00 00 20 80 04     .......... .. ..
      54:	00 80 00 00 40 04 00 40 00 00 04 00 40 00 00 40     ....@..@....@..@
      64:	02 00 40 00 00 40 01 00 40 00 00 40 00 00 c0 00     ..@..@..@..@....
      74:	00 40 00 00 60 00 00 40 80 00 40 00 00 40 40 00     .@..`..@..@..@@.
      84:	40 00 00 40 04 00 40 04 00 00 02 00 40 02 00 00     @..@..@.....@...
      94:	01 00 40 01 00 00 00 00 c0 00 00 80 00 00 60 00     ..@...........`.
      a4:	00 20 80 00 40 80 00 00 40 00 40 40 00 00 0c 00     . ..@...@.@@....
      b4:	00 08 00 00 0a 00 00 08 00 00 09 00 00 08 00 00     ................
      c4:	08 00 80 08 00 00 08 00 20 08 00 00 88 00 00 08     ........ .......
      d4:	00 00 48 00 00 08 00 00 0c 00 00 04 00 00 0a 00     ..H.............
      e4:	00 02 00 00 09 00 00 01 00 00 08 00 80 00 00 80     ................
      f4:	08 00 20 00 00 20 88 00 00 80 00 00 48 00 00 40     .. .. ......H..@
     104:	00 00 14 00 00 10 00 00 12 00 00 10 00 00 11 00     ................
     114:	00 10 00 00 10 00 80 10 00 00 10 00 20 10 00 00     ............ ...
     124:	90 00 00 10 00 00 50 00 00 10 00 00 14 00 00 04     ......P.........
     134:	00 00 12 00 00 02 00 00 11 00 00 01 00 00 10 00     ................
     144:	80 00 00 80 10 00 20 00 00 20 90 00 00 80 00 00     ...... .. ......
     154:	50 00 00 40 00 00 24 00 00 20 00 00 22 00 00 20     P..@..$.. ..".. 
     164:	00 00 21 00 00 20 00 00 20 00 80 20 00 00 20 00     ..!.. .. .. .. .
     174:	20 20 00 00 a0 00 00 20 00 00 60 00 00 20 00 00       ..... ..`.. ..
     184:	24 00 00 04 00 00 22 00 00 02 00 00 21 00 00 01     $.....".....!...
     194:	00 00 20 00 80 00 00 80 20 00 20 00 00 20 a0 00     .. ..... . .. ..
     1a4:	00 80 00 00 60 00 00 40 00 00 04 01 00 00 01 00     ....`..@........
     1b4:	02 01 00 00 01 00 01 01 00 00 01 00 00 01 80 00     ................
     1c4:	01 00 00 01 20 00 01 00 80 01 00 00 01 00 40 01     .... .........@.
     1d4:	00 00 01 00 04 01 00 04 00 00 02 01 00 02 00 00     ................
     1e4:	01 01 00 01 00 00 00 01 80 00 00 80 00 01 20 00     .............. .
     1f4:	00 20 80 01 00 80 00 00 40 01 00 40 00 00 04 08     . ......@..@....
     204:	00 00 08 00 02 08 00 00 08 00 01 08 00 00 08 00     ................
     214:	00 08 80 00 08 00 00 08 20 00 08 00 80 08 00 00     ........ .......
     224:	08 00 40 08 00 00 08 00 04 08 00 04 00 00 02 08     ..@.............
     234:	00 02 00 00 01 08 00 01 00 00 00 08 80 00 00 80     ................
     244:	00 08 20 00 00 20 80 08 00 80 00 00 40 08 00 40     .. .. ......@..@
     254:	00 00 04 02 00 00 02 00 02 02 00 00 02 00 01 02     ................
     264:	00 00 02 00 00 02 80 00 02 00 00 02 20 00 02 00     ............ ...
     274:	80 02 00 00 02 00 40 02 00 00 02 00 04 02 00 04     ......@.........
     284:	00 00 02 02 00 02 00 00 01 02 00 01 00 00 00 02     ................
     294:	80 00 00 80 00 02 20 00 00 20 80 02 00 80 00 00     ...... .. ......
     2a4:	40 02 00 40 00 00 44 00 00 40 00 00 42 00 00 40     @..@..D..@..B..@
     2b4:	00 00 41 00 00 40 00 00 40 00 80 40 00 00 40 00     ..A..@..@..@..@.
     2c4:	20 40 00 00 c0 00 00 40 00 00 00 0a 00 00 08 00      @.....@........
     2d4:	44 00 00 04 00 00 42 00 00 02 00 00 41 00 00 01     D.....B.....A...
     2e4:	00 00 40 00 80 00 00 80 40 00 20 00 00 20 c0 00     ..@.....@. .. ..
     2f4:	00 80 00 00 00 0a 00 00 02 00 84 00 00 80 00 00     ................
     304:	82 00 00 80 00 00 81 00 00 80 00 00 80 00 80 80     ................
     314:	00 00 80 00 20 80 00 00 00 09 00 80 01 00 00 03     .... ...........
     324:	00 00 01 00 84 00 00 04 00 00 82 00 00 02 00 00     ................
     334:	81 00 00 01 00 00 80 00 80 00 00 80 80 00 20 00     .............. .
     344:	00 20 00 09 00 00 08 00 00 03 00 00 02 00 04 00     . ..............
     354:	20 00 00 20 02 00 20 00 00 20 01 00 20 00 00 20      .. .. .. .. .. 
     364:	00 00 a0 00 00 20 20 01 00 20 00 00 20 08 00 20     .....  .. .. .. 
     374:	00 00 20 02 00 20 00 00 04 00 20 04 00 00 02 00     .. .. .... .....
     384:	20 02 00 00 01 00 20 01 00 00 00 00 a0 00 00 80      ..... .........
     394:	20 01 00 00 01 00 20 08 00 00 08 00 20 02 00 00      ..... ..... ...
     3a4:	02 00 04 00 80 00 00 80 02 00 80 00 00 80 01 00     ................
     3b4:	80 00 00 80 30 00 00 10 00 00 10 01 00 10 00 00     ....0...........
     3c4:	10 08 00 10 00 00 10 02 00 10 00 00 04 00 80 04     ................
     3d4:	00 00 02 00 80 02 00 00 01 00 80 01 00 00 30 00     ..............0.
     3e4:	00 20 00 00 10 01 00 00 01 00 10 08 00 00 08 00     . ..............
     3f4:	10 02 00 00 02 00 05 00 00 01 00 00 03 00 00 01     ................
     404:	00 00 18 00 00 08 00 00 28 00 00 08 00 00 08 01     ........(.......
     414:	00 08 00 00 08 08 00 08 00 00 08 02 00 08 00 00     ................
     424:	05 00 00 04 00 00 03 00 00 02 00 00 18 00 00 10     ................
     434:	00 00 28 00 00 20 00 00 08 01 00 00 01 00 08 08     ..(.. ..........
     444:	00 00 08 00 08 02 00 00 02 00 06 00 00 02 00 00     ................
     454:	08 00 40 00 00 40 10 00 40 00 00 40 20 00 40 00     ..@..@..@..@ .@.
     464:	00 40 00 01 40 00 00 40 00 08 40 00 00 40 00 02     .@..@..@..@..@..
     474:	40 00 00 40 06 00 00 04 00 00 08 00 40 08 00 00     @..@........@...
     484:	10 00 40 10 00 00 20 00 40 20 00 00 00 01 40 00     ..@... .@ ....@.
     494:	01 00 00 08 40 00 08 00 00 02 40 00 02 00 00 04     ....@.....@.....
     4a4:	40 00 04 00 08 04 00 00 04 00 10 04 00 00 04 00     @...............
     4b4:	20 04 00 00 04 00 00 05 00 00 04 00 00 0c 00 00      ...............
     4c4:	04 00 00 06 00 00 04 00 00 04 40 00 00 40 08 04     ..........@..@..
     4d4:	00 08 00 00 10 04 00 10 00 00 20 04 00 20 00 00     .......... .. ..
     4e4:	00 05 00 00 01 00 00 0c 00 00 08 00 00 06 00 00     ................
     4f4:	02 00                                               ..

000004f6 <Font5x7>:
     4f6:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     506:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     516:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     526:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     536:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     546:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     556:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     566:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     576:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     586:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     596:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     5a6:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     5b6:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     5c6:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     5d6:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     5e6:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     5f6:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     606:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     616:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     626:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     636:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     646:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     656:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     666:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     676:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     686:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     696:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     6a6:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     6b6:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     6c6:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

000006d6 <__ctors_end>:
     6d6:	11 24       	eor	r1, r1
     6d8:	1f be       	out	0x3f, r1	; 63
     6da:	cf ef       	ldi	r28, 0xFF	; 255
     6dc:	d4 e0       	ldi	r29, 0x04	; 4
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	cd bf       	out	0x3d, r28	; 61

000006e2 <__do_copy_data>:
     6e2:	13 e0       	ldi	r17, 0x03	; 3
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	b1 e0       	ldi	r27, 0x01	; 1
     6e8:	e4 e2       	ldi	r30, 0x24	; 36
     6ea:	f9 e1       	ldi	r31, 0x19	; 25
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <__do_copy_data+0x10>
     6ee:	05 90       	lpm	r0, Z+
     6f0:	0d 92       	st	X+, r0
     6f2:	a6 30       	cpi	r26, 0x06	; 6
     6f4:	b1 07       	cpc	r27, r17
     6f6:	d9 f7       	brne	.-10     	; 0x6ee <__do_copy_data+0xc>

000006f8 <__do_clear_bss>:
     6f8:	14 e0       	ldi	r17, 0x04	; 4
     6fa:	a6 e0       	ldi	r26, 0x06	; 6
     6fc:	b3 e0       	ldi	r27, 0x03	; 3
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <.do_clear_bss_start>

00000700 <.do_clear_bss_loop>:
     700:	1d 92       	st	X+, r1

00000702 <.do_clear_bss_start>:
     702:	a5 37       	cpi	r26, 0x75	; 117
     704:	b1 07       	cpc	r27, r17
     706:	e1 f7       	brne	.-8      	; 0x700 <.do_clear_bss_loop>
     708:	7b d5       	rcall	.+2806   	; 0x1200 <main>
     70a:	0a c9       	rjmp	.-3564   	; 0xfffff920 <__eeprom_end+0xff7ef920>

0000070c <__bad_interrupt>:
     70c:	79 cc       	rjmp	.-1806   	; 0x0 <__vectors>

0000070e <__vector_18>:
 see Help - AVR-Libc reference - Library Reference - <avr/interrupt.h>: Interrupts
 for vector names other than USART_RXC_vect for ATmega32 */

volatile char receivedBuffer;

ISR(USART_RX_vect){
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	8f 93       	push	r24
    receivedBuffer = UDR0;
     71a:	80 91 c6 00 	lds	r24, 0x00C6
     71e:	80 93 12 03 	sts	0x0312, r24
    WATCHDOG_RESET
     722:	10 92 0f 03 	sts	0x030F, r1
     726:	10 92 0e 03 	sts	0x030E, r1
}
     72a:	8f 91       	pop	r24
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <USART_Init>:

void USART_Init(void){
   // Set baud rate
   UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits into the high byte of the UBRR register
     736:	10 92 c5 00 	sts	0x00C5, r1
   UBRR0L = BAUD_PRESCALE; // Load lower 8-bits into the low byte of the UBRR register
     73a:	83 e3       	ldi	r24, 0x33	; 51
     73c:	80 93 c4 00 	sts	0x00C4, r24
/*
   UCSR0B = (0 << UCSZ02);
    UCSR0C = 6;//((1 << UCSZ01) | (1 << UCSZ00));
*/
  // Enable receiver and transmitter and receive complete interrupt 
  UCSR0B = ((1<<TXEN0)|(1<<RXEN0) | (1<<RXCIE0));
     740:	88 e9       	ldi	r24, 0x98	; 152
     742:	80 93 c1 00 	sts	0x00C1, r24
}
     746:	08 95       	ret

00000748 <USART_SendByte>:


void USART_SendByte(uint8_t u8Data){

  // Wait until last byte has been transmitted
  while((UCSR0A &(1<<UDRE0)) == 0);
     748:	90 91 c0 00 	lds	r25, 0x00C0
     74c:	95 ff       	sbrs	r25, 5
     74e:	fc cf       	rjmp	.-8      	; 0x748 <USART_SendByte>

  // Transmit data
  UDR0 = u8Data;
     750:	80 93 c6 00 	sts	0x00C6, r24
}
     754:	08 95       	ret

00000756 <USART_SendString>:

void USART_SendString(uint8_t * str){
  while(*str) {
     756:	07 c0       	rjmp	.+14     	; 0x766 <USART_SendString+0x10>


void USART_SendByte(uint8_t u8Data){

  // Wait until last byte has been transmitted
  while((UCSR0A &(1<<UDRE0)) == 0);
     758:	30 91 c0 00 	lds	r19, 0x00C0
     75c:	35 ff       	sbrs	r19, 5
     75e:	fc cf       	rjmp	.-8      	; 0x758 <USART_SendString+0x2>
  UDR0 = u8Data;
}

void USART_SendString(uint8_t * str){
  while(*str) {
    USART_SendByte(*str++);
     760:	01 96       	adiw	r24, 0x01	; 1

  // Wait until last byte has been transmitted
  while((UCSR0A &(1<<UDRE0)) == 0);

  // Transmit data
  UDR0 = u8Data;
     762:	20 93 c6 00 	sts	0x00C6, r18
}

void USART_SendString(uint8_t * str){
  while(*str) {
     766:	fc 01       	movw	r30, r24
     768:	20 81       	ld	r18, Z
     76a:	22 23       	and	r18, r18
     76c:	a9 f7       	brne	.-22     	; 0x758 <USART_SendString+0x2>
    USART_SendByte(*str++);
  }
}
     76e:	08 95       	ret

00000770 <USART_ReceiveByte>:


// not being used but here for completeness
      // Wait until a byte has been received and return received data 
uint8_t USART_ReceiveByte(){
  while((UCSR0A &(1<<RXC0)) == 0);
     770:	80 91 c0 00 	lds	r24, 0x00C0
     774:	87 ff       	sbrs	r24, 7
     776:	fc cf       	rjmp	.-8      	; 0x770 <USART_ReceiveByte>
  return UDR0;
     778:	80 91 c6 00 	lds	r24, 0x00C6
}
     77c:	08 95       	ret

0000077e <__vector_16>:
#endif



ISR(TIMER0_OVF_vect)
{
     77e:	1f 92       	push	r1
     780:	0f 92       	push	r0
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	0f 92       	push	r0
     786:	11 24       	eor	r1, r1
     788:	4f 92       	push	r4
     78a:	5f 92       	push	r5
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	2f 93       	push	r18
     7a6:	3f 93       	push	r19
     7a8:	4f 93       	push	r20
     7aa:	5f 93       	push	r21
     7ac:	6f 93       	push	r22
     7ae:	7f 93       	push	r23
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	af 93       	push	r26
     7b6:	bf 93       	push	r27
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ef 93       	push	r30
     7be:	ff 93       	push	r31
    writeLine(message, index);
     7c0:	80 91 07 03 	lds	r24, 0x0307
     7c4:	90 91 08 03 	lds	r25, 0x0308
    char i = 0;
    unsigned char b = 0;

    unsigned int offset_abs = abs(offset);

    if (offset < 0) {
     7c8:	97 fd       	sbrc	r25, 7
     7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <__vector_16+0x58>
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	12 c0       	rjmp	.+36     	; 0x7fa <__vector_16+0x7c>
    int start = 0;
    char ii = 0;
    char i = 0;
    unsigned char b = 0;

    unsigned int offset_abs = abs(offset);
     7d6:	ee 27       	eor	r30, r30
     7d8:	ff 27       	eor	r31, r31
     7da:	e8 1b       	sub	r30, r24
     7dc:	f9 0b       	sbc	r31, r25

    if (offset < 0) {
        start_2 = offset_abs % 5;
     7de:	cf 01       	movw	r24, r30
     7e0:	65 e0       	ldi	r22, 0x05	; 5
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	68 d5       	rcall	.+2768   	; 0x12b6 <__udivmodhi4>
     7e6:	9c 01       	movw	r18, r24
        x = 0;
        start = offset_abs / 5;
     7e8:	cf 01       	movw	r24, r30
     7ea:	65 e0       	ldi	r22, 0x05	; 5
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	63 d5       	rcall	.+2758   	; 0x12b6 <__udivmodhi4>
     7f0:	86 2f       	mov	r24, r22
     7f2:	97 2f       	mov	r25, r23
     7f4:	ac 01       	movw	r20, r24
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
    //unsigned char space = 0;//offset_abs % 6;
    //if (space == 5)
    //    x++;
    

    for (col = start; x < MATRIX_COL_COUNT; col++) {
     7fa:	14 2f       	mov	r17, r20

            start_2 = 0;
        }
        
        // Ecart entre les lettres
        x = x + ii + char_spacing;
     7fc:	a0 90 06 03 	lds	r10, 0x0306
     800:	bb 24       	eor	r11, r11
}
#endif



ISR(TIMER0_OVF_vect)
     802:	4a e2       	ldi	r20, 0x2A	; 42
     804:	c4 2e       	mov	r12, r20
     806:	d1 2c       	mov	r13, r1
     808:	9c c0       	rjmp	.+312    	; 0x942 <__vector_16+0x1c4>
    

    for (col = start; x < MATRIX_COL_COUNT; col++) {

        // strlen(str)
        tmp = (col < message_size) ? str[col] : ' ';
     80a:	60 91 09 03 	lds	r22, 0x0309
     80e:	70 91 0a 03 	lds	r23, 0x030A
     812:	41 2f       	mov	r20, r17
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	46 17       	cp	r20, r22
     818:	57 07       	cpc	r21, r23
     81a:	14 f0       	brlt	.+4      	; 0x820 <__vector_16+0xa2>
     81c:	40 e2       	ldi	r20, 0x20	; 32
     81e:	04 c0       	rjmp	.+8      	; 0x828 <__vector_16+0xaa>
     820:	4d 5e       	subi	r20, 0xED	; 237
     822:	5c 4f       	sbci	r21, 0xFC	; 252
     824:	fa 01       	movw	r30, r20
     826:	40 81       	ld	r20, Z

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
            for (b = 0; b < 7; b++) {
                if (pgm_read_byte(Font5x7 + (tmp - 0x20) * 5 + i) & (1 << b)) {
     828:	f5 e0       	ldi	r31, 0x05	; 5
     82a:	4f 9f       	mul	r20, r31
     82c:	e0 01       	movw	r28, r0
     82e:	11 24       	eor	r1, r1
     830:	c0 5a       	subi	r28, 0xA0	; 160
     832:	d0 40       	sbci	r29, 0x00	; 0
}
#endif



ISR(TIMER0_OVF_vect)
     834:	8c 9d       	mul	r24, r12
     836:	a0 01       	movw	r20, r0
     838:	8d 9d       	mul	r24, r13
     83a:	50 0d       	add	r21, r0
     83c:	9c 9d       	mul	r25, r12
     83e:	50 0d       	add	r21, r0
     840:	11 24       	eor	r1, r1
     842:	4c 5c       	subi	r20, 0xCC	; 204
     844:	5f 4f       	sbci	r21, 0xFF	; 255
     846:	f9 01       	movw	r30, r18
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	5e c0       	rjmp	.+188    	; 0x90a <__vector_16+0x18c>
        // strlen(str)
        tmp = (col < message_size) ? str[col] : ' ';

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
            for (b = 0; b < 7; b++) {
                if (pgm_read_byte(Font5x7 + (tmp - 0x20) * 5 + i) & (1 << b)) {
     84e:	37 01       	movw	r6, r14
     850:	0a 2e       	mov	r0, r26
     852:	02 c0       	rjmp	.+4      	; 0x858 <__vector_16+0xda>
     854:	75 94       	asr	r7
     856:	67 94       	ror	r6
     858:	0a 94       	dec	r0
     85a:	e2 f7       	brpl	.-8      	; 0x854 <__vector_16+0xd6>
     85c:	60 fe       	sbrs	r6, 0
     85e:	3c c0       	rjmp	.+120    	; 0x8d8 <__vector_16+0x15a>

#include "LedMatrix.h"

inline void setLed(unsigned int x, unsigned int y) {

    if (x >= MATRIX_COL_COUNT || y >= MATRIX_LINE_COUNT) {
     860:	0d e1       	ldi	r16, 0x1D	; 29
     862:	80 16       	cp	r8, r16
     864:	91 04       	cpc	r9, r1
     866:	08 f0       	brcs	.+2      	; 0x86a <__vector_16+0xec>
     868:	34 c0       	rjmp	.+104    	; 0x8d2 <__vector_16+0x154>
        return;
    }

    // Reset all ports
    DDRB = DDRC = DDRD = 0;
     86a:	1a b8       	out	0x0a, r1	; 10
     86c:	7a b0       	in	r7, 0x0a	; 10
     86e:	77 b8       	out	0x07, r7	; 7
     870:	77 b0       	in	r7, 0x07	; 7
     872:	74 b8       	out	0x04, r7	; 4
    PORTB = PORTC = PORTD = 0;
     874:	1b b8       	out	0x0b, r1	; 11
     876:	7b b0       	in	r7, 0x0b	; 11
     878:	78 b8       	out	0x08, r7	; 8
     87a:	78 b0       	in	r7, 0x08	; 8
     87c:	75 b8       	out	0x05, r7	; 5

    DDRB = pgm_read_byte(&(matrix[x][y][_DDRB]));
     87e:	f2 01       	movw	r30, r4
     880:	74 90       	lpm	r7, Z+
     882:	74 b8       	out	0x04, r7	; 4
    DDRC = pgm_read_byte(&(matrix[x][y][_DDRC]));
     884:	32 01       	movw	r6, r4
     886:	08 94       	sec
     888:	61 1c       	adc	r6, r1
     88a:	71 1c       	adc	r7, r1
     88c:	f3 01       	movw	r30, r6
     88e:	74 90       	lpm	r7, Z+
     890:	77 b8       	out	0x07, r7	; 7
    DDRD = pgm_read_byte(&(matrix[x][y][_DDRD]));
     892:	02 e0       	ldi	r16, 0x02	; 2
     894:	60 2e       	mov	r6, r16
     896:	71 2c       	mov	r7, r1
     898:	64 0c       	add	r6, r4
     89a:	75 1c       	adc	r7, r5
     89c:	f3 01       	movw	r30, r6
     89e:	74 90       	lpm	r7, Z+
     8a0:	7a b8       	out	0x0a, r7	; 10

    //DDRD = (PORTD & 0b11100000) ^ pgm_read_byte(&(matrix[x][y][_DDRD]));

    PORTB = pgm_read_byte(&(matrix[x][y][_PORTB]));
     8a2:	f3 e0       	ldi	r31, 0x03	; 3
     8a4:	6f 2e       	mov	r6, r31
     8a6:	71 2c       	mov	r7, r1
     8a8:	64 0c       	add	r6, r4
     8aa:	75 1c       	adc	r7, r5
     8ac:	f3 01       	movw	r30, r6
     8ae:	74 90       	lpm	r7, Z+
     8b0:	75 b8       	out	0x05, r7	; 5
    PORTC = pgm_read_byte(&(matrix[x][y][_PORTC]));
     8b2:	e4 e0       	ldi	r30, 0x04	; 4
     8b4:	6e 2e       	mov	r6, r30
     8b6:	71 2c       	mov	r7, r1
     8b8:	64 0c       	add	r6, r4
     8ba:	75 1c       	adc	r7, r5
     8bc:	f3 01       	movw	r30, r6
     8be:	74 90       	lpm	r7, Z+
     8c0:	78 b8       	out	0x08, r7	; 8
    PORTD = pgm_read_byte(&(matrix[x][y][_PORTD]));
     8c2:	35 e0       	ldi	r19, 0x05	; 5
     8c4:	63 2e       	mov	r6, r19
     8c6:	71 2c       	mov	r7, r1
     8c8:	64 0c       	add	r6, r4
     8ca:	75 1c       	adc	r7, r5
     8cc:	f3 01       	movw	r30, r6
     8ce:	74 90       	lpm	r7, Z+
     8d0:	7b b8       	out	0x0b, r7	; 11

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
            for (b = 0; b < 7; b++) {
                if (pgm_read_byte(Font5x7 + (tmp - 0x20) * 5 + i) & (1 << b)) {
                    setLed(x + ii, b);
                    asm("nop");
     8d2:	00 00       	nop
                    asm("nop");
     8d4:	00 00       	nop
     8d6:	0a c0       	rjmp	.+20     	; 0x8ec <__vector_16+0x16e>
    //PORTD = (PORTD & 0b11100000) ^ pgm_read_byte(&(matrix[x][y][_PORTD]));
}

inline void clearLeds() {
    // Reset all ports
    DDRB = DDRC = DDRD = 0;
     8d8:	1a b8       	out	0x0a, r1	; 10
     8da:	7a b0       	in	r7, 0x0a	; 10
     8dc:	77 b8       	out	0x07, r7	; 7
     8de:	77 b0       	in	r7, 0x07	; 7
     8e0:	74 b8       	out	0x04, r7	; 4
    PORTB = PORTC = PORTD = 0;
     8e2:	1b b8       	out	0x0b, r1	; 11
     8e4:	7b b0       	in	r7, 0x0b	; 11
     8e6:	78 b8       	out	0x08, r7	; 8
     8e8:	78 b0       	in	r7, 0x08	; 8
     8ea:	75 b8       	out	0x05, r7	; 5
     8ec:	11 96       	adiw	r26, 0x01	; 1
     8ee:	e6 e0       	ldi	r30, 0x06	; 6
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	4e 0e       	add	r4, r30
     8f4:	5f 1e       	adc	r5, r31

        // strlen(str)
        tmp = (col < message_size) ? str[col] : ' ';

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
            for (b = 0; b < 7; b++) {
     8f6:	a7 30       	cpi	r26, 0x07	; 7
     8f8:	b1 05       	cpc	r27, r1
     8fa:	09 f0       	breq	.+2      	; 0x8fe <__vector_16+0x180>
     8fc:	a8 cf       	rjmp	.-176    	; 0x84e <__vector_16+0xd0>
     8fe:	6f 5f       	subi	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	46 5d       	subi	r20, 0xD6	; 214
     904:	5f 4f       	sbci	r21, 0xFF	; 255
     906:	e0 e0       	ldi	r30, 0x00	; 0
     908:	f0 e0       	ldi	r31, 0x00	; 0
}
#endif



ISR(TIMER0_OVF_vect)
     90a:	b6 2f       	mov	r27, r22
     90c:	b2 0f       	add	r27, r18
    for (col = start; x < MATRIX_COL_COUNT; col++) {

        // strlen(str)
        tmp = (col < message_size) ? str[col] : ' ';

        for (i = start_2, ii = 0; i < 5; i++, ii++) {    
     90e:	b5 30       	cpi	r27, 0x05	; 5
     910:	88 f4       	brcc	.+34     	; 0x934 <__vector_16+0x1b6>
            for (b = 0; b < 7; b++) {
                if (pgm_read_byte(Font5x7 + (tmp - 0x20) * 5 + i) & (1 << b)) {
     912:	7e 01       	movw	r14, r28
     914:	eb 0e       	add	r14, r27
     916:	f1 1c       	adc	r15, r1
     918:	e6 ef       	ldi	r30, 0xF6	; 246
     91a:	f4 e0       	ldi	r31, 0x04	; 4
     91c:	ee 0e       	add	r14, r30
     91e:	ff 1e       	adc	r15, r31
     920:	2a 01       	movw	r4, r20
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	f7 01       	movw	r30, r14
     928:	e4 90       	lpm	r14, Z+
     92a:	ff 24       	eor	r15, r15

#include "LedMatrix.h"

inline void setLed(unsigned int x, unsigned int y) {

    if (x >= MATRIX_COL_COUNT || y >= MATRIX_LINE_COUNT) {
     92c:	4b 01       	movw	r8, r22
     92e:	88 0e       	add	r8, r24
     930:	99 1e       	adc	r9, r25
     932:	8d cf       	rjmp	.-230    	; 0x84e <__vector_16+0xd0>

            start_2 = 0;
        }
        
        // Ecart entre les lettres
        x = x + ii + char_spacing;
     934:	95 01       	movw	r18, r10
     936:	26 0f       	add	r18, r22
     938:	31 1d       	adc	r19, r1
     93a:	82 0f       	add	r24, r18
     93c:	93 1f       	adc	r25, r19
    //unsigned char space = 0;//offset_abs % 6;
    //if (space == 5)
    //    x++;
    

    for (col = start; x < MATRIX_COL_COUNT; col++) {
     93e:	1f 5f       	subi	r17, 0xFF	; 255
     940:	9f 01       	movw	r18, r30
     942:	8d 31       	cpi	r24, 0x1D	; 29
     944:	91 05       	cpc	r25, r1
     946:	0c f4       	brge	.+2      	; 0x94a <__vector_16+0x1cc>
     948:	60 cf       	rjmp	.-320    	; 0x80a <__vector_16+0x8c>
    //PORTD = (PORTD & 0b11100000) ^ pgm_read_byte(&(matrix[x][y][_PORTD]));
}

inline void clearLeds() {
    // Reset all ports
    DDRB = DDRC = DDRD = 0;
     94a:	1a b8       	out	0x0a, r1	; 10
     94c:	8a b1       	in	r24, 0x0a	; 10
     94e:	87 b9       	out	0x07, r24	; 7
     950:	87 b1       	in	r24, 0x07	; 7
     952:	84 b9       	out	0x04, r24	; 4
    PORTB = PORTC = PORTD = 0;
     954:	1b b8       	out	0x0b, r1	; 11
     956:	8b b1       	in	r24, 0x0b	; 11
     958:	88 b9       	out	0x08, r24	; 8
     95a:	88 b1       	in	r24, 0x08	; 8
     95c:	85 b9       	out	0x05, r24	; 5


ISR(TIMER0_OVF_vect)
{
    writeLine(message, index);
}
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	bf 91       	pop	r27
     968:	af 91       	pop	r26
     96a:	9f 91       	pop	r25
     96c:	8f 91       	pop	r24
     96e:	7f 91       	pop	r23
     970:	6f 91       	pop	r22
     972:	5f 91       	pop	r21
     974:	4f 91       	pop	r20
     976:	3f 91       	pop	r19
     978:	2f 91       	pop	r18
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	7f 90       	pop	r7
     990:	6f 90       	pop	r6
     992:	5f 90       	pop	r5
     994:	4f 90       	pop	r4
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	0f 90       	pop	r0
     99c:	1f 90       	pop	r1
     99e:	18 95       	reti

000009a0 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
     9aa:	2f 93       	push	r18
     9ac:	3f 93       	push	r19
     9ae:	4f 93       	push	r20
     9b0:	5f 93       	push	r21
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
    int size = message_size;
     9ba:	40 91 09 03 	lds	r20, 0x0309
     9be:	50 91 0a 03 	lds	r21, 0x030A
#if INTERACTIVE_MODE || !SYNCHRONIZE
    const unsigned char tab[] = { 5, 5, 4, 4, 3, 3, 3, 3, 2, 2 };
    // Scroll auto if str greater than value or if auto chain = true
    if (size > tab[char_spacing] || auto_chain_message) {
#endif
        size *= (5 + char_spacing);
     9c2:	80 91 06 03 	lds	r24, 0x0306
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	05 96       	adiw	r24, 0x05	; 5
     9ca:	84 9f       	mul	r24, r20
     9cc:	90 01       	movw	r18, r0
     9ce:	85 9f       	mul	r24, r21
     9d0:	30 0d       	add	r19, r0
     9d2:	94 9f       	mul	r25, r20
     9d4:	30 0d       	add	r19, r0
     9d6:	11 24       	eor	r1, r1
        if (scroll_direction) {
     9d8:	40 91 cf 02 	lds	r20, 0x02CF
     9dc:	80 91 07 03 	lds	r24, 0x0307
     9e0:	90 91 08 03 	lds	r25, 0x0308
     9e4:	44 23       	and	r20, r20
     9e6:	79 f0       	breq	.+30     	; 0xa06 <__vector_13+0x66>
            index = index - STEP;
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	90 93 08 03 	sts	0x0308, r25
     9ee:	80 93 07 03 	sts	0x0307, r24
            if (index < -size) {
     9f2:	44 27       	eor	r20, r20
     9f4:	55 27       	eor	r21, r21
     9f6:	42 1b       	sub	r20, r18
     9f8:	53 0b       	sbc	r21, r19
     9fa:	84 17       	cp	r24, r20
     9fc:	95 07       	cpc	r25, r21
     9fe:	9c f4       	brge	.+38     	; 0xa26 <__vector_13+0x86>
                index = MATRIX_COL_COUNT;
     a00:	8d e1       	ldi	r24, 0x1D	; 29
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0c c0       	rjmp	.+24     	; 0xa1e <__vector_13+0x7e>
                    loadNextMessage();
                }
#endif
            }
        } else {
            index = index + STEP;
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	90 93 08 03 	sts	0x0308, r25
     a0c:	80 93 07 03 	sts	0x0307, r24
            if (index > MATRIX_COL_COUNT) {
     a10:	8e 31       	cpi	r24, 0x1E	; 30
     a12:	91 05       	cpc	r25, r1
     a14:	44 f0       	brlt	.+16     	; 0xa26 <__vector_13+0x86>
                index = 0 - size;
     a16:	88 27       	eor	r24, r24
     a18:	99 27       	eor	r25, r25
     a1a:	82 1b       	sub	r24, r18
     a1c:	93 0b       	sbc	r25, r19
     a1e:	90 93 08 03 	sts	0x0308, r25
     a22:	80 93 07 03 	sts	0x0307, r24
    } else {
        index = 0;
    }
#endif

    TCNT1H = speed_table[scroll_speed];
     a26:	e0 91 ce 02 	lds	r30, 0x02CE
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	e0 53       	subi	r30, 0x30	; 48
     a2e:	fd 4f       	sbci	r31, 0xFD	; 253
     a30:	80 81       	ld	r24, Z
     a32:	80 93 85 00 	sts	0x0085, r24
    TCNT1L = 0;
     a36:	10 92 84 00 	sts	0x0084, r1
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	5f 91       	pop	r21
     a44:	4f 91       	pop	r20
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <__vector_21>:
        WATCHDOG_RESET
    }
}

ISR(ADC_vect)
{
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	8f 93       	push	r24
    adc_value = ADCH;
     a60:	80 91 79 00 	lds	r24, 0x0079
     a64:	80 93 6d 04 	sts	0x046D, r24
}
     a68:	8f 91       	pop	r24
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <loadData>:
void loadData() {
#if INTERACTIVE_MODE
    // Load data
    loadMessage(current_message);
#else
    eeprom_read_block((void*)&message, (const void*)EEPROM_CONFIG_ADDR_MESSAGE, sizeof(message));
     a74:	83 e1       	ldi	r24, 0x13	; 19
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	6a e0       	ldi	r22, 0x0A	; 10
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	4a e5       	ldi	r20, 0x5A	; 90
     a7e:	51 e0       	ldi	r21, 0x01	; 1
     a80:	34 d6       	rcall	.+3176   	; 0x16ea <__eerd_block_m88pa>
     a82:	e3 e1       	ldi	r30, 0x13	; 19
     a84:	f3 e0       	ldi	r31, 0x03	; 3

    // First boot ?
    int i = 0;
    char found = 0;
    for (i = 0; i < sizeof(message); i++) {
     a86:	03 c0       	rjmp	.+6      	; 0xa8e <loadData+0x1a>
        if (!message[i]) {
     a88:	81 91       	ld	r24, Z+
     a8a:	88 23       	and	r24, r24
     a8c:	29 f0       	breq	.+10     	; 0xa98 <loadData+0x24>
    eeprom_read_block((void*)&message, (const void*)EEPROM_CONFIG_ADDR_MESSAGE, sizeof(message));

    // First boot ?
    int i = 0;
    char found = 0;
    for (i = 0; i < sizeof(message); i++) {
     a8e:	24 e0       	ldi	r18, 0x04	; 4
     a90:	ed 36       	cpi	r30, 0x6D	; 109
     a92:	f2 07       	cpc	r31, r18
     a94:	c9 f7       	brne	.-14     	; 0xa88 <loadData+0x14>
     a96:	45 c0       	rjmp	.+138    	; 0xb22 <loadData+0xae>
    if (!found) {
        memset(message, 0, sizeof(message));
    }
#endif

    message_size = strlen(message);
     a98:	e3 e1       	ldi	r30, 0x13	; 19
     a9a:	f3 e0       	ldi	r31, 0x03	; 3
     a9c:	01 90       	ld	r0, Z+
     a9e:	00 20       	and	r0, r0
     aa0:	e9 f7       	brne	.-6      	; 0xa9c <loadData+0x28>
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	e3 51       	subi	r30, 0x13	; 19
     aa6:	f3 40       	sbci	r31, 0x03	; 3
     aa8:	f0 93 0a 03 	sts	0x030A, r31
     aac:	e0 93 09 03 	sts	0x0309, r30

    scroll_speed = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_SPEED);
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	2a d6       	rcall	.+3156   	; 0x170a <__eerd_byte_m88pa>
     ab6:	80 93 ce 02 	sts	0x02CE, r24
    if (scroll_speed >= 9) {
     aba:	89 30       	cpi	r24, 0x09	; 9
     abc:	38 f0       	brcs	.+14     	; 0xacc <loadData+0x58>
        scroll_speed = 9;
     abe:	89 e0       	ldi	r24, 0x09	; 9
     ac0:	80 93 ce 02 	sts	0x02CE, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_SPEED, scroll_speed);
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	69 e0       	ldi	r22, 0x09	; 9
     aca:	27 d6       	rcall	.+3150   	; 0x171a <__eeupd_byte_m88pa>
    }

    scroll_direction = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_DIRECTION);
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	1c d6       	rcall	.+3128   	; 0x170a <__eerd_byte_m88pa>
     ad2:	80 93 cf 02 	sts	0x02CF, r24
    if (scroll_direction >= 1) {
     ad6:	88 23       	and	r24, r24
     ad8:	39 f0       	breq	.+14     	; 0xae8 <loadData+0x74>
        scroll_direction = 1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 cf 02 	sts	0x02CF, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_DIRECTION, scroll_direction);
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	19 d6       	rcall	.+3122   	; 0x171a <__eeupd_byte_m88pa>
    }

    char_spacing = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_SPACING);
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e d6       	rcall	.+3100   	; 0x170a <__eerd_byte_m88pa>
     aee:	80 93 06 03 	sts	0x0306, r24
    if (char_spacing >= 1) {
     af2:	88 23       	and	r24, r24
     af4:	39 f0       	breq	.+14     	; 0xb04 <loadData+0x90>
        char_spacing = 1;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 06 03 	sts	0x0306, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_SPACING, char_spacing);
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	0b d6       	rcall	.+3094   	; 0x171a <__eeupd_byte_m88pa>
    }

    intensity = eeprom_read_byte((const void*)EEPROM_CONFIG_ADDR_INTENSITY);
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	00 d6       	rcall	.+3072   	; 0x170a <__eerd_byte_m88pa>
     b0a:	80 93 0c 03 	sts	0x030C, r24
    if (intensity >= 1) {
     b0e:	88 23       	and	r24, r24
     b10:	99 f0       	breq	.+38     	; 0xb38 <loadData+0xc4>
        intensity = 1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 0c 03 	sts	0x030C, r24
        eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_INTENSITY, intensity);
     b18:	83 e0       	ldi	r24, 0x03	; 3
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	fd d5       	rcall	.+3066   	; 0x171a <__eeupd_byte_m88pa>
     b20:	08 95       	ret
            break;
        }
    }

    if (!found) {
        memset(message, 0, sizeof(message));
     b22:	8a e5       	ldi	r24, 0x5A	; 90
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	e3 e1       	ldi	r30, 0x13	; 19
     b28:	f3 e0       	ldi	r31, 0x03	; 3
     b2a:	df 01       	movw	r26, r30
     b2c:	9c 01       	movw	r18, r24
     b2e:	1d 92       	st	X+, r1
     b30:	21 50       	subi	r18, 0x01	; 1
     b32:	30 40       	sbci	r19, 0x00	; 0
     b34:	e1 f7       	brne	.-8      	; 0xb2e <loadData+0xba>
     b36:	b0 cf       	rjmp	.-160    	; 0xa98 <loadData+0x24>
     b38:	08 95       	ret

00000b3a <__vector_9>:
    TCNT1H = speed_table[scroll_speed];
    TCNT1L = 0;
}

ISR(TIMER2_OVF_vect)
{
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	2f 93       	push	r18
     b46:	3f 93       	push	r19
     b48:	4f 93       	push	r20
     b4a:	5f 93       	push	r21
     b4c:	6f 93       	push	r22
     b4e:	7f 93       	push	r23
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	af 93       	push	r26
     b56:	bf 93       	push	r27
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ef 93       	push	r30
     b5e:	ff 93       	push	r31
    if (watchdog_value && watchdog_counter++ >= watchdog_table[watchdog_value]) {
     b60:	e0 91 10 03 	lds	r30, 0x0310
     b64:	ee 23       	and	r30, r30
     b66:	89 f1       	breq	.+98     	; 0xbca <__vector_9+0x90>
     b68:	80 91 0e 03 	lds	r24, 0x030E
     b6c:	90 91 0f 03 	lds	r25, 0x030F
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	ec 51       	subi	r30, 0x1C	; 28
     b78:	fd 4f       	sbci	r31, 0xFD	; 253
     b7a:	20 81       	ld	r18, Z
     b7c:	31 81       	ldd	r19, Z+1	; 0x01
     b7e:	ac 01       	movw	r20, r24
     b80:	4f 5f       	subi	r20, 0xFF	; 255
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	50 93 0f 03 	sts	0x030F, r21
     b88:	40 93 0e 03 	sts	0x030E, r20
     b8c:	82 17       	cp	r24, r18
     b8e:	93 07       	cpc	r25, r19
     b90:	e0 f0       	brcs	.+56     	; 0xbca <__vector_9+0x90>
        SET_MESSAGE(WATCHDOG_ERROR_MSG)
     b92:	c3 e1       	ldi	r28, 0x13	; 19
     b94:	d3 e0       	ldi	r29, 0x03	; 3
     b96:	8a e5       	ldi	r24, 0x5A	; 90
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	fe 01       	movw	r30, r28
     b9c:	9c 01       	movw	r18, r24
     b9e:	11 92       	st	Z+, r1
     ba0:	21 50       	subi	r18, 0x01	; 1
     ba2:	30 40       	sbci	r19, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <__vector_9+0x64>
     ba6:	ce 01       	movw	r24, r28
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	a8 d3       	rcall	.+1872   	; 0x12fe <strcat>
     bae:	09 90       	ld	r0, Y+
     bb0:	00 20       	and	r0, r0
     bb2:	e9 f7       	brne	.-6      	; 0xbae <__vector_9+0x74>
     bb4:	21 97       	sbiw	r28, 0x01	; 1
     bb6:	c3 51       	subi	r28, 0x13	; 19
     bb8:	d3 40       	sbci	r29, 0x03	; 3
     bba:	d0 93 0a 03 	sts	0x030A, r29
     bbe:	c0 93 09 03 	sts	0x0309, r28
        WATCHDOG_RESET
     bc2:	10 92 0f 03 	sts	0x030F, r1
     bc6:	10 92 0e 03 	sts	0x030E, r1
    }
}
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <debug>:
                        printf(".");        \
                    }                       \

#define RESPONSE(c) USART_SendByte(c);

void debug(char * str, ...) {
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
    if (verbose) {
     bf8:	80 91 0b 03 	lds	r24, 0x030B
     bfc:	88 23       	and	r24, r24
     bfe:	39 f0       	breq	.+14     	; 0xc0e <debug+0x1e>
                        printf(".");        \
                    }                       \

#define RESPONSE(c) USART_SendByte(c);

void debug(char * str, ...) {
     c00:	9e 01       	movw	r18, r28
     c02:	29 5f       	subi	r18, 0xF9	; 249
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
    if (verbose) {
        va_list arg;
        va_start(arg, str);
        vprintf(str, arg);
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	b9 01       	movw	r22, r18
     c0c:	9b d3       	rcall	.+1846   	; 0x1344 <vprintf>
        va_end(arg);
    }
}
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <handleAction>:
    value = receivedBuffer;
    receivedBuffer = 0;
    return value;
}

void handleAction() {
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	0f 92       	push	r0
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
    int size = 0;

    char key, key_tmp = 0;
    char value = 0;

    SEND_ACK
     c3e:	80 91 0b 03 	lds	r24, 0x030B
     c42:	88 23       	and	r24, r24
     c44:	69 f0       	breq	.+26     	; 0xc60 <handleAction+0x4c>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <handleAction+0x34>
     c48:	8a e1       	ldi	r24, 0x1A	; 26
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	ad b7       	in	r26, 0x3d	; 61
     c4e:	be b7       	in	r27, 0x3e	; 62
     c50:	12 96       	adiw	r26, 0x02	; 2
     c52:	9c 93       	st	X, r25
     c54:	8e 93       	st	-X, r24
     c56:	11 97       	sbiw	r26, 0x01	; 1
     c58:	5d d3       	rcall	.+1722   	; 0x1314 <printf>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	03 c0       	rjmp	.+6      	; 0xc66 <handleAction+0x52>
     c60:	8e e2       	ldi	r24, 0x2E	; 46
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	69 d3       	rcall	.+1746   	; 0x1338 <putchar>

    receivedBuffer = 0;
     c66:	10 92 12 03 	sts	0x0312, r1
     c6a:	10 e0       	ldi	r17, 0x00	; 0
    while (1) {

        command = 0;
        debug("Wait cmd...");
     c6c:	b0 e2       	ldi	r27, 0x20	; 32
     c6e:	ab 2e       	mov	r10, r27
     c70:	b1 e0       	ldi	r27, 0x01	; 1
     c72:	bb 2e       	mov	r11, r27
                SEND_ACK
                goto end;
        }

end:
        debug("\n\r");
     c74:	ac e2       	ldi	r26, 0x2C	; 44
     c76:	ca 2e       	mov	r12, r26
     c78:	a1 e0       	ldi	r26, 0x01	; 1
     c7a:	da 2e       	mov	r13, r26
                debug(", unknow cmd %c !\n\r", command);
                continue;
        }

        // Get arg
        debug(", wait arg...");
     c7c:	f5 e8       	ldi	r31, 0x85	; 133
     c7e:	8f 2e       	mov	r8, r31
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	9f 2e       	mov	r9, r31
        data = waitData();

        debug(", wait validation...");
     c84:	e3 e9       	ldi	r30, 0x93	; 147
     c86:	6e 2e       	mov	r6, r30
     c88:	e2 e0       	ldi	r30, 0x02	; 2
     c8a:	7e 2e       	mov	r7, r30
        if (data < '0' || data > '9') {
            debug("Arg not valid !");
            goto end;
        }

        debug(", run '%c', arg '%c' ", command, data);
     c8c:	78 eb       	ldi	r23, 0xB8	; 184
     c8e:	47 2e       	mov	r4, r23
     c90:	72 e0       	ldi	r23, 0x02	; 2
     c92:	57 2e       	mov	r5, r23
                debug(", set msg :\n\r");
                //TIMSK0 = 0;
                //TIMSK1 = 0;

                message_size = 0;
                memset(message, 0, sizeof(message));
     c94:	63 e1       	ldi	r22, 0x13	; 19
     c96:	e6 2e       	mov	r14, r22
     c98:	63 e0       	ldi	r22, 0x03	; 3
     c9a:	f6 2e       	mov	r15, r22

    receivedBuffer = 0;
    while (1) {

        command = 0;
        debug("Wait cmd...");
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <handleAction+0x8a>
     c9e:	ed b7       	in	r30, 0x3d	; 61
     ca0:	fe b7       	in	r31, 0x3e	; 62
     ca2:	b2 82       	std	Z+2, r11	; 0x02
     ca4:	a1 82       	std	Z+1, r10	; 0x01
     ca6:	a4 df       	rcall	.-184    	; 0xbf0 <debug>
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <handleAction+0x9c>
     cae:	10 2f       	mov	r17, r16
        //command = waitData();

        // Wait for command
        while (1) {

            if (receivedBuffer) {
     cb0:	80 91 12 03 	lds	r24, 0x0312
     cb4:	88 23       	and	r24, r24
     cb6:	59 f0       	breq	.+22     	; 0xcce <handleAction+0xba>
                command = receivedBuffer;
     cb8:	00 91 12 03 	lds	r16, 0x0312
                receivedBuffer = 0;
     cbc:	10 92 12 03 	sts	0x0312, r1
                printf("%c", tolower(key_tmp));
                key_tmp = 0;
            }
        }

        if (isspace(command)) {
     cc0:	80 2f       	mov	r24, r16
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0c d3       	rcall	.+1560   	; 0x12de <isspace>
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	09 f4       	brne	.+2      	; 0xccc <handleAction+0xb8>
     cca:	4b c0       	rjmp	.+150    	; 0xd62 <handleAction+0x14e>
     ccc:	8e c2       	rjmp	.+1308   	; 0x11ea <handleAction+0x5d6>
                command = receivedBuffer;
                receivedBuffer = 0;
                break;
            }

            ADCSRA |= (1 << ADSC) | (1 << ADIE);
     cce:	80 91 7a 00 	lds	r24, 0x007A
     cd2:	88 64       	ori	r24, 0x48	; 72
     cd4:	80 93 7a 00 	sts	0x007A, r24
            value = adc_value;        
     cd8:	80 91 6d 04 	lds	r24, 0x046D
            if (value > 126 && value < 130) {           // 128
     cdc:	98 2f       	mov	r25, r24
     cde:	9f 57       	subi	r25, 0x7F	; 127
     ce0:	93 30       	cpi	r25, 0x03	; 3
     ce2:	10 f4       	brcc	.+4      	; 0xce8 <handleAction+0xd4>
     ce4:	01 e4       	ldi	r16, 0x41	; 65
     ce6:	22 c0       	rjmp	.+68     	; 0xd2c <handleAction+0x118>
                key = 'A';
            } else if (value > 152 && value < 157) {    // 155
     ce8:	98 2f       	mov	r25, r24
     cea:	99 59       	subi	r25, 0x99	; 153
     cec:	94 30       	cpi	r25, 0x04	; 4
     cee:	10 f4       	brcc	.+4      	; 0xcf4 <handleAction+0xe0>
     cf0:	02 e4       	ldi	r16, 0x42	; 66
     cf2:	1c c0       	rjmp	.+56     	; 0xd2c <handleAction+0x118>
                key = 'B';
            } else if (value > 76 && value < 82) {      // 79
     cf4:	98 2f       	mov	r25, r24
     cf6:	9d 54       	subi	r25, 0x4D	; 77
     cf8:	95 30       	cpi	r25, 0x05	; 5
     cfa:	10 f4       	brcc	.+4      	; 0xd00 <handleAction+0xec>
     cfc:	03 e4       	ldi	r16, 0x43	; 67
     cfe:	16 c0       	rjmp	.+44     	; 0xd2c <handleAction+0x118>
                key = 'C';
            } else if (value > 54 && value < 59) {      // 57
     d00:	98 2f       	mov	r25, r24
     d02:	97 53       	subi	r25, 0x37	; 55
     d04:	94 30       	cpi	r25, 0x04	; 4
     d06:	10 f4       	brcc	.+4      	; 0xd0c <handleAction+0xf8>
     d08:	04 e4       	ldi	r16, 0x44	; 68
     d0a:	10 c0       	rjmp	.+32     	; 0xd2c <handleAction+0x118>
                key = 'D';
            } else if (value > 17 && value < 23) {      // 19
     d0c:	98 2f       	mov	r25, r24
     d0e:	92 51       	subi	r25, 0x12	; 18
     d10:	95 30       	cpi	r25, 0x05	; 5
     d12:	10 f4       	brcc	.+4      	; 0xd18 <handleAction+0x104>
     d14:	05 e4       	ldi	r16, 0x45	; 69
     d16:	0a c0       	rjmp	.+20     	; 0xd2c <handleAction+0x118>
                key = 'E';
            } else if (value > 40 && value < 47) {      // 42
     d18:	98 2f       	mov	r25, r24
     d1a:	99 52       	subi	r25, 0x29	; 41
     d1c:	96 30       	cpi	r25, 0x06	; 6
     d1e:	10 f4       	brcc	.+4      	; 0xd24 <handleAction+0x110>
     d20:	06 e4       	ldi	r16, 0x46	; 70
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <handleAction+0x118>
                key = 'F';
            } else if (value > 189 && value < 195) {    // 192
     d24:	8e 5b       	subi	r24, 0xBE	; 190
     d26:	85 30       	cpi	r24, 0x05	; 5
     d28:	18 f6       	brcc	.-122    	; 0xcb0 <handleAction+0x9c>
     d2a:	07 e4       	ldi	r16, 0x47	; 71
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
     d2c:	8f e4       	ldi	r24, 0x4F	; 79
     d2e:	93 ec       	ldi	r25, 0xC3	; 195
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <handleAction+0x11c>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <handleAction+0x122>
     d36:	00 00       	nop
            }

            // Todo: Faire une boucle d'attente de message sur le port serie...??
            _delay_ms(100);

            if (key != key_tmp) {
     d38:	01 17       	cp	r16, r17
     d3a:	19 f0       	breq	.+6      	; 0xd42 <handleAction+0x12e>
                printf("%c", key);
     d3c:	80 2f       	mov	r24, r16
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fb d2       	rcall	.+1526   	; 0x1338 <putchar>
                key_tmp = key;
            }

            ADCSRA |= (1 << ADSC) | (1 << ADIE);
     d42:	80 91 7a 00 	lds	r24, 0x007A
     d46:	88 64       	ori	r24, 0x48	; 72
     d48:	80 93 7a 00 	sts	0x007A, r24
            if (adc_value > 250) {
     d4c:	80 91 6d 04 	lds	r24, 0x046D
     d50:	8b 3f       	cpi	r24, 0xFB	; 251
     d52:	08 f4       	brcc	.+2      	; 0xd56 <handleAction+0x142>
     d54:	ac cf       	rjmp	.-168    	; 0xcae <handleAction+0x9a>
                printf("%c", tolower(key_tmp));
     d56:	80 2f       	mov	r24, r16
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	c9 d2       	rcall	.+1426   	; 0x12ee <tolower>
     d5c:	ed d2       	rcall	.+1498   	; 0x1338 <putchar>
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	a7 cf       	rjmp	.-178    	; 0xcb0 <handleAction+0x9c>
     d62:	8f e3       	ldi	r24, 0x3F	; 63
     d64:	9d e0       	ldi	r25, 0x0D	; 13
     d66:	a3 e0       	ldi	r26, 0x03	; 3
     d68:	81 50       	subi	r24, 0x01	; 1
     d6a:	90 40       	sbci	r25, 0x00	; 0
     d6c:	a0 40       	sbci	r26, 0x00	; 0
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <handleAction+0x154>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <handleAction+0x15e>
     d72:	00 00       	nop


void USART_SendByte(uint8_t u8Data){

  // Wait until last byte has been transmitted
  while((UCSR0A &(1<<UDRE0)) == 0);
     d74:	80 91 c0 00 	lds	r24, 0x00C0
     d78:	85 ff       	sbrs	r24, 5
     d7a:	fc cf       	rjmp	.-8      	; 0xd74 <handleAction+0x160>

  // Transmit data
  UDR0 = u8Data;
     d7c:	00 93 c6 00 	sts	0x00C6, r16

        // Response
        _delay_ms(500);
        RESPONSE(command);

        switch (command) {
     d80:	0c 36       	cpi	r16, 0x6C	; 108
     d82:	09 f4       	brne	.+2      	; 0xd86 <handleAction+0x172>
     d84:	8c c1       	rjmp	.+792    	; 0x109e <handleAction+0x48a>
     d86:	0d 36       	cpi	r16, 0x6D	; 109
     d88:	98 f4       	brcc	.+38     	; 0xdb0 <handleAction+0x19c>
     d8a:	04 36       	cpi	r16, 0x64	; 100
     d8c:	09 f4       	brne	.+2      	; 0xd90 <handleAction+0x17c>
     d8e:	87 c1       	rjmp	.+782    	; 0x109e <handleAction+0x48a>
     d90:	05 36       	cpi	r16, 0x65	; 101
     d92:	38 f4       	brcc	.+14     	; 0xda2 <handleAction+0x18e>
     d94:	0f 33       	cpi	r16, 0x3F	; 63
     d96:	09 f4       	brne	.+2      	; 0xd9a <handleAction+0x186>
     d98:	c2 c0       	rjmp	.+388    	; 0xf1e <handleAction+0x30a>
     d9a:	03 36       	cpi	r16, 0x63	; 99
     d9c:	09 f0       	breq	.+2      	; 0xda0 <handleAction+0x18c>
     d9e:	6a c1       	rjmp	.+724    	; 0x1074 <handleAction+0x460>
     da0:	0b c1       	rjmp	.+534    	; 0xfb8 <handleAction+0x3a4>
     da2:	05 36       	cpi	r16, 0x65	; 101
     da4:	09 f4       	brne	.+2      	; 0xda8 <handleAction+0x194>
     da6:	5a c1       	rjmp	.+692    	; 0x105c <handleAction+0x448>
     da8:	09 36       	cpi	r16, 0x69	; 105
     daa:	09 f0       	breq	.+2      	; 0xdae <handleAction+0x19a>
     dac:	63 c1       	rjmp	.+710    	; 0x1074 <handleAction+0x460>
     dae:	77 c1       	rjmp	.+750    	; 0x109e <handleAction+0x48a>
     db0:	03 37       	cpi	r16, 0x73	; 115
     db2:	09 f4       	brne	.+2      	; 0xdb6 <handleAction+0x1a2>
     db4:	74 c1       	rjmp	.+744    	; 0x109e <handleAction+0x48a>
     db6:	04 37       	cpi	r16, 0x74	; 116
     db8:	30 f4       	brcc	.+12     	; 0xdc6 <handleAction+0x1b2>
     dba:	0d 36       	cpi	r16, 0x6D	; 109
     dbc:	51 f0       	breq	.+20     	; 0xdd2 <handleAction+0x1be>
     dbe:	00 37       	cpi	r16, 0x70	; 112
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <handleAction+0x1b0>
     dc2:	58 c1       	rjmp	.+688    	; 0x1074 <handleAction+0x460>
     dc4:	e5 c0       	rjmp	.+458    	; 0xf90 <handleAction+0x37c>
     dc6:	80 2f       	mov	r24, r16
     dc8:	86 57       	subi	r24, 0x76	; 118
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	08 f0       	brcs	.+2      	; 0xdd0 <handleAction+0x1bc>
     dce:	52 c1       	rjmp	.+676    	; 0x1074 <handleAction+0x460>
     dd0:	66 c1       	rjmp	.+716    	; 0x109e <handleAction+0x48a>
                data = 0;
#if SYNCHRONIZE
                const char tab[] = { 5, 5, 4, 4, 3, 3, 3, 3, 2, 2 };

                // Wait for first char
                size = message_size * (5 + char_spacing);
     dd2:	40 91 09 03 	lds	r20, 0x0309
     dd6:	50 91 0a 03 	lds	r21, 0x030A
     dda:	80 91 06 03 	lds	r24, 0x0306
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	05 96       	adiw	r24, 0x05	; 5
     de2:	84 9f       	mul	r24, r20
     de4:	90 01       	movw	r18, r0
     de6:	85 9f       	mul	r24, r21
     de8:	30 0d       	add	r19, r0
     dea:	94 9f       	mul	r25, r20
     dec:	30 0d       	add	r19, r0
     dee:	11 24       	eor	r1, r1
                while (1) {
                    if ((index - STEP) == -size) {
     df0:	22 24       	eor	r2, r2
     df2:	33 24       	eor	r3, r3
     df4:	22 1a       	sub	r2, r18
     df6:	33 0a       	sbc	r3, r19
     df8:	80 91 07 03 	lds	r24, 0x0307
     dfc:	90 91 08 03 	lds	r25, 0x0308
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	82 15       	cp	r24, r2
     e04:	93 05       	cpc	r25, r3
     e06:	c1 f4       	brne	.+48     	; 0xe38 <handleAction+0x224>
     e08:	af e4       	ldi	r26, 0x4F	; 79
     e0a:	b3 ec       	ldi	r27, 0xC3	; 195
     e0c:	11 97       	sbiw	r26, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <handleAction+0x1f8>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <handleAction+0x1fe>
     e12:	00 00       	nop
                        _delay_ms(100);
                        SEND_ACK
     e14:	80 91 0b 03 	lds	r24, 0x030B
     e18:	88 23       	and	r24, r24
     e1a:	59 f0       	breq	.+22     	; 0xe32 <handleAction+0x21e>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <handleAction+0x20a>
     e1e:	2a e1       	ldi	r18, 0x1A	; 26
     e20:	31 e0       	ldi	r19, 0x01	; 1
     e22:	ed b7       	in	r30, 0x3d	; 61
     e24:	fe b7       	in	r31, 0x3e	; 62
     e26:	32 83       	std	Z+2, r19	; 0x02
     e28:	21 83       	std	Z+1, r18	; 0x01
     e2a:	74 d2       	rcall	.+1256   	; 0x1314 <printf>
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <handleAction+0x224>
     e32:	8e e2       	ldi	r24, 0x2E	; 46
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	80 d2       	rcall	.+1280   	; 0x1338 <putchar>
                    }

                    if (receivedBuffer) {
     e38:	80 91 12 03 	lds	r24, 0x0312
     e3c:	88 23       	and	r24, r24
     e3e:	e1 f2       	breq	.-72     	; 0xdf8 <handleAction+0x1e4>
                        data = receivedBuffer;
     e40:	00 91 12 03 	lds	r16, 0x0312
                        receivedBuffer = 0;
     e44:	10 92 12 03 	sts	0x0312, r1
                        break;
                    }
                }
#endif

                debug(", set msg :\n\r");
     e48:	00 d0       	rcall	.+0      	; 0xe4a <handleAction+0x236>
     e4a:	ef e2       	ldi	r30, 0x2F	; 47
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	ad b7       	in	r26, 0x3d	; 61
     e50:	be b7       	in	r27, 0x3e	; 62
     e52:	12 96       	adiw	r26, 0x02	; 2
     e54:	fc 93       	st	X, r31
     e56:	ee 93       	st	-X, r30
     e58:	11 97       	sbiw	r26, 0x01	; 1
     e5a:	ca de       	rcall	.-620    	; 0xbf0 <debug>
                //TIMSK0 = 0;
                //TIMSK1 = 0;

                message_size = 0;
     e5c:	10 92 0a 03 	sts	0x030A, r1
     e60:	10 92 09 03 	sts	0x0309, r1
                memset(message, 0, sizeof(message));
     e64:	8a e5       	ldi	r24, 0x5A	; 90
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	d7 01       	movw	r26, r14
     e6a:	fc 01       	movw	r30, r24
     e6c:	1d 92       	st	X+, r1
     e6e:	31 97       	sbiw	r30, 0x01	; 1
     e70:	e9 f7       	brne	.-6      	; 0xe6c <handleAction+0x258>
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
                while (1) {
                    // Return ?
                    if (data == 8) {
     e76:	08 30       	cpi	r16, 0x08	; 8
     e78:	89 f4       	brne	.+34     	; 0xe9c <handleAction+0x288>
                        message[--message_size] = 0;
     e7a:	80 91 09 03 	lds	r24, 0x0309
     e7e:	90 91 0a 03 	lds	r25, 0x030A
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	90 93 0a 03 	sts	0x030A, r25
     e88:	80 93 09 03 	sts	0x0309, r24
     e8c:	e0 91 09 03 	lds	r30, 0x0309
     e90:	f0 91 0a 03 	lds	r31, 0x030A
     e94:	ed 5e       	subi	r30, 0xED	; 237
     e96:	fc 4f       	sbci	r31, 0xFC	; 252
     e98:	10 82       	st	Z, r1
     e9a:	ef cf       	rjmp	.-34     	; 0xe7a <handleAction+0x266>
                        continue;
                    }

                    // Enter pressed ?
                    if (data == 13) {
     e9c:	0d 30       	cpi	r16, 0x0D	; 13
     e9e:	f1 f0       	breq	.+60     	; 0xedc <handleAction+0x2c8>
                        break;
                    }

                    message[message_size++] = data;
     ea0:	80 91 09 03 	lds	r24, 0x0309
     ea4:	90 91 0a 03 	lds	r25, 0x030A
     ea8:	fc 01       	movw	r30, r24
     eaa:	ed 5e       	subi	r30, 0xED	; 237
     eac:	fc 4f       	sbci	r31, 0xFC	; 252
     eae:	00 83       	st	Z, r16
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	90 93 0a 03 	sts	0x030A, r25
     eb6:	80 93 09 03 	sts	0x0309, r24

                    // Test max string size
                    if (message_size == sizeof(message) - 1) {
     eba:	80 91 09 03 	lds	r24, 0x0309
     ebe:	90 91 0a 03 	lds	r25, 0x030A
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	89 35       	cpi	r24, 0x59	; 89
     ec6:	9f 07       	cpc	r25, r31
     ec8:	49 f0       	breq	.+18     	; 0xedc <handleAction+0x2c8>
    }
}

inline char waitData() {
    char value = 0;
    while (!receivedBuffer);
     eca:	80 91 12 03 	lds	r24, 0x0312
     ece:	88 23       	and	r24, r24
     ed0:	e1 f3       	breq	.-8      	; 0xeca <handleAction+0x2b6>
    value = receivedBuffer;
     ed2:	00 91 12 03 	lds	r16, 0x0312
    receivedBuffer = 0;
     ed6:	10 92 12 03 	sts	0x0312, r1
     eda:	cd cf       	rjmp	.-102    	; 0xe76 <handleAction+0x262>
     edc:	8f e3       	ldi	r24, 0x3F	; 63
     ede:	9d e0       	ldi	r25, 0x0D	; 13
     ee0:	a3 e0       	ldi	r26, 0x03	; 3
     ee2:	81 50       	subi	r24, 0x01	; 1
     ee4:	90 40       	sbci	r25, 0x00	; 0
     ee6:	a0 40       	sbci	r26, 0x00	; 0
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <handleAction+0x2ce>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <handleAction+0x2d8>
     eec:	00 00       	nop
                //TIMSK1 |= (1<<TOIE1);

                _delay_ms(500);

                // Send message size
                printf("%03i", message_size);
     eee:	80 91 09 03 	lds	r24, 0x0309
     ef2:	90 91 0a 03 	lds	r25, 0x030A
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <handleAction+0x2e4>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <handleAction+0x2e6>
     efa:	ed e3       	ldi	r30, 0x3D	; 61
     efc:	f1 e0       	ldi	r31, 0x01	; 1
     efe:	ad b7       	in	r26, 0x3d	; 61
     f00:	be b7       	in	r27, 0x3e	; 62
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	fc 93       	st	X, r31
     f06:	ee 93       	st	-X, r30
     f08:	11 97       	sbiw	r26, 0x01	; 1
     f0a:	14 96       	adiw	r26, 0x04	; 4
     f0c:	9c 93       	st	X, r25
     f0e:	8e 93       	st	-X, r24
     f10:	13 97       	sbiw	r26, 0x03	; 3
     f12:	00 d2       	rcall	.+1024   	; 0x1314 <printf>
                goto end;
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	66 c1       	rjmp	.+716    	; 0x11ea <handleAction+0x5d6>
            case '?':
                printf("\n\rwww.digitalspirit.org - hugo\n\r");
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <handleAction+0x30c>
     f20:	e2 e4       	ldi	r30, 0x42	; 66
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	ad b7       	in	r26, 0x3d	; 61
     f26:	be b7       	in	r27, 0x3e	; 62
     f28:	12 96       	adiw	r26, 0x02	; 2
     f2a:	fc 93       	st	X, r31
     f2c:	ee 93       	st	-X, r30
     f2e:	11 97       	sbiw	r26, 0x01	; 1
     f30:	f1 d1       	rcall	.+994    	; 0x1314 <printf>
                printf("AVR Libc %s, %s, %s\n\r", __AVR_LIBC_VERSION_STRING__, __DATE__, __TIME__);
     f32:	00 d0       	rcall	.+0      	; 0xf34 <handleAction+0x320>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <handleAction+0x322>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <handleAction+0x324>
     f38:	ed b7       	in	r30, 0x3d	; 61
     f3a:	fe b7       	in	r31, 0x3e	; 62
     f3c:	31 96       	adiw	r30, 0x01	; 1
     f3e:	23 e6       	ldi	r18, 0x63	; 99
     f40:	31 e0       	ldi	r19, 0x01	; 1
     f42:	ad b7       	in	r26, 0x3d	; 61
     f44:	be b7       	in	r27, 0x3e	; 62
     f46:	12 96       	adiw	r26, 0x02	; 2
     f48:	3c 93       	st	X, r19
     f4a:	2e 93       	st	-X, r18
     f4c:	11 97       	sbiw	r26, 0x01	; 1
     f4e:	89 e7       	ldi	r24, 0x79	; 121
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	93 83       	std	Z+3, r25	; 0x03
     f54:	82 83       	std	Z+2, r24	; 0x02
     f56:	af e7       	ldi	r26, 0x7F	; 127
     f58:	b1 e0       	ldi	r27, 0x01	; 1
     f5a:	b5 83       	std	Z+5, r27	; 0x05
     f5c:	a4 83       	std	Z+4, r26	; 0x04
     f5e:	2b e8       	ldi	r18, 0x8B	; 139
     f60:	31 e0       	ldi	r19, 0x01	; 1
     f62:	37 83       	std	Z+7, r19	; 0x07
     f64:	26 83       	std	Z+6, r18	; 0x06
     f66:	d6 d1       	rcall	.+940    	; 0x1314 <printf>
                printf("m(msg), s(speed), d(direction), l(spacing), e(msg > eeprom), p(print), c(conf), w(watchdog), v(verbose)");
     f68:	8d b7       	in	r24, 0x3d	; 61
     f6a:	9e b7       	in	r25, 0x3e	; 62
     f6c:	06 96       	adiw	r24, 0x06	; 6
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	9e bf       	out	0x3e, r25	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	8d bf       	out	0x3d, r24	; 61
     f78:	e4 e9       	ldi	r30, 0x94	; 148
     f7a:	f1 e0       	ldi	r31, 0x01	; 1
     f7c:	ad b7       	in	r26, 0x3d	; 61
     f7e:	be b7       	in	r27, 0x3e	; 62
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	fc 93       	st	X, r31
     f84:	ee 93       	st	-X, r30
     f86:	11 97       	sbiw	r26, 0x01	; 1
     f88:	c5 d1       	rcall	.+906    	; 0x1314 <printf>
                SEND_ACK
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	14 c1       	rjmp	.+552    	; 0x11b8 <handleAction+0x5a4>
                goto end;
            case 'p':
                printf("%s", message);
     f90:	00 d0       	rcall	.+0      	; 0xf92 <handleAction+0x37e>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <handleAction+0x380>
     f94:	ec ef       	ldi	r30, 0xFC	; 252
     f96:	f1 e0       	ldi	r31, 0x01	; 1
     f98:	ad b7       	in	r26, 0x3d	; 61
     f9a:	be b7       	in	r27, 0x3e	; 62
     f9c:	12 96       	adiw	r26, 0x02	; 2
     f9e:	fc 93       	st	X, r31
     fa0:	ee 93       	st	-X, r30
     fa2:	11 97       	sbiw	r26, 0x01	; 1
     fa4:	14 96       	adiw	r26, 0x04	; 4
     fa6:	fc 92       	st	X, r15
     fa8:	ee 92       	st	-X, r14
     faa:	13 97       	sbiw	r26, 0x03	; 3
     fac:	b3 d1       	rcall	.+870    	; 0x1314 <printf>
                SEND_ACK
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	00 c1       	rjmp	.+512    	; 0x11b8 <handleAction+0x5a4>
                goto end;
            case 'c':
                if (verbose) {
     fb8:	80 91 0b 03 	lds	r24, 0x030B
     fbc:	88 23       	and	r24, r24
     fbe:	a9 f0       	breq	.+42     	; 0xfea <handleAction+0x3d6>
                    printf("\n\rMsg size: %i (max: %u), Speed: %i, Direction: %i, Spacing: %i, Intensity: %i, Watchdog: %i",
     fc0:	80 91 09 03 	lds	r24, 0x0309
     fc4:	90 91 0a 03 	lds	r25, 0x030A
     fc8:	2d b7       	in	r18, 0x3d	; 61
     fca:	3e b7       	in	r19, 0x3e	; 62
     fcc:	20 51       	subi	r18, 0x10	; 16
     fce:	30 40       	sbci	r19, 0x00	; 0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	3e bf       	out	0x3e, r19	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	2d bf       	out	0x3d, r18	; 61
     fda:	ed b7       	in	r30, 0x3d	; 61
     fdc:	fe b7       	in	r31, 0x3e	; 62
     fde:	31 96       	adiw	r30, 0x01	; 1
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	31 e0       	ldi	r19, 0x01	; 1
     fe4:	ad b7       	in	r26, 0x3d	; 61
     fe6:	be b7       	in	r27, 0x3e	; 62
     fe8:	11 c0       	rjmp	.+34     	; 0x100c <handleAction+0x3f8>
                        message_size, sizeof(message), scroll_speed, scroll_direction, char_spacing, intensity, watchdog_value);
                } else {
                    printf("%i|%u|%i|%i|%i|%i|%i",
     fea:	80 91 09 03 	lds	r24, 0x0309
     fee:	90 91 0a 03 	lds	r25, 0x030A
     ff2:	ad b7       	in	r26, 0x3d	; 61
     ff4:	be b7       	in	r27, 0x3e	; 62
     ff6:	50 97       	sbiw	r26, 0x10	; 16
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	be bf       	out	0x3e, r27	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	ad bf       	out	0x3d, r26	; 61
    1002:	ed b7       	in	r30, 0x3d	; 61
    1004:	fe b7       	in	r31, 0x3e	; 62
    1006:	31 96       	adiw	r30, 0x01	; 1
    1008:	2c e5       	ldi	r18, 0x5C	; 92
    100a:	32 e0       	ldi	r19, 0x02	; 2
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	3c 93       	st	X, r19
    1010:	2e 93       	st	-X, r18
    1012:	11 97       	sbiw	r26, 0x01	; 1
    1014:	93 83       	std	Z+3, r25	; 0x03
    1016:	82 83       	std	Z+2, r24	; 0x02
    1018:	8a e5       	ldi	r24, 0x5A	; 90
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	95 83       	std	Z+5, r25	; 0x05
    101e:	84 83       	std	Z+4, r24	; 0x04
    1020:	80 91 ce 02 	lds	r24, 0x02CE
    1024:	86 83       	std	Z+6, r24	; 0x06
    1026:	17 82       	std	Z+7, r1	; 0x07
    1028:	80 91 cf 02 	lds	r24, 0x02CF
    102c:	80 87       	std	Z+8, r24	; 0x08
    102e:	11 86       	std	Z+9, r1	; 0x09
    1030:	80 91 06 03 	lds	r24, 0x0306
    1034:	82 87       	std	Z+10, r24	; 0x0a
    1036:	13 86       	std	Z+11, r1	; 0x0b
    1038:	80 91 0c 03 	lds	r24, 0x030C
    103c:	84 87       	std	Z+12, r24	; 0x0c
    103e:	15 86       	std	Z+13, r1	; 0x0d
    1040:	80 91 10 03 	lds	r24, 0x0310
    1044:	86 87       	std	Z+14, r24	; 0x0e
    1046:	17 86       	std	Z+15, r1	; 0x0f
    1048:	65 d1       	rcall	.+714    	; 0x1314 <printf>
    104a:	8d b7       	in	r24, 0x3d	; 61
    104c:	9e b7       	in	r25, 0x3e	; 62
    104e:	40 96       	adiw	r24, 0x10	; 16
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	9e bf       	out	0x3e, r25	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	8d bf       	out	0x3d, r24	; 61
    105a:	ae c0       	rjmp	.+348    	; 0x11b8 <handleAction+0x5a4>
                        message_size, sizeof(message), scroll_speed, scroll_direction, char_spacing, intensity, watchdog_value);
                }
                SEND_ACK
                goto end;
            case 'e':
                eeprom_write_block((void*)&message, EEPROM_CONFIG_ADDR_MESSAGE, message_size + 1);   // strlen + 0x00
    105c:	40 91 09 03 	lds	r20, 0x0309
    1060:	50 91 0a 03 	lds	r21, 0x030A
    1064:	4f 5f       	subi	r20, 0xFF	; 255
    1066:	5f 4f       	sbci	r21, 0xFF	; 255
    1068:	83 e1       	ldi	r24, 0x13	; 19
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	6a e0       	ldi	r22, 0x0A	; 10
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	66 d3       	rcall	.+1740   	; 0x173e <__eewr_block_m88pa>
    1072:	a2 c0       	rjmp	.+324    	; 0x11b8 <handleAction+0x5a4>
            case 'l':
            case 'i':
            case 'w':
                break;
            default:
                debug(", unknow cmd %c !\n\r", command);
    1074:	00 d0       	rcall	.+0      	; 0x1076 <handleAction+0x462>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <handleAction+0x464>
    1078:	ed b7       	in	r30, 0x3d	; 61
    107a:	fe b7       	in	r31, 0x3e	; 62
    107c:	31 96       	adiw	r30, 0x01	; 1
    107e:	21 e7       	ldi	r18, 0x71	; 113
    1080:	32 e0       	ldi	r19, 0x02	; 2
    1082:	ad b7       	in	r26, 0x3d	; 61
    1084:	be b7       	in	r27, 0x3e	; 62
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	3c 93       	st	X, r19
    108a:	2e 93       	st	-X, r18
    108c:	11 97       	sbiw	r26, 0x01	; 1
    108e:	02 83       	std	Z+2, r16	; 0x02
    1090:	13 82       	std	Z+3, r1	; 0x03
    1092:	ae dd       	rcall	.-1188   	; 0xbf0 <debug>
                continue;
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	ff cd       	rjmp	.-1026   	; 0xc9c <handleAction+0x88>
        }

        // Get arg
        debug(", wait arg...");
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <handleAction+0x48c>
    10a0:	ad b7       	in	r26, 0x3d	; 61
    10a2:	be b7       	in	r27, 0x3e	; 62
    10a4:	12 96       	adiw	r26, 0x02	; 2
    10a6:	9c 92       	st	X, r9
    10a8:	8e 92       	st	-X, r8
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	a1 dd       	rcall	.-1214   	; 0xbf0 <debug>
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    }
}

inline char waitData() {
    char value = 0;
    while (!receivedBuffer);
    10b2:	80 91 12 03 	lds	r24, 0x0312
    10b6:	88 23       	and	r24, r24
    10b8:	e1 f3       	breq	.-8      	; 0x10b2 <handleAction+0x49e>
    value = receivedBuffer;
    10ba:	20 90 12 03 	lds	r2, 0x0312
    receivedBuffer = 0;
    10be:	10 92 12 03 	sts	0x0312, r1

        // Get arg
        debug(", wait arg...");
        data = waitData();

        debug(", wait validation...");
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <handleAction+0x4b0>
    10c4:	ed b7       	in	r30, 0x3d	; 61
    10c6:	fe b7       	in	r31, 0x3e	; 62
    10c8:	72 82       	std	Z+2, r7	; 0x02
    10ca:	61 82       	std	Z+1, r6	; 0x01
    10cc:	91 dd       	rcall	.-1246   	; 0xbf0 <debug>
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    }
}

inline char waitData() {
    char value = 0;
    while (!receivedBuffer);
    10d2:	80 91 12 03 	lds	r24, 0x0312
    10d6:	88 23       	and	r24, r24
    10d8:	e1 f3       	breq	.-8      	; 0x10d2 <handleAction+0x4be>
    value = receivedBuffer;
    10da:	80 91 12 03 	lds	r24, 0x0312
    receivedBuffer = 0;
    10de:	10 92 12 03 	sts	0x0312, r1
        data = waitData();

        debug(", wait validation...");
        while (1) {
            // Wait Return
            if (waitData() == 13) {
    10e2:	8d 30       	cpi	r24, 0x0D	; 13
    10e4:	b1 f7       	brne	.-20     	; 0x10d2 <handleAction+0x4be>
                break;
            }
        }

        if (data < '0' || data > '9') {
    10e6:	62 2d       	mov	r22, r2
    10e8:	60 53       	subi	r22, 0x30	; 48
    10ea:	6a 30       	cpi	r22, 0x0A	; 10
    10ec:	58 f0       	brcs	.+22     	; 0x1104 <handleAction+0x4f0>
            debug("Arg not valid !");
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <handleAction+0x4dc>
    10f0:	e8 ea       	ldi	r30, 0xA8	; 168
    10f2:	f2 e0       	ldi	r31, 0x02	; 2
    10f4:	ad b7       	in	r26, 0x3d	; 61
    10f6:	be b7       	in	r27, 0x3e	; 62
    10f8:	12 96       	adiw	r26, 0x02	; 2
    10fa:	fc 93       	st	X, r31
    10fc:	ee 93       	st	-X, r30
    10fe:	11 97       	sbiw	r26, 0x01	; 1
    1100:	77 dd       	rcall	.-1298   	; 0xbf0 <debug>
    1102:	6d c0       	rjmp	.+218    	; 0x11de <handleAction+0x5ca>
            goto end;
        }

        debug(", run '%c', arg '%c' ", command, data);
    1104:	00 d0       	rcall	.+0      	; 0x1106 <handleAction+0x4f2>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <handleAction+0x4f4>
    1108:	00 d0       	rcall	.+0      	; 0x110a <handleAction+0x4f6>
    110a:	ed b7       	in	r30, 0x3d	; 61
    110c:	fe b7       	in	r31, 0x3e	; 62
    110e:	31 96       	adiw	r30, 0x01	; 1
    1110:	ad b7       	in	r26, 0x3d	; 61
    1112:	be b7       	in	r27, 0x3e	; 62
    1114:	12 96       	adiw	r26, 0x02	; 2
    1116:	5c 92       	st	X, r5
    1118:	4e 92       	st	-X, r4
    111a:	11 97       	sbiw	r26, 0x01	; 1
    111c:	02 83       	std	Z+2, r16	; 0x02
    111e:	13 82       	std	Z+3, r1	; 0x03
    1120:	24 82       	std	Z+4, r2	; 0x04
    1122:	15 82       	std	Z+5, r1	; 0x05
    1124:	69 83       	std	Y+1, r22	; 0x01
    1126:	64 dd       	rcall	.-1336   	; 0xbf0 <debug>
        data = data - '0';

        switch (command) {
    1128:	ed b7       	in	r30, 0x3d	; 61
    112a:	fe b7       	in	r31, 0x3e	; 62
    112c:	36 96       	adiw	r30, 0x06	; 6
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	fe bf       	out	0x3e, r31	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	ed bf       	out	0x3d, r30	; 61
    1138:	69 81       	ldd	r22, Y+1	; 0x01
    113a:	0c 36       	cpi	r16, 0x6C	; 108
    113c:	d1 f0       	breq	.+52     	; 0x1172 <handleAction+0x55e>
    113e:	0d 36       	cpi	r16, 0x6D	; 109
    1140:	30 f4       	brcc	.+12     	; 0x114e <handleAction+0x53a>
    1142:	04 36       	cpi	r16, 0x64	; 100
    1144:	81 f0       	breq	.+32     	; 0x1166 <handleAction+0x552>
    1146:	09 36       	cpi	r16, 0x69	; 105
    1148:	09 f0       	breq	.+2      	; 0x114c <handleAction+0x538>
    114a:	4f c0       	rjmp	.+158    	; 0x11ea <handleAction+0x5d6>
    114c:	28 c0       	rjmp	.+80     	; 0x119e <handleAction+0x58a>
    114e:	06 37       	cpi	r16, 0x76	; 118
    1150:	c1 f1       	breq	.+112    	; 0x11c2 <handleAction+0x5ae>
    1152:	07 37       	cpi	r16, 0x77	; 119
    1154:	99 f0       	breq	.+38     	; 0x117c <handleAction+0x568>
    1156:	03 37       	cpi	r16, 0x73	; 115
    1158:	09 f0       	breq	.+2      	; 0x115c <handleAction+0x548>
    115a:	47 c0       	rjmp	.+142    	; 0x11ea <handleAction+0x5d6>
            case 's':
                scroll_speed = data;
    115c:	60 93 ce 02 	sts	0x02CE, r22
                eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_SPEED, scroll_speed);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	04 c0       	rjmp	.+8      	; 0x116e <handleAction+0x55a>
                SEND_ACK
                break;
            case 'd':
                scroll_direction = data;
    1166:	60 93 cf 02 	sts	0x02CF, r22
                eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_DIRECTION, scroll_direction);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	d5 d2       	rcall	.+1450   	; 0x171a <__eeupd_byte_m88pa>
    1170:	23 c0       	rjmp	.+70     	; 0x11b8 <handleAction+0x5a4>
                SEND_ACK
                break;
            case 'l':
                char_spacing = data;
    1172:	60 93 06 03 	sts	0x0306, r22
                eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_SPACING, char_spacing);
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	f9 cf       	rjmp	.-14     	; 0x116e <handleAction+0x55a>
                SEND_ACK
                break;
            case 'w':
                watchdog_value = data;
    117c:	60 93 10 03 	sts	0x0310, r22
                if (watchdog_value) {
    1180:	66 23       	and	r22, r22
    1182:	51 f0       	breq	.+20     	; 0x1198 <handleAction+0x584>
                    WATCHDOG_RESET
    1184:	10 92 0f 03 	sts	0x030F, r1
    1188:	10 92 0e 03 	sts	0x030E, r1
                    TIMSK2 |= (1<<TOIE2);
    118c:	80 91 70 00 	lds	r24, 0x0070
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	80 93 70 00 	sts	0x0070, r24
    1196:	10 c0       	rjmp	.+32     	; 0x11b8 <handleAction+0x5a4>
                } else {
                    TIMSK2 = 0;
    1198:	10 92 70 00 	sts	0x0070, r1
    119c:	0d c0       	rjmp	.+26     	; 0x11b8 <handleAction+0x5a4>
                }
                SEND_ACK
                break;
            case 'i':
                intensity = data;
    119e:	60 93 0c 03 	sts	0x030C, r22
                eeprom_update_byte((const void*)EEPROM_CONFIG_ADDR_INTENSITY, intensity);
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	b9 d2       	rcall	.+1394   	; 0x171a <__eeupd_byte_m88pa>

                if (intensity) {
    11a8:	80 91 0c 03 	lds	r24, 0x030C
    11ac:	88 23       	and	r24, r24
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <handleAction+0x5a0>
                    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <handleAction+0x5a2>
                } else {
                    TCCR0B = (1<<CS02);
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	85 bd       	out	0x25, r24	; 37
                }

                SEND_ACK
    11b8:	80 91 0b 03 	lds	r24, 0x030B
    11bc:	88 23       	and	r24, r24
    11be:	91 f0       	breq	.+36     	; 0x11e4 <handleAction+0x5d0>
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <handleAction+0x5b6>
                break;
            case 'v':
                verbose = data;
    11c2:	60 93 0b 03 	sts	0x030B, r22
                SEND_ACK
    11c6:	66 23       	and	r22, r22
    11c8:	69 f0       	breq	.+26     	; 0x11e4 <handleAction+0x5d0>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <handleAction+0x5b8>
    11cc:	ea e1       	ldi	r30, 0x1A	; 26
    11ce:	f1 e0       	ldi	r31, 0x01	; 1
    11d0:	ad b7       	in	r26, 0x3d	; 61
    11d2:	be b7       	in	r27, 0x3e	; 62
    11d4:	12 96       	adiw	r26, 0x02	; 2
    11d6:	fc 93       	st	X, r31
    11d8:	ee 93       	st	-X, r30
    11da:	11 97       	sbiw	r26, 0x01	; 1
    11dc:	9b d0       	rcall	.+310    	; 0x1314 <printf>
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <handleAction+0x5d6>
    11e4:	8e e2       	ldi	r24, 0x2E	; 46
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a7 d0       	rcall	.+334    	; 0x1338 <putchar>
                goto end;
        }

end:
        debug("\n\r");
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <handleAction+0x5d8>
    11ec:	ad b7       	in	r26, 0x3d	; 61
    11ee:	be b7       	in	r27, 0x3e	; 62
    11f0:	12 96       	adiw	r26, 0x02	; 2
    11f2:	dc 92       	st	X, r13
    11f4:	ce 92       	st	-X, r12
    11f6:	11 97       	sbiw	r26, 0x01	; 1
    11f8:	fb dc       	rcall	.-1546   	; 0xbf0 <debug>
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	4e cd       	rjmp	.-1380   	; 0xc9c <handleAction+0x88>

00001200 <main>:
    //PORTD = (PORTD & 0b11100000) ^ pgm_read_byte(&(matrix[x][y][_PORTD]));
}

inline void clearLeds() {
    // Reset all ports
    DDRB = DDRC = DDRD = 0;
    1200:	1a b8       	out	0x0a, r1	; 10
    1202:	8a b1       	in	r24, 0x0a	; 10
    1204:	87 b9       	out	0x07, r24	; 7
    1206:	87 b1       	in	r24, 0x07	; 7
    1208:	84 b9       	out	0x04, r24	; 4
    PORTB = PORTC = PORTD = 0;
    120a:	1b b8       	out	0x0b, r1	; 11
    120c:	8b b1       	in	r24, 0x0b	; 11
    120e:	88 b9       	out	0x08, r24	; 8
    1210:	88 b1       	in	r24, 0x08	; 8
    1212:	85 b9       	out	0x05, r24	; 5
int main(void) {

	clearLeds();

    // Timer 0 configuration : Print message
    TIMSK0 |= (1<<TOIE0);
    1214:	ee e6       	ldi	r30, 0x6E	; 110
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	81 60       	ori	r24, 0x01	; 1
    121c:	80 83       	st	Z, r24
    TCCR0A = 0;
    121e:	14 bc       	out	0x24, r1	; 36
    TCCR0B |= ((0<<CS02) | (1<<CS01) | (1<<CS00));
    1220:	85 b5       	in	r24, 0x25	; 37
    1222:	83 60       	ori	r24, 0x03	; 3
    1224:	85 bd       	out	0x25, r24	; 37
    TCNT0 = 0;
    1226:	16 bc       	out	0x26, r1	; 38

    // Timer 1 configuration : Scroll message
    TIMSK1 |= (1<<TOIE1);
    1228:	ef e6       	ldi	r30, 0x6F	; 111
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24
    TCCR1A = 0;
    1232:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= ((0<<CS12) | (1<<CS11) | (1<<CS10));
    1236:	e1 e8       	ldi	r30, 0x81	; 129
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	83 60       	ori	r24, 0x03	; 3
    123e:	80 83       	st	Z, r24
    TCCR1C  = 0;
    1240:	10 92 82 00 	sts	0x0082, r1
    TCNT1 = 0;
    1244:	10 92 85 00 	sts	0x0085, r1
    1248:	10 92 84 00 	sts	0x0084, r1

    // Timer 2 configuration
    TIMSK2 |= 0;
    124c:	e0 e7       	ldi	r30, 0x70	; 112
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 83       	st	Z, r24
    TCCR2A = 0;
    1254:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B |= ((1<<CS22) | (1<<CS21) | (1<<CS20));
    1258:	e1 eb       	ldi	r30, 0xB1	; 177
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	87 60       	ori	r24, 0x07	; 7
    1260:	80 83       	st	Z, r24
    TCNT2 = 0;
    1262:	10 92 b2 00 	sts	0x00B2, r1
    //DDRD = 2;
    //PORTD = 0;

    // Init ADC
    //ADMUX |= (0 << REFS1) | (0 << REFS0) | (1 << MUX2) | (1 << MUX1);
    ADMUX = 0b01100110;
    1266:	86 e6       	ldi	r24, 0x66	; 102
    1268:	80 93 7c 00 	sts	0x007C, r24

    //set prescaller and enable ADC
    ADCSRA |= (1 << ADEN) | (1 << ADIE);
    126c:	ea e7       	ldi	r30, 0x7A	; 122
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	88 68       	ori	r24, 0x88	; 136
    1274:	80 83       	st	Z, r24
    WATCHDOG_RESET
}

void USART_Init(void){
   // Set baud rate
   UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits into the high byte of the UBRR register
    1276:	10 92 c5 00 	sts	0x00C5, r1
   UBRR0L = BAUD_PRESCALE; // Load lower 8-bits into the low byte of the UBRR register
    127a:	83 e3       	ldi	r24, 0x33	; 51
    127c:	80 93 c4 00 	sts	0x00C4, r24
/*
   UCSR0B = (0 << UCSZ02);
    UCSR0C = 6;//((1 << UCSZ01) | (1 << UCSZ00));
*/
  // Enable receiver and transmitter and receive complete interrupt 
  UCSR0B = ((1<<TXEN0)|(1<<RXEN0) | (1<<RXCIE0));
    1280:	88 e9       	ldi	r24, 0x98	; 152
    1282:	80 93 c1 00 	sts	0x00C1, r24

    USART_Init();

    stdout = &mystdout;
    1286:	88 ef       	ldi	r24, 0xF8	; 248
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	90 93 72 04 	sts	0x0472, r25
    128e:	80 93 71 04 	sts	0x0471, r24

    memset(message, 0, sizeof(message));
    1292:	8a e5       	ldi	r24, 0x5A	; 90
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	e3 e1       	ldi	r30, 0x13	; 19
    1298:	f3 e0       	ldi	r31, 0x03	; 3
    129a:	df 01       	movw	r26, r30
    129c:	9c 01       	movw	r18, r24
    129e:	1d 92       	st	X+, r1
    12a0:	21 50       	subi	r18, 0x01	; 1
    12a2:	30 40       	sbci	r19, 0x00	; 0
    12a4:	e1 f7       	brne	.-8      	; 0x129e <main+0x9e>

    current_message = 0;
    12a6:	10 92 11 03 	sts	0x0311, r1

    loadData();
    12aa:	e4 db       	rcall	.-2104   	; 0xa74 <loadData>

    sei();
    12ac:	78 94       	sei

    handleAction();
    12ae:	b2 dc       	rcall	.-1692   	; 0xc14 <handleAction>
}
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	08 95       	ret

000012b6 <__udivmodhi4>:
    12b6:	aa 1b       	sub	r26, r26
    12b8:	bb 1b       	sub	r27, r27
    12ba:	51 e1       	ldi	r21, 0x11	; 17
    12bc:	07 c0       	rjmp	.+14     	; 0x12cc <__udivmodhi4_ep>

000012be <__udivmodhi4_loop>:
    12be:	aa 1f       	adc	r26, r26
    12c0:	bb 1f       	adc	r27, r27
    12c2:	a6 17       	cp	r26, r22
    12c4:	b7 07       	cpc	r27, r23
    12c6:	10 f0       	brcs	.+4      	; 0x12cc <__udivmodhi4_ep>
    12c8:	a6 1b       	sub	r26, r22
    12ca:	b7 0b       	sbc	r27, r23

000012cc <__udivmodhi4_ep>:
    12cc:	88 1f       	adc	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	5a 95       	dec	r21
    12d2:	a9 f7       	brne	.-22     	; 0x12be <__udivmodhi4_loop>
    12d4:	80 95       	com	r24
    12d6:	90 95       	com	r25
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	08 95       	ret

000012de <isspace>:
    12de:	91 11       	cpse	r25, r1
    12e0:	45 c2       	rjmp	.+1162   	; 0x176c <__ctype_isfalse>
    12e2:	80 32       	cpi	r24, 0x20	; 32
    12e4:	19 f0       	breq	.+6      	; 0x12ec <isspace+0xe>
    12e6:	89 50       	subi	r24, 0x09	; 9
    12e8:	85 50       	subi	r24, 0x05	; 5
    12ea:	d0 f7       	brcc	.-12     	; 0x12e0 <isspace+0x2>
    12ec:	08 95       	ret

000012ee <tolower>:
    12ee:	91 11       	cpse	r25, r1
    12f0:	08 95       	ret
    12f2:	81 54       	subi	r24, 0x41	; 65
    12f4:	8a 51       	subi	r24, 0x1A	; 26
    12f6:	08 f4       	brcc	.+2      	; 0x12fa <tolower+0xc>
    12f8:	80 5e       	subi	r24, 0xE0	; 224
    12fa:	85 5a       	subi	r24, 0xA5	; 165
    12fc:	08 95       	ret

000012fe <strcat>:
    12fe:	fb 01       	movw	r30, r22
    1300:	dc 01       	movw	r26, r24
    1302:	0d 90       	ld	r0, X+
    1304:	00 20       	and	r0, r0
    1306:	e9 f7       	brne	.-6      	; 0x1302 <strcat+0x4>
    1308:	11 97       	sbiw	r26, 0x01	; 1
    130a:	01 90       	ld	r0, Z+
    130c:	0d 92       	st	X+, r0
    130e:	00 20       	and	r0, r0
    1310:	e1 f7       	brne	.-8      	; 0x130a <strcat+0xc>
    1312:	08 95       	ret

00001314 <printf>:
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ef e8       	ldi	r30, 0x8F	; 143
    131a:	f9 e0       	ldi	r31, 0x09	; 9
    131c:	da c2       	rjmp	.+1460   	; 0x18d2 <__prologue_saves__+0x20>
    131e:	fe 01       	movw	r30, r28
    1320:	35 96       	adiw	r30, 0x05	; 5
    1322:	61 91       	ld	r22, Z+
    1324:	71 91       	ld	r23, Z+
    1326:	80 91 71 04 	lds	r24, 0x0471
    132a:	90 91 72 04 	lds	r25, 0x0472
    132e:	af 01       	movw	r20, r30
    1330:	12 d0       	rcall	.+36     	; 0x1356 <vfprintf>
    1332:	20 96       	adiw	r28, 0x00	; 0
    1334:	e2 e0       	ldi	r30, 0x02	; 2
    1336:	e9 c2       	rjmp	.+1490   	; 0x190a <__epilogue_restores__+0x20>

00001338 <putchar>:
    1338:	60 91 71 04 	lds	r22, 0x0471
    133c:	70 91 72 04 	lds	r23, 0x0472
    1340:	2e d2       	rcall	.+1116   	; 0x179e <fputc>
    1342:	08 95       	ret

00001344 <vprintf>:
    1344:	9c 01       	movw	r18, r24
    1346:	ab 01       	movw	r20, r22
    1348:	80 91 71 04 	lds	r24, 0x0471
    134c:	90 91 72 04 	lds	r25, 0x0472
    1350:	b9 01       	movw	r22, r18
    1352:	01 d0       	rcall	.+2      	; 0x1356 <vfprintf>
    1354:	08 95       	ret

00001356 <vfprintf>:
    1356:	ac e0       	ldi	r26, 0x0C	; 12
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e0 eb       	ldi	r30, 0xB0	; 176
    135c:	f9 e0       	ldi	r31, 0x09	; 9
    135e:	aa c2       	rjmp	.+1364   	; 0x18b4 <__prologue_saves__+0x2>
    1360:	6c 01       	movw	r12, r24
    1362:	2b 01       	movw	r4, r22
    1364:	8a 01       	movw	r16, r20
    1366:	fc 01       	movw	r30, r24
    1368:	17 82       	std	Z+7, r1	; 0x07
    136a:	16 82       	std	Z+6, r1	; 0x06
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	81 fd       	sbrc	r24, 1
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <vfprintf+0x22>
    1372:	2f ef       	ldi	r18, 0xFF	; 255
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	b5 c1       	rjmp	.+874    	; 0x16e2 <vfprintf+0x38c>
    1378:	4e 01       	movw	r8, r28
    137a:	08 94       	sec
    137c:	81 1c       	adc	r8, r1
    137e:	91 1c       	adc	r9, r1
    1380:	6f e3       	ldi	r22, 0x3F	; 63
    1382:	36 2e       	mov	r3, r22
    1384:	f6 01       	movw	r30, r12
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	f2 01       	movw	r30, r4
    138a:	93 fd       	sbrc	r25, 3
    138c:	85 91       	lpm	r24, Z+
    138e:	93 ff       	sbrs	r25, 3
    1390:	81 91       	ld	r24, Z+
    1392:	2f 01       	movw	r4, r30
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <vfprintf+0x44>
    1398:	a1 c1       	rjmp	.+834    	; 0x16dc <vfprintf+0x386>
    139a:	85 32       	cpi	r24, 0x25	; 37
    139c:	39 f4       	brne	.+14     	; 0x13ac <vfprintf+0x56>
    139e:	93 fd       	sbrc	r25, 3
    13a0:	85 91       	lpm	r24, Z+
    13a2:	93 ff       	sbrs	r25, 3
    13a4:	81 91       	ld	r24, Z+
    13a6:	2f 01       	movw	r4, r30
    13a8:	85 32       	cpi	r24, 0x25	; 37
    13aa:	21 f4       	brne	.+8      	; 0x13b4 <vfprintf+0x5e>
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	b6 01       	movw	r22, r12
    13b0:	f6 d1       	rcall	.+1004   	; 0x179e <fputc>
    13b2:	e8 cf       	rjmp	.-48     	; 0x1384 <vfprintf+0x2e>
    13b4:	ee 24       	eor	r14, r14
    13b6:	ff 24       	eor	r15, r15
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	20 32       	cpi	r18, 0x20	; 32
    13bc:	b0 f4       	brcc	.+44     	; 0x13ea <vfprintf+0x94>
    13be:	8b 32       	cpi	r24, 0x2B	; 43
    13c0:	69 f0       	breq	.+26     	; 0x13dc <vfprintf+0x86>
    13c2:	8c 32       	cpi	r24, 0x2C	; 44
    13c4:	28 f4       	brcc	.+10     	; 0x13d0 <vfprintf+0x7a>
    13c6:	80 32       	cpi	r24, 0x20	; 32
    13c8:	51 f0       	breq	.+20     	; 0x13de <vfprintf+0x88>
    13ca:	83 32       	cpi	r24, 0x23	; 35
    13cc:	71 f4       	brne	.+28     	; 0x13ea <vfprintf+0x94>
    13ce:	0b c0       	rjmp	.+22     	; 0x13e6 <vfprintf+0x90>
    13d0:	8d 32       	cpi	r24, 0x2D	; 45
    13d2:	39 f0       	breq	.+14     	; 0x13e2 <vfprintf+0x8c>
    13d4:	80 33       	cpi	r24, 0x30	; 48
    13d6:	49 f4       	brne	.+18     	; 0x13ea <vfprintf+0x94>
    13d8:	21 60       	ori	r18, 0x01	; 1
    13da:	2c c0       	rjmp	.+88     	; 0x1434 <vfprintf+0xde>
    13dc:	22 60       	ori	r18, 0x02	; 2
    13de:	24 60       	ori	r18, 0x04	; 4
    13e0:	29 c0       	rjmp	.+82     	; 0x1434 <vfprintf+0xde>
    13e2:	28 60       	ori	r18, 0x08	; 8
    13e4:	27 c0       	rjmp	.+78     	; 0x1434 <vfprintf+0xde>
    13e6:	20 61       	ori	r18, 0x10	; 16
    13e8:	25 c0       	rjmp	.+74     	; 0x1434 <vfprintf+0xde>
    13ea:	27 fd       	sbrc	r18, 7
    13ec:	2c c0       	rjmp	.+88     	; 0x1446 <vfprintf+0xf0>
    13ee:	38 2f       	mov	r19, r24
    13f0:	30 53       	subi	r19, 0x30	; 48
    13f2:	3a 30       	cpi	r19, 0x0A	; 10
    13f4:	98 f4       	brcc	.+38     	; 0x141c <vfprintf+0xc6>
    13f6:	26 ff       	sbrs	r18, 6
    13f8:	08 c0       	rjmp	.+16     	; 0x140a <vfprintf+0xb4>
    13fa:	8e 2d       	mov	r24, r14
    13fc:	88 0f       	add	r24, r24
    13fe:	e8 2e       	mov	r14, r24
    1400:	ee 0c       	add	r14, r14
    1402:	ee 0c       	add	r14, r14
    1404:	e8 0e       	add	r14, r24
    1406:	e3 0e       	add	r14, r19
    1408:	15 c0       	rjmp	.+42     	; 0x1434 <vfprintf+0xde>
    140a:	8f 2d       	mov	r24, r15
    140c:	88 0f       	add	r24, r24
    140e:	f8 2e       	mov	r15, r24
    1410:	ff 0c       	add	r15, r15
    1412:	ff 0c       	add	r15, r15
    1414:	f8 0e       	add	r15, r24
    1416:	f3 0e       	add	r15, r19
    1418:	20 62       	ori	r18, 0x20	; 32
    141a:	0c c0       	rjmp	.+24     	; 0x1434 <vfprintf+0xde>
    141c:	8e 32       	cpi	r24, 0x2E	; 46
    141e:	21 f4       	brne	.+8      	; 0x1428 <vfprintf+0xd2>
    1420:	26 fd       	sbrc	r18, 6
    1422:	5c c1       	rjmp	.+696    	; 0x16dc <vfprintf+0x386>
    1424:	20 64       	ori	r18, 0x40	; 64
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <vfprintf+0xde>
    1428:	8c 36       	cpi	r24, 0x6C	; 108
    142a:	11 f4       	brne	.+4      	; 0x1430 <vfprintf+0xda>
    142c:	20 68       	ori	r18, 0x80	; 128
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0xde>
    1430:	88 36       	cpi	r24, 0x68	; 104
    1432:	49 f4       	brne	.+18     	; 0x1446 <vfprintf+0xf0>
    1434:	f2 01       	movw	r30, r4
    1436:	93 fd       	sbrc	r25, 3
    1438:	85 91       	lpm	r24, Z+
    143a:	93 ff       	sbrs	r25, 3
    143c:	81 91       	ld	r24, Z+
    143e:	2f 01       	movw	r4, r30
    1440:	88 23       	and	r24, r24
    1442:	09 f0       	breq	.+2      	; 0x1446 <vfprintf+0xf0>
    1444:	ba cf       	rjmp	.-140    	; 0x13ba <vfprintf+0x64>
    1446:	98 2f       	mov	r25, r24
    1448:	95 54       	subi	r25, 0x45	; 69
    144a:	93 30       	cpi	r25, 0x03	; 3
    144c:	18 f0       	brcs	.+6      	; 0x1454 <vfprintf+0xfe>
    144e:	90 52       	subi	r25, 0x20	; 32
    1450:	93 30       	cpi	r25, 0x03	; 3
    1452:	20 f4       	brcc	.+8      	; 0x145c <vfprintf+0x106>
    1454:	0c 5f       	subi	r16, 0xFC	; 252
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	39 82       	std	Y+1, r3	; 0x01
    145a:	0d c0       	rjmp	.+26     	; 0x1476 <vfprintf+0x120>
    145c:	83 36       	cpi	r24, 0x63	; 99
    145e:	31 f0       	breq	.+12     	; 0x146c <vfprintf+0x116>
    1460:	83 37       	cpi	r24, 0x73	; 115
    1462:	71 f0       	breq	.+28     	; 0x1480 <vfprintf+0x12a>
    1464:	83 35       	cpi	r24, 0x53	; 83
    1466:	09 f0       	breq	.+2      	; 0x146a <vfprintf+0x114>
    1468:	54 c0       	rjmp	.+168    	; 0x1512 <vfprintf+0x1bc>
    146a:	1d c0       	rjmp	.+58     	; 0x14a6 <vfprintf+0x150>
    146c:	f8 01       	movw	r30, r16
    146e:	80 81       	ld	r24, Z
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	0e 5f       	subi	r16, 0xFE	; 254
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	54 01       	movw	r10, r8
    1478:	51 e0       	ldi	r21, 0x01	; 1
    147a:	65 2e       	mov	r6, r21
    147c:	71 2c       	mov	r7, r1
    147e:	11 c0       	rjmp	.+34     	; 0x14a2 <vfprintf+0x14c>
    1480:	f8 01       	movw	r30, r16
    1482:	a0 80       	ld	r10, Z
    1484:	b1 80       	ldd	r11, Z+1	; 0x01
    1486:	26 fd       	sbrc	r18, 6
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <vfprintf+0x13a>
    148a:	6f ef       	ldi	r22, 0xFF	; 255
    148c:	7f ef       	ldi	r23, 0xFF	; 255
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <vfprintf+0x13e>
    1490:	6e 2d       	mov	r22, r14
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	0e 5f       	subi	r16, 0xFE	; 254
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
    1498:	c5 01       	movw	r24, r10
    149a:	2c 87       	std	Y+12, r18	; 0x0c
    149c:	75 d1       	rcall	.+746    	; 0x1788 <strnlen>
    149e:	3c 01       	movw	r6, r24
    14a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14a2:	2f 77       	andi	r18, 0x7F	; 127
    14a4:	12 c0       	rjmp	.+36     	; 0x14ca <vfprintf+0x174>
    14a6:	f8 01       	movw	r30, r16
    14a8:	a0 80       	ld	r10, Z
    14aa:	b1 80       	ldd	r11, Z+1	; 0x01
    14ac:	26 fd       	sbrc	r18, 6
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <vfprintf+0x160>
    14b0:	6f ef       	ldi	r22, 0xFF	; 255
    14b2:	7f ef       	ldi	r23, 0xFF	; 255
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <vfprintf+0x164>
    14b6:	6e 2d       	mov	r22, r14
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	0e 5f       	subi	r16, 0xFE	; 254
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	c5 01       	movw	r24, r10
    14c0:	2c 87       	std	Y+12, r18	; 0x0c
    14c2:	57 d1       	rcall	.+686    	; 0x1772 <strnlen_P>
    14c4:	3c 01       	movw	r6, r24
    14c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c8:	20 68       	ori	r18, 0x80	; 128
    14ca:	23 ff       	sbrs	r18, 3
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <vfprintf+0x188>
    14ce:	1d c0       	rjmp	.+58     	; 0x150a <vfprintf+0x1b4>
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	b6 01       	movw	r22, r12
    14d6:	2c 87       	std	Y+12, r18	; 0x0c
    14d8:	62 d1       	rcall	.+708    	; 0x179e <fputc>
    14da:	fa 94       	dec	r15
    14dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    14de:	8f 2d       	mov	r24, r15
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	68 16       	cp	r6, r24
    14e4:	79 06       	cpc	r7, r25
    14e6:	a0 f3       	brcs	.-24     	; 0x14d0 <vfprintf+0x17a>
    14e8:	10 c0       	rjmp	.+32     	; 0x150a <vfprintf+0x1b4>
    14ea:	f5 01       	movw	r30, r10
    14ec:	27 fd       	sbrc	r18, 7
    14ee:	85 91       	lpm	r24, Z+
    14f0:	27 ff       	sbrs	r18, 7
    14f2:	81 91       	ld	r24, Z+
    14f4:	5f 01       	movw	r10, r30
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	b6 01       	movw	r22, r12
    14fa:	2c 87       	std	Y+12, r18	; 0x0c
    14fc:	50 d1       	rcall	.+672    	; 0x179e <fputc>
    14fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1500:	f1 10       	cpse	r15, r1
    1502:	fa 94       	dec	r15
    1504:	08 94       	sec
    1506:	61 08       	sbc	r6, r1
    1508:	71 08       	sbc	r7, r1
    150a:	61 14       	cp	r6, r1
    150c:	71 04       	cpc	r7, r1
    150e:	69 f7       	brne	.-38     	; 0x14ea <vfprintf+0x194>
    1510:	e2 c0       	rjmp	.+452    	; 0x16d6 <vfprintf+0x380>
    1512:	84 36       	cpi	r24, 0x64	; 100
    1514:	11 f0       	breq	.+4      	; 0x151a <vfprintf+0x1c4>
    1516:	89 36       	cpi	r24, 0x69	; 105
    1518:	49 f5       	brne	.+82     	; 0x156c <vfprintf+0x216>
    151a:	27 ff       	sbrs	r18, 7
    151c:	08 c0       	rjmp	.+16     	; 0x152e <vfprintf+0x1d8>
    151e:	f8 01       	movw	r30, r16
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	0c 5f       	subi	r16, 0xFC	; 252
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <vfprintf+0x1ec>
    152e:	f8 01       	movw	r30, r16
    1530:	40 81       	ld	r20, Z
    1532:	51 81       	ldd	r21, Z+1	; 0x01
    1534:	ba 01       	movw	r22, r20
    1536:	88 27       	eor	r24, r24
    1538:	77 fd       	sbrc	r23, 7
    153a:	80 95       	com	r24
    153c:	98 2f       	mov	r25, r24
    153e:	0e 5f       	subi	r16, 0xFE	; 254
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	4f e6       	ldi	r20, 0x6F	; 111
    1544:	b4 2e       	mov	r11, r20
    1546:	b2 22       	and	r11, r18
    1548:	97 ff       	sbrs	r25, 7
    154a:	09 c0       	rjmp	.+18     	; 0x155e <vfprintf+0x208>
    154c:	90 95       	com	r25
    154e:	80 95       	com	r24
    1550:	70 95       	com	r23
    1552:	61 95       	neg	r22
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	f0 e8       	ldi	r31, 0x80	; 128
    155c:	bf 2a       	or	r11, r31
    155e:	a4 01       	movw	r20, r8
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	48 d1       	rcall	.+656    	; 0x17f6 <__ultoa_invert>
    1566:	78 2e       	mov	r7, r24
    1568:	78 18       	sub	r7, r8
    156a:	42 c0       	rjmp	.+132    	; 0x15f0 <vfprintf+0x29a>
    156c:	85 37       	cpi	r24, 0x75	; 117
    156e:	31 f4       	brne	.+12     	; 0x157c <vfprintf+0x226>
    1570:	3f ee       	ldi	r19, 0xEF	; 239
    1572:	b3 2e       	mov	r11, r19
    1574:	b2 22       	and	r11, r18
    1576:	2a e0       	ldi	r18, 0x0A	; 10
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	23 c0       	rjmp	.+70     	; 0x15c2 <vfprintf+0x26c>
    157c:	99 ef       	ldi	r25, 0xF9	; 249
    157e:	b9 2e       	mov	r11, r25
    1580:	b2 22       	and	r11, r18
    1582:	8f 36       	cpi	r24, 0x6F	; 111
    1584:	61 f0       	breq	.+24     	; 0x159e <vfprintf+0x248>
    1586:	80 37       	cpi	r24, 0x70	; 112
    1588:	20 f4       	brcc	.+8      	; 0x1592 <vfprintf+0x23c>
    158a:	88 35       	cpi	r24, 0x58	; 88
    158c:	09 f0       	breq	.+2      	; 0x1590 <vfprintf+0x23a>
    158e:	a6 c0       	rjmp	.+332    	; 0x16dc <vfprintf+0x386>
    1590:	12 c0       	rjmp	.+36     	; 0x15b6 <vfprintf+0x260>
    1592:	80 37       	cpi	r24, 0x70	; 112
    1594:	39 f0       	breq	.+14     	; 0x15a4 <vfprintf+0x24e>
    1596:	88 37       	cpi	r24, 0x78	; 120
    1598:	09 f0       	breq	.+2      	; 0x159c <vfprintf+0x246>
    159a:	a0 c0       	rjmp	.+320    	; 0x16dc <vfprintf+0x386>
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <vfprintf+0x252>
    159e:	28 e0       	ldi	r18, 0x08	; 8
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <vfprintf+0x26c>
    15a4:	20 e1       	ldi	r18, 0x10	; 16
    15a6:	b2 2a       	or	r11, r18
    15a8:	b4 fe       	sbrs	r11, 4
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <vfprintf+0x25a>
    15ac:	84 e0       	ldi	r24, 0x04	; 4
    15ae:	b8 2a       	or	r11, r24
    15b0:	20 e1       	ldi	r18, 0x10	; 16
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <vfprintf+0x26c>
    15b6:	b4 fe       	sbrs	r11, 4
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <vfprintf+0x268>
    15ba:	e6 e0       	ldi	r30, 0x06	; 6
    15bc:	be 2a       	or	r11, r30
    15be:	20 e1       	ldi	r18, 0x10	; 16
    15c0:	32 e0       	ldi	r19, 0x02	; 2
    15c2:	b7 fe       	sbrs	r11, 7
    15c4:	08 c0       	rjmp	.+16     	; 0x15d6 <vfprintf+0x280>
    15c6:	f8 01       	movw	r30, r16
    15c8:	60 81       	ld	r22, Z
    15ca:	71 81       	ldd	r23, Z+1	; 0x01
    15cc:	82 81       	ldd	r24, Z+2	; 0x02
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	0c 5f       	subi	r16, 0xFC	; 252
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <vfprintf+0x28e>
    15d6:	f8 01       	movw	r30, r16
    15d8:	60 81       	ld	r22, Z
    15da:	71 81       	ldd	r23, Z+1	; 0x01
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 5f       	subi	r16, 0xFE	; 254
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	a4 01       	movw	r20, r8
    15e6:	07 d1       	rcall	.+526    	; 0x17f6 <__ultoa_invert>
    15e8:	78 2e       	mov	r7, r24
    15ea:	78 18       	sub	r7, r8
    15ec:	ff e7       	ldi	r31, 0x7F	; 127
    15ee:	bf 22       	and	r11, r31
    15f0:	b6 fe       	sbrs	r11, 6
    15f2:	0b c0       	rjmp	.+22     	; 0x160a <vfprintf+0x2b4>
    15f4:	2e ef       	ldi	r18, 0xFE	; 254
    15f6:	b2 22       	and	r11, r18
    15f8:	7e 14       	cp	r7, r14
    15fa:	38 f4       	brcc	.+14     	; 0x160a <vfprintf+0x2b4>
    15fc:	b4 fe       	sbrs	r11, 4
    15fe:	07 c0       	rjmp	.+14     	; 0x160e <vfprintf+0x2b8>
    1600:	b2 fc       	sbrc	r11, 2
    1602:	05 c0       	rjmp	.+10     	; 0x160e <vfprintf+0x2b8>
    1604:	8f ee       	ldi	r24, 0xEF	; 239
    1606:	b8 22       	and	r11, r24
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x2b8>
    160a:	a7 2c       	mov	r10, r7
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <vfprintf+0x2ba>
    160e:	ae 2c       	mov	r10, r14
    1610:	8b 2d       	mov	r24, r11
    1612:	b4 fe       	sbrs	r11, 4
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <vfprintf+0x2da>
    1616:	fe 01       	movw	r30, r28
    1618:	e7 0d       	add	r30, r7
    161a:	f1 1d       	adc	r31, r1
    161c:	90 81       	ld	r25, Z
    161e:	90 33       	cpi	r25, 0x30	; 48
    1620:	19 f4       	brne	.+6      	; 0x1628 <vfprintf+0x2d2>
    1622:	e9 ee       	ldi	r30, 0xE9	; 233
    1624:	be 22       	and	r11, r30
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <vfprintf+0x2e0>
    1628:	a3 94       	inc	r10
    162a:	b2 fe       	sbrs	r11, 2
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <vfprintf+0x2e0>
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <vfprintf+0x2de>
    1630:	86 78       	andi	r24, 0x86	; 134
    1632:	09 f0       	breq	.+2      	; 0x1636 <vfprintf+0x2e0>
    1634:	a3 94       	inc	r10
    1636:	6b 2c       	mov	r6, r11
    1638:	b3 fc       	sbrc	r11, 3
    163a:	13 c0       	rjmp	.+38     	; 0x1662 <vfprintf+0x30c>
    163c:	b0 fe       	sbrs	r11, 0
    163e:	0e c0       	rjmp	.+28     	; 0x165c <vfprintf+0x306>
    1640:	af 14       	cp	r10, r15
    1642:	10 f0       	brcs	.+4      	; 0x1648 <vfprintf+0x2f2>
    1644:	e7 2c       	mov	r14, r7
    1646:	0a c0       	rjmp	.+20     	; 0x165c <vfprintf+0x306>
    1648:	e7 2c       	mov	r14, r7
    164a:	ef 0c       	add	r14, r15
    164c:	ea 18       	sub	r14, r10
    164e:	af 2c       	mov	r10, r15
    1650:	05 c0       	rjmp	.+10     	; 0x165c <vfprintf+0x306>
    1652:	80 e2       	ldi	r24, 0x20	; 32
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	b6 01       	movw	r22, r12
    1658:	a2 d0       	rcall	.+324    	; 0x179e <fputc>
    165a:	a3 94       	inc	r10
    165c:	af 14       	cp	r10, r15
    165e:	c8 f3       	brcs	.-14     	; 0x1652 <vfprintf+0x2fc>
    1660:	04 c0       	rjmp	.+8      	; 0x166a <vfprintf+0x314>
    1662:	af 14       	cp	r10, r15
    1664:	10 f4       	brcc	.+4      	; 0x166a <vfprintf+0x314>
    1666:	fa 18       	sub	r15, r10
    1668:	01 c0       	rjmp	.+2      	; 0x166c <vfprintf+0x316>
    166a:	ff 24       	eor	r15, r15
    166c:	64 fe       	sbrs	r6, 4
    166e:	0e c0       	rjmp	.+28     	; 0x168c <vfprintf+0x336>
    1670:	80 e3       	ldi	r24, 0x30	; 48
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	b6 01       	movw	r22, r12
    1676:	93 d0       	rcall	.+294    	; 0x179e <fputc>
    1678:	62 fe       	sbrs	r6, 2
    167a:	1b c0       	rjmp	.+54     	; 0x16b2 <vfprintf+0x35c>
    167c:	61 fc       	sbrc	r6, 1
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <vfprintf+0x330>
    1680:	88 e7       	ldi	r24, 0x78	; 120
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e c0       	rjmp	.+28     	; 0x16a2 <vfprintf+0x34c>
    1686:	88 e5       	ldi	r24, 0x58	; 88
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <vfprintf+0x34c>
    168c:	86 2d       	mov	r24, r6
    168e:	86 78       	andi	r24, 0x86	; 134
    1690:	81 f0       	breq	.+32     	; 0x16b2 <vfprintf+0x35c>
    1692:	61 fe       	sbrs	r6, 1
    1694:	02 c0       	rjmp	.+4      	; 0x169a <vfprintf+0x344>
    1696:	8b e2       	ldi	r24, 0x2B	; 43
    1698:	01 c0       	rjmp	.+2      	; 0x169c <vfprintf+0x346>
    169a:	80 e2       	ldi	r24, 0x20	; 32
    169c:	b7 fc       	sbrc	r11, 7
    169e:	8d e2       	ldi	r24, 0x2D	; 45
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	b6 01       	movw	r22, r12
    16a4:	7c d0       	rcall	.+248    	; 0x179e <fputc>
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <vfprintf+0x35c>
    16a8:	80 e3       	ldi	r24, 0x30	; 48
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	b6 01       	movw	r22, r12
    16ae:	77 d0       	rcall	.+238    	; 0x179e <fputc>
    16b0:	ea 94       	dec	r14
    16b2:	7e 14       	cp	r7, r14
    16b4:	c8 f3       	brcs	.-14     	; 0x16a8 <vfprintf+0x352>
    16b6:	7a 94       	dec	r7
    16b8:	f4 01       	movw	r30, r8
    16ba:	e7 0d       	add	r30, r7
    16bc:	f1 1d       	adc	r31, r1
    16be:	80 81       	ld	r24, Z
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	b6 01       	movw	r22, r12
    16c4:	6c d0       	rcall	.+216    	; 0x179e <fputc>
    16c6:	77 20       	and	r7, r7
    16c8:	b1 f7       	brne	.-20     	; 0x16b6 <vfprintf+0x360>
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <vfprintf+0x380>
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	b6 01       	movw	r22, r12
    16d2:	65 d0       	rcall	.+202    	; 0x179e <fputc>
    16d4:	fa 94       	dec	r15
    16d6:	ff 20       	and	r15, r15
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <vfprintf+0x376>
    16da:	54 ce       	rjmp	.-856    	; 0x1384 <vfprintf+0x2e>
    16dc:	f6 01       	movw	r30, r12
    16de:	26 81       	ldd	r18, Z+6	; 0x06
    16e0:	37 81       	ldd	r19, Z+7	; 0x07
    16e2:	c9 01       	movw	r24, r18
    16e4:	2c 96       	adiw	r28, 0x0c	; 12
    16e6:	e1 e1       	ldi	r30, 0x11	; 17
    16e8:	01 c1       	rjmp	.+514    	; 0x18ec <__epilogue_restores__+0x2>

000016ea <__eerd_block_m88pa>:
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22

000016ee <__eerd_blraw_m88pa>:
    16ee:	fc 01       	movw	r30, r24
    16f0:	f9 99       	sbic	0x1f, 1	; 31
    16f2:	fe cf       	rjmp	.-4      	; 0x16f0 <__eerd_blraw_m88pa+0x2>
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <__eerd_blraw_m88pa+0x14>
    16f6:	f2 bd       	out	0x22, r31	; 34
    16f8:	e1 bd       	out	0x21, r30	; 33
    16fa:	f8 9a       	sbi	0x1f, 0	; 31
    16fc:	31 96       	adiw	r30, 0x01	; 1
    16fe:	00 b4       	in	r0, 0x20	; 32
    1700:	0d 92       	st	X+, r0
    1702:	41 50       	subi	r20, 0x01	; 1
    1704:	50 40       	sbci	r21, 0x00	; 0
    1706:	b8 f7       	brcc	.-18     	; 0x16f6 <__eerd_blraw_m88pa+0x8>
    1708:	08 95       	ret

0000170a <__eerd_byte_m88pa>:
    170a:	f9 99       	sbic	0x1f, 1	; 31
    170c:	fe cf       	rjmp	.-4      	; 0x170a <__eerd_byte_m88pa>
    170e:	92 bd       	out	0x22, r25	; 34
    1710:	81 bd       	out	0x21, r24	; 33
    1712:	f8 9a       	sbi	0x1f, 0	; 31
    1714:	99 27       	eor	r25, r25
    1716:	80 b5       	in	r24, 0x20	; 32
    1718:	08 95       	ret

0000171a <__eeupd_byte_m88pa>:
    171a:	26 2f       	mov	r18, r22

0000171c <__eeupd_r18_m88pa>:
    171c:	f9 99       	sbic	0x1f, 1	; 31
    171e:	fe cf       	rjmp	.-4      	; 0x171c <__eeupd_r18_m88pa>
    1720:	92 bd       	out	0x22, r25	; 34
    1722:	81 bd       	out	0x21, r24	; 33
    1724:	f8 9a       	sbi	0x1f, 0	; 31
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	00 b4       	in	r0, 0x20	; 32
    172a:	02 16       	cp	r0, r18
    172c:	39 f0       	breq	.+14     	; 0x173c <__eeupd_r18_m88pa+0x20>
    172e:	1f ba       	out	0x1f, r1	; 31
    1730:	20 bd       	out	0x20, r18	; 32
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	fa 9a       	sbi	0x1f, 2	; 31
    1738:	f9 9a       	sbi	0x1f, 1	; 31
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	08 95       	ret

0000173e <__eewr_block_m88pa>:
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <__eewr_block_m88pa+0xa>
    1744:	2d 91       	ld	r18, X+
    1746:	05 d0       	rcall	.+10     	; 0x1752 <__eewr_r18_m88pa>
    1748:	41 50       	subi	r20, 0x01	; 1
    174a:	50 40       	sbci	r21, 0x00	; 0
    174c:	d8 f7       	brcc	.-10     	; 0x1744 <__eewr_block_m88pa+0x6>
    174e:	08 95       	ret

00001750 <__eewr_byte_m88pa>:
    1750:	26 2f       	mov	r18, r22

00001752 <__eewr_r18_m88pa>:
    1752:	f9 99       	sbic	0x1f, 1	; 31
    1754:	fe cf       	rjmp	.-4      	; 0x1752 <__eewr_r18_m88pa>
    1756:	1f ba       	out	0x1f, r1	; 31
    1758:	92 bd       	out	0x22, r25	; 34
    175a:	81 bd       	out	0x21, r24	; 33
    175c:	20 bd       	out	0x20, r18	; 32
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	fa 9a       	sbi	0x1f, 2	; 31
    1764:	f9 9a       	sbi	0x1f, 1	; 31
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	08 95       	ret

0000176c <__ctype_isfalse>:
    176c:	99 27       	eor	r25, r25
    176e:	88 27       	eor	r24, r24

00001770 <__ctype_istrue>:
    1770:	08 95       	ret

00001772 <strnlen_P>:
    1772:	fc 01       	movw	r30, r24
    1774:	05 90       	lpm	r0, Z+
    1776:	61 50       	subi	r22, 0x01	; 1
    1778:	70 40       	sbci	r23, 0x00	; 0
    177a:	01 10       	cpse	r0, r1
    177c:	d8 f7       	brcc	.-10     	; 0x1774 <strnlen_P+0x2>
    177e:	80 95       	com	r24
    1780:	90 95       	com	r25
    1782:	8e 0f       	add	r24, r30
    1784:	9f 1f       	adc	r25, r31
    1786:	08 95       	ret

00001788 <strnlen>:
    1788:	fc 01       	movw	r30, r24
    178a:	61 50       	subi	r22, 0x01	; 1
    178c:	70 40       	sbci	r23, 0x00	; 0
    178e:	01 90       	ld	r0, Z+
    1790:	01 10       	cpse	r0, r1
    1792:	d8 f7       	brcc	.-10     	; 0x178a <strnlen+0x2>
    1794:	80 95       	com	r24
    1796:	90 95       	com	r25
    1798:	8e 0f       	add	r24, r30
    179a:	9f 1f       	adc	r25, r31
    179c:	08 95       	ret

0000179e <fputc>:
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	8c 01       	movw	r16, r24
    17a8:	eb 01       	movw	r28, r22
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	81 ff       	sbrs	r24, 1
    17ae:	1b c0       	rjmp	.+54     	; 0x17e6 <fputc+0x48>
    17b0:	82 ff       	sbrs	r24, 2
    17b2:	0d c0       	rjmp	.+26     	; 0x17ce <fputc+0x30>
    17b4:	2e 81       	ldd	r18, Y+6	; 0x06
    17b6:	3f 81       	ldd	r19, Y+7	; 0x07
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	28 17       	cp	r18, r24
    17be:	39 07       	cpc	r19, r25
    17c0:	64 f4       	brge	.+24     	; 0x17da <fputc+0x3c>
    17c2:	e8 81       	ld	r30, Y
    17c4:	f9 81       	ldd	r31, Y+1	; 0x01
    17c6:	01 93       	st	Z+, r16
    17c8:	f9 83       	std	Y+1, r31	; 0x01
    17ca:	e8 83       	st	Y, r30
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <fputc+0x3c>
    17ce:	e8 85       	ldd	r30, Y+8	; 0x08
    17d0:	f9 85       	ldd	r31, Y+9	; 0x09
    17d2:	80 2f       	mov	r24, r16
    17d4:	09 95       	icall
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	31 f4       	brne	.+12     	; 0x17e6 <fputc+0x48>
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	9f 81       	ldd	r25, Y+7	; 0x07
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	9f 83       	std	Y+7, r25	; 0x07
    17e2:	8e 83       	std	Y+6, r24	; 0x06
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <fputc+0x4c>
    17e6:	0f ef       	ldi	r16, 0xFF	; 255
    17e8:	1f ef       	ldi	r17, 0xFF	; 255
    17ea:	c8 01       	movw	r24, r16
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <__ultoa_invert>:
    17f6:	fa 01       	movw	r30, r20
    17f8:	aa 27       	eor	r26, r26
    17fa:	28 30       	cpi	r18, 0x08	; 8
    17fc:	51 f1       	breq	.+84     	; 0x1852 <__ultoa_invert+0x5c>
    17fe:	20 31       	cpi	r18, 0x10	; 16
    1800:	81 f1       	breq	.+96     	; 0x1862 <__ultoa_invert+0x6c>
    1802:	e8 94       	clt
    1804:	6f 93       	push	r22
    1806:	6e 7f       	andi	r22, 0xFE	; 254
    1808:	6e 5f       	subi	r22, 0xFE	; 254
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	af 4f       	sbci	r26, 0xFF	; 255
    1812:	b1 e0       	ldi	r27, 0x01	; 1
    1814:	3e d0       	rcall	.+124    	; 0x1892 <__ultoa_invert+0x9c>
    1816:	b4 e0       	ldi	r27, 0x04	; 4
    1818:	3c d0       	rcall	.+120    	; 0x1892 <__ultoa_invert+0x9c>
    181a:	67 0f       	add	r22, r23
    181c:	78 1f       	adc	r23, r24
    181e:	89 1f       	adc	r24, r25
    1820:	9a 1f       	adc	r25, r26
    1822:	a1 1d       	adc	r26, r1
    1824:	68 0f       	add	r22, r24
    1826:	79 1f       	adc	r23, r25
    1828:	8a 1f       	adc	r24, r26
    182a:	91 1d       	adc	r25, r1
    182c:	a1 1d       	adc	r26, r1
    182e:	6a 0f       	add	r22, r26
    1830:	71 1d       	adc	r23, r1
    1832:	81 1d       	adc	r24, r1
    1834:	91 1d       	adc	r25, r1
    1836:	a1 1d       	adc	r26, r1
    1838:	20 d0       	rcall	.+64     	; 0x187a <__ultoa_invert+0x84>
    183a:	09 f4       	brne	.+2      	; 0x183e <__ultoa_invert+0x48>
    183c:	68 94       	set
    183e:	3f 91       	pop	r19
    1840:	2a e0       	ldi	r18, 0x0A	; 10
    1842:	26 9f       	mul	r18, r22
    1844:	11 24       	eor	r1, r1
    1846:	30 19       	sub	r19, r0
    1848:	30 5d       	subi	r19, 0xD0	; 208
    184a:	31 93       	st	Z+, r19
    184c:	de f6       	brtc	.-74     	; 0x1804 <__ultoa_invert+0xe>
    184e:	cf 01       	movw	r24, r30
    1850:	08 95       	ret
    1852:	46 2f       	mov	r20, r22
    1854:	47 70       	andi	r20, 0x07	; 7
    1856:	40 5d       	subi	r20, 0xD0	; 208
    1858:	41 93       	st	Z+, r20
    185a:	b3 e0       	ldi	r27, 0x03	; 3
    185c:	0f d0       	rcall	.+30     	; 0x187c <__ultoa_invert+0x86>
    185e:	c9 f7       	brne	.-14     	; 0x1852 <__ultoa_invert+0x5c>
    1860:	f6 cf       	rjmp	.-20     	; 0x184e <__ultoa_invert+0x58>
    1862:	46 2f       	mov	r20, r22
    1864:	4f 70       	andi	r20, 0x0F	; 15
    1866:	40 5d       	subi	r20, 0xD0	; 208
    1868:	4a 33       	cpi	r20, 0x3A	; 58
    186a:	18 f0       	brcs	.+6      	; 0x1872 <__ultoa_invert+0x7c>
    186c:	49 5d       	subi	r20, 0xD9	; 217
    186e:	31 fd       	sbrc	r19, 1
    1870:	40 52       	subi	r20, 0x20	; 32
    1872:	41 93       	st	Z+, r20
    1874:	02 d0       	rcall	.+4      	; 0x187a <__ultoa_invert+0x84>
    1876:	a9 f7       	brne	.-22     	; 0x1862 <__ultoa_invert+0x6c>
    1878:	ea cf       	rjmp	.-44     	; 0x184e <__ultoa_invert+0x58>
    187a:	b4 e0       	ldi	r27, 0x04	; 4
    187c:	a6 95       	lsr	r26
    187e:	97 95       	ror	r25
    1880:	87 95       	ror	r24
    1882:	77 95       	ror	r23
    1884:	67 95       	ror	r22
    1886:	ba 95       	dec	r27
    1888:	c9 f7       	brne	.-14     	; 0x187c <__ultoa_invert+0x86>
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	61 05       	cpc	r22, r1
    188e:	71 05       	cpc	r23, r1
    1890:	08 95       	ret
    1892:	9b 01       	movw	r18, r22
    1894:	ac 01       	movw	r20, r24
    1896:	0a 2e       	mov	r0, r26
    1898:	06 94       	lsr	r0
    189a:	57 95       	ror	r21
    189c:	47 95       	ror	r20
    189e:	37 95       	ror	r19
    18a0:	27 95       	ror	r18
    18a2:	ba 95       	dec	r27
    18a4:	c9 f7       	brne	.-14     	; 0x1898 <__ultoa_invert+0xa2>
    18a6:	62 0f       	add	r22, r18
    18a8:	73 1f       	adc	r23, r19
    18aa:	84 1f       	adc	r24, r20
    18ac:	95 1f       	adc	r25, r21
    18ae:	a0 1d       	adc	r26, r0
    18b0:	08 95       	ret

000018b2 <__prologue_saves__>:
    18b2:	2f 92       	push	r2
    18b4:	3f 92       	push	r3
    18b6:	4f 92       	push	r4
    18b8:	5f 92       	push	r5
    18ba:	6f 92       	push	r6
    18bc:	7f 92       	push	r7
    18be:	8f 92       	push	r8
    18c0:	9f 92       	push	r9
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	ca 1b       	sub	r28, r26
    18dc:	db 0b       	sbc	r29, r27
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	09 94       	ijmp

000018ea <__epilogue_restores__>:
    18ea:	2a 88       	ldd	r2, Y+18	; 0x12
    18ec:	39 88       	ldd	r3, Y+17	; 0x11
    18ee:	48 88       	ldd	r4, Y+16	; 0x10
    18f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    18f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    18f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    18f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    18f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    18fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    18fc:	b9 84       	ldd	r11, Y+9	; 0x09
    18fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1900:	df 80       	ldd	r13, Y+7	; 0x07
    1902:	ee 80       	ldd	r14, Y+6	; 0x06
    1904:	fd 80       	ldd	r15, Y+5	; 0x05
    1906:	0c 81       	ldd	r16, Y+4	; 0x04
    1908:	1b 81       	ldd	r17, Y+3	; 0x03
    190a:	aa 81       	ldd	r26, Y+2	; 0x02
    190c:	b9 81       	ldd	r27, Y+1	; 0x01
    190e:	ce 0f       	add	r28, r30
    1910:	d1 1d       	adc	r29, r1
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	ed 01       	movw	r28, r26
    191e:	08 95       	ret

00001920 <_exit>:
    1920:	f8 94       	cli

00001922 <__stop_program>:
    1922:	ff cf       	rjmp	.-2      	; 0x1922 <__stop_program>
